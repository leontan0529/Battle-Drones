
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c408  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  0800c598  0800c598  0001c598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3d0  0800d3d0  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3d0  0800d3d0  0001d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3d8  0800d3d8  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3dc  0800d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800d3e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df4  200002c0  0800d6a0  000202c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  0800d6a0  000210b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140df  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a7  00000000  00000000  00034412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00037ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8d  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a137  00000000  00000000  00039c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018873  00000000  00000000  00063db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7976  00000000  00000000  0007c627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000677c  00000000  00000000  00173fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0017a71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c580 	.word	0x0800c580

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0800c580 	.word	0x0800c580

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f60:	d119      	bne.n	8000f96 <ParseNumber+0x52>
        minus = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
        i++;
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f72:	e010      	b.n	8000f96 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3b30      	subs	r3, #48	; 0x30
 8000f86:	4413      	add	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
        i++;
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f9c:	d903      	bls.n	8000fa6 <ParseNumber+0x62>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b39      	cmp	r3, #57	; 0x39
 8000fa4:	d9e6      	bls.n	8000f74 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <ParseNumber+0x6e>
        *cnt = i;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	7bba      	ldrb	r2, [r7, #14]
 8000fb0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <ParseNumber+0x7a>
        return 0 - sum;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	425b      	negs	r3, r3
 8000fbc:	e000      	b.n	8000fc0 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fbe:	68bb      	ldr	r3, [r7, #8]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000fda:	e019      	b.n	8001010 <ParseIP+0x44>
    hexcnt = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8000fe6:	d00e      	beq.n	8001006 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000fe8:	f107 030e 	add.w	r3, r7, #14
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa8 	bl	8000f44 <ParseNumber>
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	73fa      	strb	r2, [r7, #15]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e1      	bne.n	8000fdc <ParseIP+0x10>
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3302      	adds	r3, #2
 8001036:	4934      	ldr	r1, [pc, #208]	; (8001108 <AT_ParseInfo+0xe4>)
 8001038:	4618      	mov	r0, r3
 800103a:	f008 fa63 	bl	8009504 <strtok>
 800103e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001040:	e05a      	b.n	80010f8 <AT_ParseInfo+0xd4>
    switch (num++) {
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	72fa      	strb	r2, [r7, #11]
 8001048:	2b06      	cmp	r3, #6
 800104a:	d84f      	bhi.n	80010ec <AT_ParseInfo+0xc8>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <AT_ParseInfo+0x30>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001071 	.word	0x08001071
 8001058:	0800107f 	.word	0x0800107f
 800105c:	0800108f 	.word	0x0800108f
 8001060:	0800109f 	.word	0x0800109f
 8001064:	080010af 	.word	0x080010af
 8001068:	080010bf 	.word	0x080010bf
 800106c:	080010d3 	.word	0x080010d3
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	4618      	mov	r0, r3
 8001078:	f008 fa30 	bl	80094dc <strncpy>
      break;
 800107c:	e037      	b.n	80010ee <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3320      	adds	r3, #32
 8001082:	2218      	movs	r2, #24
 8001084:	68f9      	ldr	r1, [r7, #12]
 8001086:	4618      	mov	r0, r3
 8001088:	f008 fa28 	bl	80094dc <strncpy>
      break;
 800108c:	e02f      	b.n	80010ee <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3338      	adds	r3, #56	; 0x38
 8001092:	2210      	movs	r2, #16
 8001094:	68f9      	ldr	r1, [r7, #12]
 8001096:	4618      	mov	r0, r3
 8001098:	f008 fa20 	bl	80094dc <strncpy>
      break;
 800109c:	e027      	b.n	80010ee <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3348      	adds	r3, #72	; 0x48
 80010a2:	2210      	movs	r2, #16
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fa18 	bl	80094dc <strncpy>
      break;
 80010ac:	e01f      	b.n	80010ee <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3358      	adds	r3, #88	; 0x58
 80010b2:	2210      	movs	r2, #16
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 fa10 	bl	80094dc <strncpy>
      break;
 80010bc:	e017      	b.n	80010ee <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80010be:	2100      	movs	r1, #0
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff ff3f 	bl	8000f44 <ParseNumber>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80010d0:	e00d      	b.n	80010ee <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <AT_ParseInfo+0xe8>)
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f008 fa15 	bl	8009504 <strtok>
 80010da:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3368      	adds	r3, #104	; 0x68
 80010e0:	2220      	movs	r2, #32
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f008 f9f9 	bl	80094dc <strncpy>
      break;
 80010ea:	e000      	b.n	80010ee <AT_ParseInfo+0xca>

    default: break;
 80010ec:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80010ee:	4906      	ldr	r1, [pc, #24]	; (8001108 <AT_ParseInfo+0xe4>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f008 fa07 	bl	8009504 <strtok>
 80010f6:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1a1      	bne.n	8001042 <AT_ParseInfo+0x1e>
  }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	0800c5c8 	.word	0x0800c5c8
 800110c:	0800c5cc 	.word	0x0800c5cc

08001110 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3302      	adds	r3, #2
 8001122:	4952      	ldr	r1, [pc, #328]	; (800126c <AT_ParseConnSettings+0x15c>)
 8001124:	4618      	mov	r0, r3
 8001126:	f008 f9ed 	bl	8009504 <strtok>
 800112a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800112c:	e095      	b.n	800125a <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	73fa      	strb	r2, [r7, #15]
 8001134:	2b0b      	cmp	r3, #11
 8001136:	d87f      	bhi.n	8001238 <AT_ParseConnSettings+0x128>
 8001138:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <AT_ParseConnSettings+0x30>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	08001171 	.word	0x08001171
 8001144:	0800117f 	.word	0x0800117f
 8001148:	0800118f 	.word	0x0800118f
 800114c:	080011a3 	.word	0x080011a3
 8001150:	080011b7 	.word	0x080011b7
 8001154:	080011cb 	.word	0x080011cb
 8001158:	080011d9 	.word	0x080011d9
 800115c:	080011e7 	.word	0x080011e7
 8001160:	080011f5 	.word	0x080011f5
 8001164:	08001203 	.word	0x08001203
 8001168:	08001211 	.word	0x08001211
 800116c:	08001225 	.word	0x08001225
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2221      	movs	r2, #33	; 0x21
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	4618      	mov	r0, r3
 8001178:	f008 f9b0 	bl	80094dc <strncpy>
      break;
 800117c:	e05d      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3321      	adds	r3, #33	; 0x21
 8001182:	2221      	movs	r2, #33	; 0x21
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	4618      	mov	r0, r3
 8001188:	f008 f9a8 	bl	80094dc <strncpy>
      break;
 800118c:	e055      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800118e:	2100      	movs	r1, #0
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff fed7 	bl	8000f44 <ParseNumber>
 8001196:	4603      	mov	r3, r0
 8001198:	b2da      	uxtb	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80011a0:	e04b      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80011a2:	2100      	movs	r1, #0
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f7ff fecd 	bl	8000f44 <ParseNumber>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80011b4:	e041      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80011b6:	2100      	movs	r1, #0
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f7ff fec3 	bl	8000f44 <ParseNumber>
 80011be:	4603      	mov	r3, r0
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80011c8:	e037      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3348      	adds	r3, #72	; 0x48
 80011ce:	4619      	mov	r1, r3
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f7ff fefb 	bl	8000fcc <ParseIP>
      break;
 80011d6:	e030      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	334c      	adds	r3, #76	; 0x4c
 80011dc:	4619      	mov	r1, r3
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff fef4 	bl	8000fcc <ParseIP>
      break;
 80011e4:	e029      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3350      	adds	r3, #80	; 0x50
 80011ea:	4619      	mov	r1, r3
 80011ec:	68b8      	ldr	r0, [r7, #8]
 80011ee:	f7ff feed 	bl	8000fcc <ParseIP>
      break;
 80011f2:	e022      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3354      	adds	r3, #84	; 0x54
 80011f8:	4619      	mov	r1, r3
 80011fa:	68b8      	ldr	r0, [r7, #8]
 80011fc:	f7ff fee6 	bl	8000fcc <ParseIP>
      break;
 8001200:	e01b      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3358      	adds	r3, #88	; 0x58
 8001206:	4619      	mov	r1, r3
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f7ff fedf 	bl	8000fcc <ParseIP>
      break;
 800120e:	e014      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001210:	2100      	movs	r1, #0
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	f7ff fe96 	bl	8000f44 <ParseNumber>
 8001218:	4603      	mov	r3, r0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001222:	e00a      	b.n	800123a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001224:	2100      	movs	r1, #0
 8001226:	68b8      	ldr	r0, [r7, #8]
 8001228:	f7ff fe8c 	bl	8000f44 <ParseNumber>
 800122c:	4603      	mov	r3, r0
 800122e:	b2da      	uxtb	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001236:	e000      	b.n	800123a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001238:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800123a:	490c      	ldr	r1, [pc, #48]	; (800126c <AT_ParseConnSettings+0x15c>)
 800123c:	2000      	movs	r0, #0
 800123e:	f008 f961 	bl	8009504 <strtok>
 8001242:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <AT_ParseConnSettings+0x14a>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3b01      	subs	r3, #1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b2c      	cmp	r3, #44	; 0x2c
 8001252:	d102      	bne.n	800125a <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	3301      	adds	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f47f af66 	bne.w	800112e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0800c5c8 	.word	0x0800c5c8

08001270 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f7fe fff0 	bl	8000270 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	b299      	uxth	r1, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800129a:	461a      	mov	r2, r3
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	47a0      	blx	r4
 80012a0:	4603      	mov	r3, r0
 80012a2:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dd33      	ble.n	8001312 <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80012b6:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	4798      	blx	r3
 80012be:	4603      	mov	r3, r0
 80012c0:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 80012c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dd1c      	ble.n	8001304 <AT_ExecuteCommand+0x94>
 80012ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ce:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012d2:	da17      	bge.n	8001304 <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 80012d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80012e0:	490e      	ldr	r1, [pc, #56]	; (800131c <AT_ExecuteCommand+0xac>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f008 f96a 	bl	80095bc <strstr>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e010      	b.n	8001314 <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80012f2:	490b      	ldr	r1, [pc, #44]	; (8001320 <AT_ExecuteCommand+0xb0>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f008 f961 	bl	80095bc <strstr>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001300:	2305      	movs	r3, #5
 8001302:	e007      	b.n	8001314 <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8001304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001308:	f113 0f04 	cmn.w	r3, #4
 800130c:	d101      	bne.n	8001312 <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800130e:	2306      	movs	r3, #6
 8001310:	e000      	b.n	8001314 <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 8001312:	2304      	movs	r3, #4
}
 8001314:	4618      	mov	r0, r3
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	0800c5d0 	.word	0x0800c5d0
 8001320:	0800c5dc 	.word	0x0800c5dc

08001324 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f7fe ff96 	bl	8000270 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001348:	8a7b      	ldrh	r3, [r7, #18]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <AT_RequestSendData+0x32>
 8001352:	2302      	movs	r3, #2
 8001354:	e053      	b.n	80013fe <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001362:	8a79      	ldrh	r1, [r7, #18]
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	4798      	blx	r3
 8001368:	4603      	mov	r3, r0
 800136a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800136c:	8a3a      	ldrh	r2, [r7, #16]
 800136e:	8a7b      	ldrh	r3, [r7, #18]
 8001370:	429a      	cmp	r2, r3
 8001372:	d143      	bne.n	80013fc <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001380:	8879      	ldrh	r1, [r7, #2]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
 8001386:	4603      	mov	r3, r0
 8001388:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800138a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	429a      	cmp	r2, r3
 8001392:	d131      	bne.n	80013f8 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80013a0:	2100      	movs	r1, #0
 80013a2:	6a38      	ldr	r0, [r7, #32]
 80013a4:	4798      	blx	r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80013aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd19      	ble.n	80013e6 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 80013b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b6:	6a3a      	ldr	r2, [r7, #32]
 80013b8:	4413      	add	r3, r2
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80013be:	4912      	ldr	r1, [pc, #72]	; (8001408 <AT_RequestSendData+0xe4>)
 80013c0:	6a38      	ldr	r0, [r7, #32]
 80013c2:	f008 f8fb 	bl	80095bc <strstr>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e016      	b.n	80013fe <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <AT_RequestSendData+0xe8>)
 80013d2:	6a38      	ldr	r0, [r7, #32]
 80013d4:	f008 f8f2 	bl	80095bc <strstr>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013de:	2305      	movs	r3, #5
 80013e0:	e00d      	b.n	80013fe <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80013e2:	2302      	movs	r3, #2
 80013e4:	e00b      	b.n	80013fe <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80013e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ea:	f113 0f04 	cmn.w	r3, #4
 80013ee:	d101      	bne.n	80013f4 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80013f0:	2306      	movs	r3, #6
 80013f2:	e004      	b.n	80013fe <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80013f4:	2302      	movs	r3, #2
 80013f6:	e002      	b.n	80013fe <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80013f8:	2302      	movs	r3, #2
 80013fa:	e000      	b.n	80013fe <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80013fc:	2304      	movs	r3, #4
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	0800c5d0 	.word	0x0800c5d0
 800140c:	0800c5dc 	.word	0x0800c5dc

08001410 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001418:	2302      	movs	r3, #2
 800141a:	73fb      	strb	r3, [r7, #15]
  aos_mutex_new(&es_wifi_mutex);
#endif

  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001422:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800142c:	2000      	movs	r0, #0
 800142e:	4798      	blx	r3
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143c:	461a      	mov	r2, r3
 800143e:	490a      	ldr	r1, [pc, #40]	; (8001468 <ES_WIFI_Init+0x58>)
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff15 	bl	8001270 <AT_ExecuteCommand>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fde3 	bl	8001024 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800c5ec 	.word	0x0800c5ec

0800146c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <ES_WIFI_RegisterBusIO+0x2c>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <ES_WIFI_RegisterBusIO+0x2c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <ES_WIFI_RegisterBusIO+0x2c>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <ES_WIFI_RegisterBusIO+0x2c>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001498:	2302      	movs	r3, #2
 800149a:	e014      	b.n	80014c6 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	4932      	ldr	r1, [pc, #200]	; (80015b4 <ES_WIFI_Connect+0xe0>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f007 fef5 	bl	80092dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014fe:	461a      	mov	r2, r3
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff feb5 	bl	8001270 <AT_ExecuteCommand>
 8001506:	4603      	mov	r3, r0
 8001508:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d14b      	bne.n	80015a8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4927      	ldr	r1, [pc, #156]	; (80015b8 <ES_WIFI_Connect+0xe4>)
 800151a:	4618      	mov	r0, r3
 800151c:	f007 fede 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800152c:	461a      	mov	r2, r3
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff fe9e 	bl	8001270 <AT_ExecuteCommand>
 8001534:	4603      	mov	r3, r0
 8001536:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d134      	bne.n	80015a8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	491b      	ldr	r1, [pc, #108]	; (80015bc <ES_WIFI_Connect+0xe8>)
 8001550:	4618      	mov	r0, r3
 8001552:	f007 fec3 	bl	80092dc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001562:	461a      	mov	r2, r3
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fe83 	bl	8001270 <AT_ExecuteCommand>
 800156a:	4603      	mov	r3, r0
 800156c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d119      	bne.n	80015a8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800157a:	4911      	ldr	r1, [pc, #68]	; (80015c0 <ES_WIFI_Connect+0xec>)
 800157c:	4618      	mov	r0, r3
 800157e:	f007 fead 	bl	80092dc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800158e:	461a      	mov	r2, r3
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fe6d 	bl	8001270 <AT_ExecuteCommand>
 8001596:	4603      	mov	r3, r0
 8001598:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800c5f8 	.word	0x0800c5f8
 80015b8:	0800c600 	.word	0x0800c600
 80015bc:	0800c608 	.word	0x0800c608
 80015c0:	0800c610 	.word	0x0800c610

080015c4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015d2:	4910      	ldr	r1, [pc, #64]	; (8001614 <ES_WIFI_GetNetworkSettings+0x50>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f007 fe81 	bl	80092dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015e6:	461a      	mov	r2, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fe41 	bl	8001270 <AT_ExecuteCommand>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d108      	bne.n	800160a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	338d      	adds	r3, #141	; 0x8d
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f7ff fd83 	bl	8001110 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0800c61c 	.word	0x0800c61c

08001618 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af02      	add	r7, sp, #8
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	461a      	mov	r2, r3
 8001632:	4951      	ldr	r1, [pc, #324]	; (8001778 <ES_WIFI_StartClientConnection+0x160>)
 8001634:	f007 fe52 	bl	80092dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001644:	461a      	mov	r2, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fe12 	bl	8001270 <AT_ExecuteCommand>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d114      	bne.n	8001680 <ES_WIFI_StartClientConnection+0x68>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4946      	ldr	r1, [pc, #280]	; (800177c <ES_WIFI_StartClientConnection+0x164>)
 8001664:	f007 fe3a 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001674:	461a      	mov	r2, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fdfa 	bl	8001270 <AT_ExecuteCommand>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d118      	bne.n	80016b8 <ES_WIFI_StartClientConnection+0xa0>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	889b      	ldrh	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d014      	beq.n	80016b8 <ES_WIFI_StartClientConnection+0xa0>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	889b      	ldrh	r3, [r3, #4]
 8001698:	461a      	mov	r2, r3
 800169a:	4939      	ldr	r1, [pc, #228]	; (8001780 <ES_WIFI_StartClientConnection+0x168>)
 800169c:	f007 fe1e 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ac:	461a      	mov	r2, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fdde 	bl	8001270 <AT_ExecuteCommand>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <ES_WIFI_StartClientConnection+0xd8>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	885b      	ldrh	r3, [r3, #2]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d014      	beq.n	80016f0 <ES_WIFI_StartClientConnection+0xd8>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	885b      	ldrh	r3, [r3, #2]
 80016d0:	461a      	mov	r2, r3
 80016d2:	492c      	ldr	r1, [pc, #176]	; (8001784 <ES_WIFI_StartClientConnection+0x16c>)
 80016d4:	f007 fe02 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e4:	461a      	mov	r2, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fdc2 	bl	8001270 <AT_ExecuteCommand>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d124      	bne.n	8001740 <ES_WIFI_StartClientConnection+0x128>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d120      	bne.n	8001740 <ES_WIFI_StartClientConnection+0x128>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	799b      	ldrb	r3, [r3, #6]
 8001708:	4619      	mov	r1, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	79db      	ldrb	r3, [r3, #7]
 800170e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001714:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	9200      	str	r2, [sp, #0]
 800171e:	4623      	mov	r3, r4
 8001720:	460a      	mov	r2, r1
 8001722:	4919      	ldr	r1, [pc, #100]	; (8001788 <ES_WIFI_StartClientConnection+0x170>)
 8001724:	f007 fdda 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001734:	461a      	mov	r2, r3
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fd9a 	bl	8001270 <AT_ExecuteCommand>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d112      	bne.n	800176c <ES_WIFI_StartClientConnection+0x154>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <ES_WIFI_StartClientConnection+0x174>)
 800174e:	4618      	mov	r0, r3
 8001750:	f007 fdc4 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001760:	461a      	mov	r2, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd84 	bl	8001270 <AT_ExecuteCommand>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
  return ret;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	0800c6f0 	.word	0x0800c6f0
 800177c:	0800c6f8 	.word	0x0800c6f8
 8001780:	0800c700 	.word	0x0800c700
 8001784:	0800c708 	.word	0x0800c708
 8001788:	0800c710 	.word	0x0800c710
 800178c:	0800c720 	.word	0x0800c720

08001790 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	460b      	mov	r3, r1
 800179e:	72fb      	strb	r3, [r7, #11]
 80017a0:	4613      	mov	r3, r2
 80017a2:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80017a4:	2302      	movs	r3, #2
 80017a6:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80017a8:	893b      	ldrh	r3, [r7, #8]
 80017aa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80017ae:	d302      	bcc.n	80017b6 <ES_WIFI_SendData+0x26>
 80017b0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80017b4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	893a      	ldrh	r2, [r7, #8]
 80017ba:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017c2:	7afa      	ldrb	r2, [r7, #11]
 80017c4:	4942      	ldr	r1, [pc, #264]	; (80018d0 <ES_WIFI_SendData+0x140>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 fd88 	bl	80092dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d8:	461a      	mov	r2, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fd48 	bl	8001270 <AT_ExecuteCommand>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d15e      	bne.n	80018a8 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	4938      	ldr	r1, [pc, #224]	; (80018d4 <ES_WIFI_SendData+0x144>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 fd71 	bl	80092dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001806:	461a      	mov	r2, r3
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff fd31 	bl	8001270 <AT_ExecuteCommand>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d13d      	bne.n	8001894 <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800181e:	893a      	ldrh	r2, [r7, #8]
 8001820:	492d      	ldr	r1, [pc, #180]	; (80018d8 <ES_WIFI_SendData+0x148>)
 8001822:	4618      	mov	r0, r3
 8001824:	f007 fd5a 	bl	80092dc <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001834:	893a      	ldrh	r2, [r7, #8]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff fd71 	bl	8001324 <AT_RequestSendData>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d119      	bne.n	8001880 <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001852:	4922      	ldr	r1, [pc, #136]	; (80018dc <ES_WIFI_SendData+0x14c>)
 8001854:	4618      	mov	r0, r3
 8001856:	f007 feb1 	bl	80095bc <strstr>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d02c      	beq.n	80018ba <ES_WIFI_SendData+0x12a>
        {
          _DEBUG_("SEnd Data detect error %s\n", (char *)Obj->CmdData);
 8001860:	f240 722c 	movw	r2, #1836	; 0x72c
 8001864:	491e      	ldr	r1, [pc, #120]	; (80018e0 <ES_WIFI_SendData+0x150>)
 8001866:	481f      	ldr	r0, [pc, #124]	; (80018e4 <ES_WIFI_SendData+0x154>)
 8001868:	f007 fcca 	bl	8009200 <iprintf>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001872:	4619      	mov	r1, r3
 8001874:	481c      	ldr	r0, [pc, #112]	; (80018e8 <ES_WIFI_SendData+0x158>)
 8001876:	f007 fcc3 	bl	8009200 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800187a:	2302      	movs	r3, #2
 800187c:	75fb      	strb	r3, [r7, #23]
 800187e:	e01c      	b.n	80018ba <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        _DEBUG_("Send Data command failed\n");
 8001880:	f240 7232 	movw	r2, #1842	; 0x732
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <ES_WIFI_SendData+0x150>)
 8001886:	4817      	ldr	r0, [pc, #92]	; (80018e4 <ES_WIFI_SendData+0x154>)
 8001888:	f007 fcba 	bl	8009200 <iprintf>
 800188c:	4817      	ldr	r0, [pc, #92]	; (80018ec <ES_WIFI_SendData+0x15c>)
 800188e:	f007 fd1d 	bl	80092cc <puts>
 8001892:	e012      	b.n	80018ba <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      _DEBUG_("S2 command failed\n");
 8001894:	f240 7237 	movw	r2, #1847	; 0x737
 8001898:	4911      	ldr	r1, [pc, #68]	; (80018e0 <ES_WIFI_SendData+0x150>)
 800189a:	4812      	ldr	r0, [pc, #72]	; (80018e4 <ES_WIFI_SendData+0x154>)
 800189c:	f007 fcb0 	bl	8009200 <iprintf>
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <ES_WIFI_SendData+0x160>)
 80018a2:	f007 fd13 	bl	80092cc <puts>
 80018a6:	e008      	b.n	80018ba <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   _DEBUG_("P0 command failed\n");
 80018a8:	f240 723c 	movw	r2, #1852	; 0x73c
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <ES_WIFI_SendData+0x150>)
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <ES_WIFI_SendData+0x154>)
 80018b0:	f007 fca6 	bl	8009200 <iprintf>
 80018b4:	480f      	ldr	r0, [pc, #60]	; (80018f4 <ES_WIFI_SendData+0x164>)
 80018b6:	f007 fd09 	bl	80092cc <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d102      	bne.n	80018c6 <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2200      	movs	r2, #0
 80018c4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800c6f0 	.word	0x0800c6f0
 80018d4:	0800c77c 	.word	0x0800c77c
 80018d8:	0800c784 	.word	0x0800c784
 80018dc:	0800c790 	.word	0x0800c790
 80018e0:	0800c798 	.word	0x0800c798
 80018e4:	0800c7b0 	.word	0x0800c7b0
 80018e8:	0800c7b8 	.word	0x0800c7b8
 80018ec:	0800c7d4 	.word	0x0800c7d4
 80018f0:	0800c7f0 	.word	0x0800c7f0
 80018f4:	0800c804 	.word	0x0800c804

080018f8 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	4a55      	ldr	r2, [pc, #340]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	6593      	str	r3, [r2, #88]	; 0x58
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001930:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	4a49      	ldr	r2, [pc, #292]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001948:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a43      	ldr	r2, [pc, #268]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <SPI_WIFI_MspInit+0x164>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001966:	483e      	ldr	r0, [pc, #248]	; (8001a60 <SPI_WIFI_MspInit+0x168>)
 8001968:	f004 f8e8 	bl	8005b3c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800196c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4836      	ldr	r0, [pc, #216]	; (8001a60 <SPI_WIFI_MspInit+0x168>)
 8001986:	f003 fe23 	bl	80055d0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800198a:	2302      	movs	r3, #2
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800198e:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <SPI_WIFI_MspInit+0x16c>)
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4831      	ldr	r0, [pc, #196]	; (8001a68 <SPI_WIFI_MspInit+0x170>)
 80019a2:	f003 fe15 	bl	80055d0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80019a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4829      	ldr	r0, [pc, #164]	; (8001a68 <SPI_WIFI_MspInit+0x170>)
 80019c4:	f003 fe04 	bl	80055d0 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 80019c8:	2201      	movs	r2, #1
 80019ca:	2101      	movs	r1, #1
 80019cc:	4826      	ldr	r0, [pc, #152]	; (8001a68 <SPI_WIFI_MspInit+0x170>)
 80019ce:	f004 f8b5 	bl	8005b3c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80019de:	2301      	movs	r3, #1
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	481f      	ldr	r0, [pc, #124]	; (8001a68 <SPI_WIFI_MspInit+0x170>)
 80019ea:	f003 fdf1 	bl	80055d0 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80019ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a00:	2306      	movs	r3, #6
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4818      	ldr	r0, [pc, #96]	; (8001a6c <SPI_WIFI_MspInit+0x174>)
 8001a0c:	f003 fde0 	bl	80055d0 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a22:	2306      	movs	r3, #6
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480f      	ldr	r0, [pc, #60]	; (8001a6c <SPI_WIFI_MspInit+0x174>)
 8001a2e:	f003 fdcf 	bl	80055d0 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a44:	2306      	movs	r3, #6
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <SPI_WIFI_MspInit+0x174>)
 8001a50:	f003 fdbe 	bl	80055d0 <HAL_GPIO_Init>
}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	10110000 	.word	0x10110000
 8001a68:	48001000 	.word	0x48001000
 8001a6c:	48000800 	.word	0x48000800

08001a70 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d13a      	bne.n	8001afa <SPI_WIFI_Init+0x8a>
  {
    hspi.Instance               = SPI3;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001a86:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <SPI_WIFI_Init+0xa4>)
 8001a88:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001a8a:	4821      	ldr	r0, [pc, #132]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001a8c:	f7ff ff34 	bl	80018f8 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001a92:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a96:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001aa0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001aa4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab8:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001abc:	2210      	movs	r2, #16
 8001abe:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <SPI_WIFI_Init+0xa0>)
 8001ada:	f004 fe91 	bl	8006800 <HAL_SPI_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	e00d      	b.n	8001b06 <SPI_WIFI_Init+0x96>
    }

	 // Enable Interrupt for Data Ready pin , GPIO_PIN1
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8001aea:	2200      	movs	r2, #0
 8001aec:	210f      	movs	r1, #15
 8001aee:	2007      	movs	r0, #7
 8001af0:	f003 fcf7 	bl	80054e2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001af4:	2007      	movs	r0, #7
 8001af6:	f003 fd10 	bl	800551a <HAL_NVIC_EnableIRQ>
    
    // create Mutex and Semaphore
	RTOS_CREATE_SEM_MUTEX();
  }
  
  rc= SPI_WIFI_ResetModule();
 8001afa:	f000 f80d 	bl	8001b18 <SPI_WIFI_ResetModule>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002dc 	.word	0x200002dc
 8001b14:	40003c00 	.word	0x40003c00

08001b18 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001b1e:	f003 fbd7 	bl	80052d0 <HAL_GetTick>
 8001b22:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2e:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <SPI_WIFI_ResetModule+0xd8>)
 8001b30:	f004 f804 	bl	8005b3c <HAL_GPIO_WritePin>
 8001b34:	200a      	movs	r0, #10
 8001b36:	f003 fbd7 	bl	80052e8 <HAL_Delay>
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b40:	482b      	ldr	r0, [pc, #172]	; (8001bf0 <SPI_WIFI_ResetModule+0xd8>)
 8001b42:	f003 fffb 	bl	8005b3c <HAL_GPIO_WritePin>
 8001b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b4a:	f003 fbcd 	bl	80052e8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <SPI_WIFI_ResetModule+0xd8>)
 8001b54:	f003 fff2 	bl	8005b3c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001b58:	200f      	movs	r0, #15
 8001b5a:	f000 f977 	bl	8001e4c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001b5e:	e020      	b.n	8001ba2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	463a      	mov	r2, r7
 8001b64:	18d1      	adds	r1, r2, r3
 8001b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <SPI_WIFI_ResetModule+0xdc>)
 8001b6e:	f005 f85f 	bl	8006c30 <HAL_SPI_Receive>
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3302      	adds	r3, #2
 8001b7a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001b7c:	f003 fba8 	bl	80052d0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d202      	bcs.n	8001b92 <SPI_WIFI_ResetModule+0x7a>
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 8001b92:	2201      	movs	r2, #1
 8001b94:	2101      	movs	r1, #1
 8001b96:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <SPI_WIFI_ResetModule+0xd8>)
 8001b98:	f003 ffd0 	bl	8005b3c <HAL_GPIO_WritePin>
      return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	e021      	b.n	8001be6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <SPI_WIFI_ResetModule+0xd8>)
 8001ba6:	f003 ffb1 	bl	8005b0c <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d0d7      	beq.n	8001b60 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <SPI_WIFI_ResetModule+0xd8>)
 8001bb6:	f003 ffc1 	bl	8005b3c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001bba:	783b      	ldrb	r3, [r7, #0]
 8001bbc:	2b15      	cmp	r3, #21
 8001bbe:	d10e      	bne.n	8001bde <SPI_WIFI_ResetModule+0xc6>
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b15      	cmp	r3, #21
 8001bc4:	d10b      	bne.n	8001bde <SPI_WIFI_ResetModule+0xc6>
 8001bc6:	78bb      	ldrb	r3, [r7, #2]
 8001bc8:	2b0d      	cmp	r3, #13
 8001bca:	d108      	bne.n	8001bde <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001bce:	2b0a      	cmp	r3, #10
 8001bd0:	d105      	bne.n	8001bde <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001bd2:	793b      	ldrb	r3, [r7, #4]
 8001bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd6:	d102      	bne.n	8001bde <SPI_WIFI_ResetModule+0xc6>
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d002      	beq.n	8001be4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e000      	b.n	8001be6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	48001000 	.word	0x48001000
 8001bf4:	200002dc 	.word	0x200002dc

08001bf8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <SPI_WIFI_DeInit+0x10>)
 8001bfe:	f004 fe89 	bl	8006914 <HAL_SPI_DeInit>
  RTOS_FREE_SEM_MUTEX();
  return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200002dc 	.word	0x200002dc

08001c0c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001c14:	f003 fb5c 	bl	80052d0 <HAL_GetTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001c1c:	e00a      	b.n	8001c34 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c1e:	f003 fb57 	bl	80052d0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad2      	subs	r2, r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d902      	bls.n	8001c34 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e007      	b.n	8001c44 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001c34:	2102      	movs	r1, #2
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <wait_cmddata_rdy_high+0x40>)
 8001c38:	f003 ff68 	bl	8005b0c <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d1ed      	bne.n	8001c1e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	48001000 	.word	0x48001000

08001c50 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001c58:	f003 fb3a 	bl	80052d0 <HAL_GetTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001c60:	e00a      	b.n	8001c78 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c62:	f003 fb35 	bl	80052d0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad2      	subs	r2, r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d902      	bls.n	8001c78 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e004      	b.n	8001c82 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <wait_cmddata_rdy_rising_event+0x3c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d0f0      	beq.n	8001c62 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 8001c80:	2300      	movs	r3, #0
#endif
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000340 	.word	0x20000340

08001c90 <SPI_WIFI_ReceiveData>:
}
*/


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4831      	ldr	r0, [pc, #196]	; (8001d6c <SPI_WIFI_ReceiveData+0xdc>)
 8001ca8:	f003 ff48 	bl	8005b3c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 f8cd 	bl	8001e4c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffcb 	bl	8001c50 <wait_cmddata_rdy_rising_event>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da02      	bge.n	8001cc6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001cc0:	f06f 0302 	mvn.w	r3, #2
 8001cc4:	e04e      	b.n	8001d64 <SPI_WIFI_ReceiveData+0xd4>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4828      	ldr	r0, [pc, #160]	; (8001d6c <SPI_WIFI_ReceiveData+0xdc>)
 8001ccc:	f003 ff36 	bl	8005b3c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001cd0:	200f      	movs	r0, #15
 8001cd2:	f000 f8bb 	bl	8001e4c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001cd6:	e037      	b.n	8001d48 <SPI_WIFI_ReceiveData+0xb8>
  {
    if((length < len) || (!len))
 8001cd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	db02      	blt.n	8001ce8 <SPI_WIFI_ReceiveData+0x58>
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d136      	bne.n	8001d56 <SPI_WIFI_ReceiveData+0xc6>
    {
      //spi_rx_event=1;
      if (HAL_SPI_Receive(&hspi, tmp, 1, 0xFFFFFFFF) != HAL_OK) {
 8001ce8:	f107 0114 	add.w	r1, r7, #20
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <SPI_WIFI_ReceiveData+0xe0>)
 8001cf4:	f004 ff9c 	bl	8006c30 <HAL_SPI_Receive>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <SPI_WIFI_ReceiveData+0x7e>
        WIFI_DISABLE_NSS();
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2101      	movs	r1, #1
 8001d02:	481a      	ldr	r0, [pc, #104]	; (8001d6c <SPI_WIFI_ReceiveData+0xdc>)
 8001d04:	f003 ff1a 	bl	8005b3c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	e02a      	b.n	8001d64 <SPI_WIFI_ReceiveData+0xd4>
      }
  
      //wait_spi_rx_event(timeout);

      pData[0] = tmp[0];
 8001d0e:	7d3a      	ldrb	r2, [r7, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3301      	adds	r3, #1
 8001d18:	7d7a      	ldrb	r2, [r7, #21]
 8001d1a:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001d1c:	8afb      	ldrh	r3, [r7, #22]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3302      	adds	r3, #2
 8001d28:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001d2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d2e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d32:	db09      	blt.n	8001d48 <SPI_WIFI_ReceiveData+0xb8>
        WIFI_DISABLE_NSS();
 8001d34:	2201      	movs	r2, #1
 8001d36:	2101      	movs	r1, #1
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <SPI_WIFI_ReceiveData+0xdc>)
 8001d3a:	f003 feff 	bl	8005b3c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 8001d3e:	f7ff feeb 	bl	8001b18 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d42:	f06f 0303 	mvn.w	r3, #3
 8001d46:	e00d      	b.n	8001d64 <SPI_WIFI_ReceiveData+0xd4>
  while (WIFI_IS_CMDDATA_READY())
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4808      	ldr	r0, [pc, #32]	; (8001d6c <SPI_WIFI_ReceiveData+0xdc>)
 8001d4c:	f003 fede 	bl	8005b0c <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d0c0      	beq.n	8001cd8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 8001d56:	2201      	movs	r2, #1
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <SPI_WIFI_ReceiveData+0xdc>)
 8001d5c:	f003 feee 	bl	8005b3c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	200002dc 	.word	0x200002dc

08001d74 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff41 	bl	8001c0c <wait_cmddata_rdy_high>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da02      	bge.n	8001d96 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	e043      	b.n	8001e1e <SPI_WIFI_SendData+0xaa>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <SPI_WIFI_SendData+0xb4>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4822      	ldr	r0, [pc, #136]	; (8001e2c <SPI_WIFI_SendData+0xb8>)
 8001da2:	f003 fecb 	bl	8005b3c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f850 	bl	8001e4c <SPI_WIFI_DelayUs>
  if (len > 1)
 8001dac:	897b      	ldrh	r3, [r7, #10]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d913      	bls.n	8001dda <SPI_WIFI_SendData+0x66>
  {
    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, 0xFFFFFFFF) != HAL_OK)
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	481c      	ldr	r0, [pc, #112]	; (8001e30 <SPI_WIFI_SendData+0xbc>)
 8001dc0:	f004 fdd0 	bl	8006964 <HAL_SPI_Transmit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <SPI_WIFI_SendData+0x66>
    {
      WIFI_DISABLE_NSS();
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4817      	ldr	r0, [pc, #92]	; (8001e2c <SPI_WIFI_SendData+0xb8>)
 8001dd0:	f003 feb4 	bl	8005b3c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd8:	e021      	b.n	8001e1e <SPI_WIFI_SendData+0xaa>
    }
    //wait_spi_tx_event(timeout);
  }
  
  if ( len & 1)
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01a      	beq.n	8001e1a <SPI_WIFI_SendData+0xa6>
  {
    Padding[0] = pdata[len-1];
 8001de4:	897b      	ldrh	r3, [r7, #10]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001df0:	230a      	movs	r3, #10
 8001df2:	757b      	strb	r3, [r7, #21]

    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, Padding, 1, 0xFFFFFFFF) != HAL_OK)
 8001df4:	f107 0114 	add.w	r1, r7, #20
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	480c      	ldr	r0, [pc, #48]	; (8001e30 <SPI_WIFI_SendData+0xbc>)
 8001e00:	f004 fdb0 	bl	8006964 <HAL_SPI_Transmit>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <SPI_WIFI_SendData+0xa6>
    {
      WIFI_DISABLE_NSS();
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <SPI_WIFI_SendData+0xb8>)
 8001e10:	f003 fe94 	bl	8005b3c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e001      	b.n	8001e1e <SPI_WIFI_SendData+0xaa>
    }  
    //wait_spi_tx_event(timeout);
    
  }
  return len;
 8001e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000340 	.word	0x20000340
 8001e2c:	48001000 	.word	0x48001000
 8001e30:	200002dc 	.word	0x200002dc

08001e34 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f003 fa53 	bl	80052e8 <HAL_Delay>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t freq = (SystemCoreClock/1000000L);
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <SPI_WIFI_DelayUs+0x8c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a20      	ldr	r2, [pc, #128]	; (8001edc <SPI_WIFI_DelayUs+0x90>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t ctrl;
  uint32_t cycle;
  
  n=n*freq;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	607b      	str	r3, [r7, #4]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <SPI_WIFI_DelayUs+0x94>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <SPI_WIFI_DelayUs+0x94>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	60d3      	str	r3, [r2, #12]
  ctrl = DWT->CTRL;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	613b      	str	r3, [r7, #16]
  DWT->CTRL |= 1 ; // enable  counter
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]
  cycle = DWT->CYCCNT;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	60fb      	str	r3, [r7, #12]
  n += cycle;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4413      	add	r3, r2
 8001e96:	607b      	str	r3, [r7, #4]
  if (n < cycle) 
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d205      	bcs.n	8001eac <SPI_WIFI_DelayUs+0x60>
  {
	 // wait for rewrap
	 while(n < DWT->CYCCNT);
 8001ea0:	bf00      	nop
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3fa      	bcc.n	8001ea2 <SPI_WIFI_DelayUs+0x56>
  }
  
  while(DWT->CYCCNT < n);
 8001eac:	bf00      	nop
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8fa      	bhi.n	8001eae <SPI_WIFI_DelayUs+0x62>
  
  DWT->CTRL &= ~(ctrl & 1 ) ; // restore counter mode
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <SPI_WIFI_DelayUs+0x98>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
  return;
 8001eca:	bf00      	nop
}
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	e000edf0 	.word	0xe000edf0
 8001ee4:	e0001000 	.word	0xe0001000

08001ee8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SPI_WIFI_ISR+0x1c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <SPI_WIFI_ISR+0x1c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
   }
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	20000340 	.word	0x20000340

08001f08 <read_gyro>:


/*Routines and functions that will be run when drone is up*/
/*Read Gyroscope*/
float read_gyro()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
	float gyro_data;
	float gyro_raw_data[3];
	BSP_GYRO_GetXYZ(gyro_raw_data);
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fb21 	bl	8004558 <BSP_GYRO_GetXYZ>
	gyro_data = sqrt( (float)gyro_raw_data[0]/(1000.0f)*(float)gyro_raw_data[0]/(1000.0f) + (float)gyro_raw_data[1]/(1000.0f)*(float)gyro_raw_data[1]/(1000.0f) + (float)gyro_raw_data[2]/(1000.0f)*(float)gyro_raw_data[2]/(1000.0f) );
 8001f16:	edd7 7a00 	vldr	s15, [r7]
 8001f1a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001fa8 <read_gyro+0xa0>
 8001f1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f22:	edd7 7a00 	vldr	s15, [r7]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001fa8 <read_gyro+0xa0>
 8001f2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f36:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001fa8 <read_gyro+0xa0>
 8001f3a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f46:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8001fa8 <read_gyro+0xa0>
 8001f4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f56:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001fa8 <read_gyro+0xa0>
 8001f5a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f66:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001fa8 <read_gyro+0xa0>
 8001f6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f72:	ee17 0a90 	vmov	r0, s15
 8001f76:	f7fe fae7 	bl	8000548 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	ec43 2b10 	vmov	d0, r2, r3
 8001f82:	f009 fbfd 	bl	800b780 <sqrt>
 8001f86:	ec53 2b10 	vmov	r2, r3, d0
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fe0b 	bl	8000ba8 <__aeabi_d2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	60fb      	str	r3, [r7, #12]
	//sprintf(debug, "gyro: %.2f\r\n", gyro_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return gyro_data;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	ee07 3a90 	vmov	s15, r3
}
 8001f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	447a0000 	.word	0x447a0000

08001fac <read_magneto>:


/*Read Magnetometer*/
float read_magneto()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
	float magneto_data;
	float magneto_raw_data[3];
	int16_t magneto_data_i16[3] = { 0 };
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	809a      	strh	r2, [r3, #4]
	BSP_MAGNETO_GetXYZ(magneto_data_i16);
 8001fba:	463b      	mov	r3, r7
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fb3d 	bl	800463c <BSP_MAGNETO_GetXYZ>
	magneto_raw_data[1] = (float)magneto_data_i16[1]/10000.0f;
 8001fc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fce:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001ff0 <read_magneto+0x44>
 8001fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd6:	edc7 7a03 	vstr	s15, [r7, #12]
	magneto_data = magneto_raw_data[1];
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	617b      	str	r3, [r7, #20]
	//sprintf(debug, "magneto: %.2f\r\n", magneto_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return magneto_data;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	ee07 3a90 	vmov	s15, r3
}
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	461c4000 	.word	0x461c4000

08001ff4 <read_pressure>:


/*Read Pressure*/
float read_pressure()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
	float pressure_data = BSP_PSENSOR_ReadPressure();
 8001ffa:	f002 fb57 	bl	80046ac <BSP_PSENSOR_ReadPressure>
 8001ffe:	ed87 0a01 	vstr	s0, [r7, #4]
	//sprintf(debug, "pressure: %.2f\r\n", pressure_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return pressure_data;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	ee07 3a90 	vmov	s15, r3
}
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	0000      	movs	r0, r0
 8002014:	0000      	movs	r0, r0
	...

08002018 <calc_height>:


/*Calculate Height*/
float calc_height(float pa)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	ed87 0a01 	vstr	s0, [r7, #4]
	float height_data = 44330.0f*(1.0-pow((pa/SEA_LEVEL_PRESSURE),(1.0f/5.255f)));
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fa90 	bl	8000548 <__aeabi_f2d>
 8002028:	a31e      	add	r3, pc, #120	; (adr r3, 80020a4 <calc_height+0x8c>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fc0d 	bl	800084c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	ec43 2b17 	vmov	d7, r2, r3
 800203a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002090 <calc_height+0x78>
 800203e:	eeb0 0a47 	vmov.f32	s0, s14
 8002042:	eef0 0a67 	vmov.f32	s1, s15
 8002046:	f009 fb2b 	bl	800b6a0 <pow>
 800204a:	ec53 2b10 	vmov	r2, r3, d0
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	4913      	ldr	r1, [pc, #76]	; (80020a0 <calc_height+0x88>)
 8002054:	f7fe f918 	bl	8000288 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a30d      	add	r3, pc, #52	; (adr r3, 8002098 <calc_height+0x80>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fac7 	bl	80005f8 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fd99 	bl	8000ba8 <__aeabi_d2f>
 8002076:	4603      	mov	r3, r0
 8002078:	60fb      	str	r3, [r7, #12]
	//sprintf(debug, "height: %.2f\r\n", height_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return height_data;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	ee07 3a90 	vmov	s15, r3
}
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	c0000000 	.word	0xc0000000
 8002094:	3fc85b95 	.word	0x3fc85b95
 8002098:	00000000 	.word	0x00000000
 800209c:	40e5a540 	.word	0x40e5a540
 80020a0:	3ff00000 	.word	0x3ff00000
 80020a4:	00000000 	.word	0x00000000
 80020a8:	408faa00 	.word	0x408faa00

080020ac <read_humidity>:


/*Read Humidity*/
float read_humidity()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	float humidity_data;
	humidity_data = BSP_HSENSOR_ReadHumidity();
 80020b2:	f002 fa89 	bl	80045c8 <BSP_HSENSOR_ReadHumidity>
 80020b6:	ed87 0a01 	vstr	s0, [r7, #4]
	//sprintf(debug, "humidity: %.2f\r\n", humidity_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return humidity_data;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	ee07 3a90 	vmov	s15, r3
}
 80020c0:	eeb0 0a67 	vmov.f32	s0, s15
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <read_temp>:


/*Read Temperature*/
float read_temp()
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
	float temp_data;
	temp_data = BSP_TSENSOR_ReadTemp();
 80020d0:	f002 fb16 	bl	8004700 <BSP_TSENSOR_ReadTemp>
 80020d4:	ed87 0a01 	vstr	s0, [r7, #4]
	//sprintf(tele_message, "temp: %.2f\r\n", temp_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return temp_data;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	ee07 3a90 	vmov	s15, r3
}
 80020de:	eeb0 0a67 	vmov.f32	s0, s15
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <read_accel>:


/*Read Accelerometer*/
float read_accel()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
	float accel_data;
	float accel_raw_data[3];
	int16_t accel_data_i16[3] = { 0 };
 80020ee:	463b      	mov	r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 80020f6:	463b      	mov	r3, r7
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 f9d3 	bl	80044a4 <BSP_ACCELERO_AccGetXYZ>
	accel_raw_data[2] = (float)accel_data_i16[2]*(9.8f/1000.0f);
 80020fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800212c <read_accel+0x44>
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	edc7 7a04 	vstr	s15, [r7, #16]
	accel_data = accel_raw_data[2];
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	617b      	str	r3, [r7, #20]
	//sprintf(debug, "accel: %.2f\r\n", accel_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
	return accel_data;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	ee07 3a90 	vmov	s15, r3
}
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	3c20902e 	.word	0x3c20902e

08002130 <trm_event>:


/*Telemetry Read and Monitor handler*/
void trm_event()
{
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b092      	sub	sp, #72	; 0x48
 8002136:	af0c      	add	r7, sp, #48	; 0x30
	switch(mode) {
 8002138:	4b83      	ldr	r3, [pc, #524]	; (8002348 <trm_event+0x218>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <trm_event+0x1a>
 8002140:	2b01      	cmp	r3, #1
 8002142:	f000 8377 	beq.w	8002834 <trm_event+0x704>
		} else if (last == 1 && (HAL_GetTick() - rescue_time) > 10000) { //With the Last_of_EE2028 and rescue not given in 10 secs
			on = 0; //KILL program by exiting while loop
		}
		break;
	default:
		break;
 8002146:	f001 b80b 	b.w	8003160 <trm_event+0x1030>
		gyro = read_gyro();
 800214a:	f7ff fedd 	bl	8001f08 <read_gyro>
 800214e:	eef0 7a40 	vmov.f32	s15, s0
 8002152:	4b7e      	ldr	r3, [pc, #504]	; (800234c <trm_event+0x21c>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
		magneto = read_magneto();
 8002158:	f7ff ff28 	bl	8001fac <read_magneto>
 800215c:	eef0 7a40 	vmov.f32	s15, s0
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <trm_event+0x220>)
 8002162:	edc3 7a00 	vstr	s15, [r3]
		pressure = read_pressure();
 8002166:	f7ff ff45 	bl	8001ff4 <read_pressure>
 800216a:	eef0 7a40 	vmov.f32	s15, s0
 800216e:	4b79      	ldr	r3, [pc, #484]	; (8002354 <trm_event+0x224>)
 8002170:	edc3 7a00 	vstr	s15, [r3]
		height = calc_height(pressure);
 8002174:	4b77      	ldr	r3, [pc, #476]	; (8002354 <trm_event+0x224>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eeb0 0a67 	vmov.f32	s0, s15
 800217e:	f7ff ff4b 	bl	8002018 <calc_height>
 8002182:	eef0 7a40 	vmov.f32	s15, s0
 8002186:	4b74      	ldr	r3, [pc, #464]	; (8002358 <trm_event+0x228>)
 8002188:	edc3 7a00 	vstr	s15, [r3]
		humidity = read_humidity();
 800218c:	f7ff ff8e 	bl	80020ac <read_humidity>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	4b71      	ldr	r3, [pc, #452]	; (800235c <trm_event+0x22c>)
 8002196:	edc3 7a00 	vstr	s15, [r3]
		if ((gyro < GYRO_THRES) && (magneto < MAGNETO_THRES) && (pressure > PRESSURE_THRES_LOW && pressure < PRESSURE_THRES_HIGH) && (height < HEIGHT_THRES) && (humidity > HUMIDITY_THRES_LOW && humidity < HUMIDITY_THRES_HIGH)) { //Thresholds not violated
 800219a:	4b6c      	ldr	r3, [pc, #432]	; (800234c <trm_event+0x21c>)
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002360 <trm_event+0x230>
 80021a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	f140 80f2 	bpl.w	8002394 <trm_event+0x264>
 80021b0:	4b67      	ldr	r3, [pc, #412]	; (8002350 <trm_event+0x220>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9c7 	bl	8000548 <__aeabi_f2d>
 80021ba:	a361      	add	r3, pc, #388	; (adr r3, 8002340 <trm_event+0x210>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fc8c 	bl	8000adc <__aeabi_dcmplt>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80e4 	beq.w	8002394 <trm_event+0x264>
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <trm_event+0x224>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002364 <trm_event+0x234>
 80021d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	f340 80d9 	ble.w	8002394 <trm_event+0x264>
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <trm_event+0x224>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002368 <trm_event+0x238>
 80021ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	f140 80ce 	bpl.w	8002394 <trm_event+0x264>
 80021f8:	4b57      	ldr	r3, [pc, #348]	; (8002358 <trm_event+0x228>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800236c <trm_event+0x23c>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	f140 80c3 	bpl.w	8002394 <trm_event+0x264>
 800220e:	4b53      	ldr	r3, [pc, #332]	; (800235c <trm_event+0x22c>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002370 <trm_event+0x240>
 8002218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	f340 80b8 	ble.w	8002394 <trm_event+0x264>
 8002224:	4b4d      	ldr	r3, [pc, #308]	; (800235c <trm_event+0x22c>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002374 <trm_event+0x244>
 800222e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	f140 80ad 	bpl.w	8002394 <trm_event+0x264>
			sprintf(tele_message, "G:%.2f dps, M(Y):%.2f T, P:%.2f hPa, Height:%.2f m, H:%.2f%% rH\r\n", gyro, magneto, pressure, height, humidity);
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <trm_event+0x21c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f982 	bl	8000548 <__aeabi_f2d>
 8002244:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <trm_event+0x220>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f97b 	bl	8000548 <__aeabi_f2d>
 8002252:	4604      	mov	r4, r0
 8002254:	460d      	mov	r5, r1
 8002256:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <trm_event+0x224>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f974 	bl	8000548 <__aeabi_f2d>
 8002260:	4680      	mov	r8, r0
 8002262:	4689      	mov	r9, r1
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <trm_event+0x228>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f96d 	bl	8000548 <__aeabi_f2d>
 800226e:	4682      	mov	sl, r0
 8002270:	468b      	mov	fp, r1
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <trm_event+0x22c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002284:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002288:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800228c:	e9cd 4500 	strd	r4, r5, [sp]
 8002290:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002294:	4938      	ldr	r1, [pc, #224]	; (8002378 <trm_event+0x248>)
 8002296:	4839      	ldr	r0, [pc, #228]	; (800237c <trm_event+0x24c>)
 8002298:	f007 f820 	bl	80092dc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 800229c:	4837      	ldr	r0, [pc, #220]	; (800237c <trm_event+0x24c>)
 800229e:	f7fd ffe7 	bl	8000270 <strlen>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022aa:	4934      	ldr	r1, [pc, #208]	; (800237c <trm_event+0x24c>)
 80022ac:	4834      	ldr	r0, [pc, #208]	; (8002380 <trm_event+0x250>)
 80022ae:	f005 fad1 	bl	8007854 <HAL_UART_Transmit>
			sprintf((char*)req, "G:%.2f dps, M(Y):%.2f T, P:%.2f hPa, Height:%.2f m, H:%.2f%% rH\r", gyro, magneto, pressure, height, humidity);
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <trm_event+0x21c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f946 	bl	8000548 <__aeabi_f2d>
 80022bc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <trm_event+0x220>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f93f 	bl	8000548 <__aeabi_f2d>
 80022ca:	4604      	mov	r4, r0
 80022cc:	460d      	mov	r5, r1
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <trm_event+0x224>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f938 	bl	8000548 <__aeabi_f2d>
 80022d8:	4680      	mov	r8, r0
 80022da:	4689      	mov	r9, r1
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <trm_event+0x228>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f931 	bl	8000548 <__aeabi_f2d>
 80022e6:	4682      	mov	sl, r0
 80022e8:	468b      	mov	fp, r1
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <trm_event+0x22c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f92a 	bl	8000548 <__aeabi_f2d>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022fc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002300:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002304:	e9cd 4500 	strd	r4, r5, [sp]
 8002308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800230c:	491d      	ldr	r1, [pc, #116]	; (8002384 <trm_event+0x254>)
 800230e:	481e      	ldr	r0, [pc, #120]	; (8002388 <trm_event+0x258>)
 8002310:	f006 ffe4 	bl	80092dc <siprintf>
			WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <trm_event+0x258>)
 8002316:	f7fd ffab 	bl	8000270 <strlen>
 800231a:	4603      	mov	r3, r0
 800231c:	b29a      	uxth	r2, r3
 800231e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <trm_event+0x25c>)
 8002326:	4918      	ldr	r1, [pc, #96]	; (8002388 <trm_event+0x258>)
 8002328:	2001      	movs	r0, #1
 800232a:	f001 fe19 	bl	8003f60 <WIFI_SendData>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <trm_event+0x260>)
 8002334:	701a      	strb	r2, [r3, #0]
		break;
 8002336:	f000 bf13 	b.w	8003160 <trm_event+0x1030>
 800233a:	bf00      	nop
 800233c:	f3af 8000 	nop.w
 8002340:	5c28f5c3 	.word	0x5c28f5c3
 8002344:	bfc5c28f 	.word	0xbfc5c28f
 8002348:	200003c4 	.word	0x200003c4
 800234c:	200004bc 	.word	0x200004bc
 8002350:	200004c0 	.word	0x200004c0
 8002354:	200004c4 	.word	0x200004c4
 8002358:	200004c8 	.word	0x200004c8
 800235c:	200004cc 	.word	0x200004cc
 8002360:	43af0000 	.word	0x43af0000
 8002364:	43fa0000 	.word	0x43fa0000
 8002368:	44bb8000 	.word	0x44bb8000
 800236c:	42c80000 	.word	0x42c80000
 8002370:	42200000 	.word	0x42200000
 8002374:	42dc0000 	.word	0x42dc0000
 8002378:	0800c924 	.word	0x0800c924
 800237c:	200003f0 	.word	0x200003f0
 8002380:	20000344 	.word	0x20000344
 8002384:	0800c968 	.word	0x0800c968
 8002388:	20000618 	.word	0x20000618
 800238c:	200007a8 	.word	0x200007a8
 8002390:	200007aa 	.word	0x200007aa
			if (gyro > GYRO_THRES) {
 8002394:	4b70      	ldr	r3, [pc, #448]	; (8002558 <trm_event+0x428>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800255c <trm_event+0x42c>
 800239e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	dd3b      	ble.n	8002420 <trm_event+0x2f0>
				sprintf(tele_message, "G:%.2f dps, exceeds threshold of %.2f dps.\r\n", gyro, GYRO_THRES);
 80023a8:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <trm_event+0x428>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8cb 	bl	8000548 <__aeabi_f2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	a162      	add	r1, pc, #392	; (adr r1, 8002540 <trm_event+0x410>)
 80023b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023bc:	e9cd 0100 	strd	r0, r1, [sp]
 80023c0:	4967      	ldr	r1, [pc, #412]	; (8002560 <trm_event+0x430>)
 80023c2:	4868      	ldr	r0, [pc, #416]	; (8002564 <trm_event+0x434>)
 80023c4:	f006 ff8a 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 80023c8:	4866      	ldr	r0, [pc, #408]	; (8002564 <trm_event+0x434>)
 80023ca:	f7fd ff51 	bl	8000270 <strlen>
 80023ce:	4603      	mov	r3, r0
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d6:	4963      	ldr	r1, [pc, #396]	; (8002564 <trm_event+0x434>)
 80023d8:	4863      	ldr	r0, [pc, #396]	; (8002568 <trm_event+0x438>)
 80023da:	f005 fa3b 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "G:%.2f dps, exceeds threshold of %.2f dps.\r", gyro, GYRO_THRES);
 80023de:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <trm_event+0x428>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f8b0 	bl	8000548 <__aeabi_f2d>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	a154      	add	r1, pc, #336	; (adr r1, 8002540 <trm_event+0x410>)
 80023ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023f2:	e9cd 0100 	strd	r0, r1, [sp]
 80023f6:	495d      	ldr	r1, [pc, #372]	; (800256c <trm_event+0x43c>)
 80023f8:	485d      	ldr	r0, [pc, #372]	; (8002570 <trm_event+0x440>)
 80023fa:	f006 ff6f 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 80023fe:	485c      	ldr	r0, [pc, #368]	; (8002570 <trm_event+0x440>)
 8002400:	f7fd ff36 	bl	8000270 <strlen>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	f242 7310 	movw	r3, #10000	; 0x2710
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4b59      	ldr	r3, [pc, #356]	; (8002574 <trm_event+0x444>)
 8002410:	4957      	ldr	r1, [pc, #348]	; (8002570 <trm_event+0x440>)
 8002412:	2001      	movs	r0, #1
 8002414:	f001 fda4 	bl	8003f60 <WIFI_SendData>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	4b56      	ldr	r3, [pc, #344]	; (8002578 <trm_event+0x448>)
 800241e:	701a      	strb	r2, [r3, #0]
			if (magneto > MAGNETO_THRES) {
 8002420:	4b56      	ldr	r3, [pc, #344]	; (800257c <trm_event+0x44c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f88f 	bl	8000548 <__aeabi_f2d>
 800242a:	a347      	add	r3, pc, #284	; (adr r3, 8002548 <trm_event+0x418>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe fb72 	bl	8000b18 <__aeabi_dcmpgt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03b      	beq.n	80024b2 <trm_event+0x382>
				sprintf(tele_message, "M(Y):%.2f T, exceeds threshold of %.2f T.\r\n", magneto, MAGNETO_THRES);
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <trm_event+0x44c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f882 	bl	8000548 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	a13f      	add	r1, pc, #252	; (adr r1, 8002548 <trm_event+0x418>)
 800244a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800244e:	e9cd 0100 	strd	r0, r1, [sp]
 8002452:	494b      	ldr	r1, [pc, #300]	; (8002580 <trm_event+0x450>)
 8002454:	4843      	ldr	r0, [pc, #268]	; (8002564 <trm_event+0x434>)
 8002456:	f006 ff41 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 800245a:	4842      	ldr	r0, [pc, #264]	; (8002564 <trm_event+0x434>)
 800245c:	f7fd ff08 	bl	8000270 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b29a      	uxth	r2, r3
 8002464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002468:	493e      	ldr	r1, [pc, #248]	; (8002564 <trm_event+0x434>)
 800246a:	483f      	ldr	r0, [pc, #252]	; (8002568 <trm_event+0x438>)
 800246c:	f005 f9f2 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "M(Y):%.2f T, exceeds threshold of %.2f T.\r", magneto, MAGNETO_THRES);
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <trm_event+0x44c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f867 	bl	8000548 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	a132      	add	r1, pc, #200	; (adr r1, 8002548 <trm_event+0x418>)
 8002480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002484:	e9cd 0100 	strd	r0, r1, [sp]
 8002488:	493e      	ldr	r1, [pc, #248]	; (8002584 <trm_event+0x454>)
 800248a:	4839      	ldr	r0, [pc, #228]	; (8002570 <trm_event+0x440>)
 800248c:	f006 ff26 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002490:	4837      	ldr	r0, [pc, #220]	; (8002570 <trm_event+0x440>)
 8002492:	f7fd feed 	bl	8000270 <strlen>
 8002496:	4603      	mov	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	f242 7310 	movw	r3, #10000	; 0x2710
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <trm_event+0x444>)
 80024a2:	4933      	ldr	r1, [pc, #204]	; (8002570 <trm_event+0x440>)
 80024a4:	2001      	movs	r0, #1
 80024a6:	f001 fd5b 	bl	8003f60 <WIFI_SendData>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <trm_event+0x448>)
 80024b0:	701a      	strb	r2, [r3, #0]
			if (pressure > PRESSURE_THRES_HIGH) {
 80024b2:	4b35      	ldr	r3, [pc, #212]	; (8002588 <trm_event+0x458>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800258c <trm_event+0x45c>
 80024bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	dd68      	ble.n	8002598 <trm_event+0x468>
				sprintf(tele_message, "P:%.2f hPa, exceeds threshold of %.2f hPa.\r\n", pressure, PRESSURE_THRES_HIGH);
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <trm_event+0x458>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f83c 	bl	8000548 <__aeabi_f2d>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	a11e      	add	r1, pc, #120	; (adr r1, 8002550 <trm_event+0x420>)
 80024d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024da:	e9cd 0100 	strd	r0, r1, [sp]
 80024de:	492c      	ldr	r1, [pc, #176]	; (8002590 <trm_event+0x460>)
 80024e0:	4820      	ldr	r0, [pc, #128]	; (8002564 <trm_event+0x434>)
 80024e2:	f006 fefb 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 80024e6:	481f      	ldr	r0, [pc, #124]	; (8002564 <trm_event+0x434>)
 80024e8:	f7fd fec2 	bl	8000270 <strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f4:	491b      	ldr	r1, [pc, #108]	; (8002564 <trm_event+0x434>)
 80024f6:	481c      	ldr	r0, [pc, #112]	; (8002568 <trm_event+0x438>)
 80024f8:	f005 f9ac 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "P:%.2f hPa, exceeds threshold of %.2f hPa.\r", pressure, PRESSURE_THRES_HIGH);
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <trm_event+0x458>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f821 	bl	8000548 <__aeabi_f2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	a111      	add	r1, pc, #68	; (adr r1, 8002550 <trm_event+0x420>)
 800250c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002510:	e9cd 0100 	strd	r0, r1, [sp]
 8002514:	491f      	ldr	r1, [pc, #124]	; (8002594 <trm_event+0x464>)
 8002516:	4816      	ldr	r0, [pc, #88]	; (8002570 <trm_event+0x440>)
 8002518:	f006 fee0 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 800251c:	4814      	ldr	r0, [pc, #80]	; (8002570 <trm_event+0x440>)
 800251e:	f7fd fea7 	bl	8000270 <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	b29a      	uxth	r2, r3
 8002526:	f242 7310 	movw	r3, #10000	; 0x2710
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <trm_event+0x444>)
 800252e:	4910      	ldr	r1, [pc, #64]	; (8002570 <trm_event+0x440>)
 8002530:	2001      	movs	r0, #1
 8002532:	f001 fd15 	bl	8003f60 <WIFI_SendData>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <trm_event+0x448>)
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e071      	b.n	8002624 <trm_event+0x4f4>
 8002540:	00000000 	.word	0x00000000
 8002544:	4075e000 	.word	0x4075e000
 8002548:	5c28f5c3 	.word	0x5c28f5c3
 800254c:	bfc5c28f 	.word	0xbfc5c28f
 8002550:	00000000 	.word	0x00000000
 8002554:	40977000 	.word	0x40977000
 8002558:	200004bc 	.word	0x200004bc
 800255c:	43af0000 	.word	0x43af0000
 8002560:	0800c9ac 	.word	0x0800c9ac
 8002564:	200003f0 	.word	0x200003f0
 8002568:	20000344 	.word	0x20000344
 800256c:	0800c9dc 	.word	0x0800c9dc
 8002570:	20000618 	.word	0x20000618
 8002574:	200007a8 	.word	0x200007a8
 8002578:	200007aa 	.word	0x200007aa
 800257c:	200004c0 	.word	0x200004c0
 8002580:	0800ca08 	.word	0x0800ca08
 8002584:	0800ca34 	.word	0x0800ca34
 8002588:	200004c4 	.word	0x200004c4
 800258c:	44bb8000 	.word	0x44bb8000
 8002590:	0800ca60 	.word	0x0800ca60
 8002594:	0800ca90 	.word	0x0800ca90
			} else if (pressure < PRESSURE_THRES_LOW){
 8002598:	4b8e      	ldr	r3, [pc, #568]	; (80027d4 <trm_event+0x6a4>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80027d8 <trm_event+0x6a8>
 80025a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	d53b      	bpl.n	8002624 <trm_event+0x4f4>
				sprintf(tele_message, "P:%.2f hPa, below threshold of %.2f hPa.\r\n", pressure, PRESSURE_THRES_LOW);
 80025ac:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <trm_event+0x6a4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffc9 	bl	8000548 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	4987      	ldr	r1, [pc, #540]	; (80027dc <trm_event+0x6ac>)
 80025c0:	e9cd 0100 	strd	r0, r1, [sp]
 80025c4:	4986      	ldr	r1, [pc, #536]	; (80027e0 <trm_event+0x6b0>)
 80025c6:	4887      	ldr	r0, [pc, #540]	; (80027e4 <trm_event+0x6b4>)
 80025c8:	f006 fe88 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 80025cc:	4885      	ldr	r0, [pc, #532]	; (80027e4 <trm_event+0x6b4>)
 80025ce:	f7fd fe4f 	bl	8000270 <strlen>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025da:	4982      	ldr	r1, [pc, #520]	; (80027e4 <trm_event+0x6b4>)
 80025dc:	4882      	ldr	r0, [pc, #520]	; (80027e8 <trm_event+0x6b8>)
 80025de:	f005 f939 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "P:%.2f hPa, below threshold of %.2f hPa.\r", pressure, PRESSURE_THRES_LOW);
 80025e2:	4b7c      	ldr	r3, [pc, #496]	; (80027d4 <trm_event+0x6a4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffae 	bl	8000548 <__aeabi_f2d>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	4979      	ldr	r1, [pc, #484]	; (80027dc <trm_event+0x6ac>)
 80025f6:	e9cd 0100 	strd	r0, r1, [sp]
 80025fa:	497c      	ldr	r1, [pc, #496]	; (80027ec <trm_event+0x6bc>)
 80025fc:	487c      	ldr	r0, [pc, #496]	; (80027f0 <trm_event+0x6c0>)
 80025fe:	f006 fe6d 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002602:	487b      	ldr	r0, [pc, #492]	; (80027f0 <trm_event+0x6c0>)
 8002604:	f7fd fe34 	bl	8000270 <strlen>
 8002608:	4603      	mov	r3, r0
 800260a:	b29a      	uxth	r2, r3
 800260c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <trm_event+0x6c4>)
 8002614:	4976      	ldr	r1, [pc, #472]	; (80027f0 <trm_event+0x6c0>)
 8002616:	2001      	movs	r0, #1
 8002618:	f001 fca2 	bl	8003f60 <WIFI_SendData>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <trm_event+0x6c8>)
 8002622:	701a      	strb	r2, [r3, #0]
			if (height > HEIGHT_THRES) {
 8002624:	4b75      	ldr	r3, [pc, #468]	; (80027fc <trm_event+0x6cc>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002800 <trm_event+0x6d0>
 800262e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	dd3b      	ble.n	80026b0 <trm_event+0x580>
				sprintf(tele_message, "Height:%.2f m, exceeds threshold of %.2f m.\r\n", height, HEIGHT_THRES);
 8002638:	4b70      	ldr	r3, [pc, #448]	; (80027fc <trm_event+0x6cc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff83 	bl	8000548 <__aeabi_f2d>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	496e      	ldr	r1, [pc, #440]	; (8002804 <trm_event+0x6d4>)
 800264c:	e9cd 0100 	strd	r0, r1, [sp]
 8002650:	496d      	ldr	r1, [pc, #436]	; (8002808 <trm_event+0x6d8>)
 8002652:	4864      	ldr	r0, [pc, #400]	; (80027e4 <trm_event+0x6b4>)
 8002654:	f006 fe42 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002658:	4862      	ldr	r0, [pc, #392]	; (80027e4 <trm_event+0x6b4>)
 800265a:	f7fd fe09 	bl	8000270 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	b29a      	uxth	r2, r3
 8002662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002666:	495f      	ldr	r1, [pc, #380]	; (80027e4 <trm_event+0x6b4>)
 8002668:	485f      	ldr	r0, [pc, #380]	; (80027e8 <trm_event+0x6b8>)
 800266a:	f005 f8f3 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "Height:%.2f m, exceeds threshold of %.2f m.\r", height, HEIGHT_THRES);
 800266e:	4b63      	ldr	r3, [pc, #396]	; (80027fc <trm_event+0x6cc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff68 	bl	8000548 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	4960      	ldr	r1, [pc, #384]	; (8002804 <trm_event+0x6d4>)
 8002682:	e9cd 0100 	strd	r0, r1, [sp]
 8002686:	4961      	ldr	r1, [pc, #388]	; (800280c <trm_event+0x6dc>)
 8002688:	4859      	ldr	r0, [pc, #356]	; (80027f0 <trm_event+0x6c0>)
 800268a:	f006 fe27 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 800268e:	4858      	ldr	r0, [pc, #352]	; (80027f0 <trm_event+0x6c0>)
 8002690:	f7fd fdee 	bl	8000270 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	b29a      	uxth	r2, r3
 8002698:	f242 7310 	movw	r3, #10000	; 0x2710
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <trm_event+0x6c4>)
 80026a0:	4953      	ldr	r1, [pc, #332]	; (80027f0 <trm_event+0x6c0>)
 80026a2:	2001      	movs	r0, #1
 80026a4:	f001 fc5c 	bl	8003f60 <WIFI_SendData>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b52      	ldr	r3, [pc, #328]	; (80027f8 <trm_event+0x6c8>)
 80026ae:	701a      	strb	r2, [r3, #0]
			if (humidity > HUMIDITY_THRES_HIGH) {
 80026b0:	4b57      	ldr	r3, [pc, #348]	; (8002810 <trm_event+0x6e0>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002814 <trm_event+0x6e4>
 80026ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	dd3d      	ble.n	8002740 <trm_event+0x610>
				sprintf(tele_message, "H:%.2f%% rH, exceeds threshold of %.2f%% rH.\r\n", humidity, HUMIDITY_THRES_HIGH);
 80026c4:	4b52      	ldr	r3, [pc, #328]	; (8002810 <trm_event+0x6e0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff3d 	bl	8000548 <__aeabi_f2d>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	f04f 0000 	mov.w	r0, #0
 80026d6:	4950      	ldr	r1, [pc, #320]	; (8002818 <trm_event+0x6e8>)
 80026d8:	e9cd 0100 	strd	r0, r1, [sp]
 80026dc:	494f      	ldr	r1, [pc, #316]	; (800281c <trm_event+0x6ec>)
 80026de:	4841      	ldr	r0, [pc, #260]	; (80027e4 <trm_event+0x6b4>)
 80026e0:	f006 fdfc 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 80026e4:	483f      	ldr	r0, [pc, #252]	; (80027e4 <trm_event+0x6b4>)
 80026e6:	f7fd fdc3 	bl	8000270 <strlen>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f2:	493c      	ldr	r1, [pc, #240]	; (80027e4 <trm_event+0x6b4>)
 80026f4:	483c      	ldr	r0, [pc, #240]	; (80027e8 <trm_event+0x6b8>)
 80026f6:	f005 f8ad 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "H:%.2f%% rH, exceeds threshold of %.2f%% rH.\r", humidity, HUMIDITY_THRES_HIGH);
 80026fa:	4b45      	ldr	r3, [pc, #276]	; (8002810 <trm_event+0x6e0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff22 	bl	8000548 <__aeabi_f2d>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	f04f 0000 	mov.w	r0, #0
 800270c:	4942      	ldr	r1, [pc, #264]	; (8002818 <trm_event+0x6e8>)
 800270e:	e9cd 0100 	strd	r0, r1, [sp]
 8002712:	4943      	ldr	r1, [pc, #268]	; (8002820 <trm_event+0x6f0>)
 8002714:	4836      	ldr	r0, [pc, #216]	; (80027f0 <trm_event+0x6c0>)
 8002716:	f006 fde1 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 800271a:	4835      	ldr	r0, [pc, #212]	; (80027f0 <trm_event+0x6c0>)
 800271c:	f7fd fda8 	bl	8000270 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	b29a      	uxth	r2, r3
 8002724:	f242 7310 	movw	r3, #10000	; 0x2710
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <trm_event+0x6c4>)
 800272c:	4930      	ldr	r1, [pc, #192]	; (80027f0 <trm_event+0x6c0>)
 800272e:	2001      	movs	r0, #1
 8002730:	f001 fc16 	bl	8003f60 <WIFI_SendData>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <trm_event+0x6c8>)
 800273a:	701a      	strb	r2, [r3, #0]
		break;
 800273c:	f000 bd10 	b.w	8003160 <trm_event+0x1030>
			} else if (humidity < HUMIDITY_THRES_LOW) {
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <trm_event+0x6e0>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002824 <trm_event+0x6f4>
 800274a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	d401      	bmi.n	8002758 <trm_event+0x628>
		break;
 8002754:	f000 bd04 	b.w	8003160 <trm_event+0x1030>
				sprintf(tele_message, "H:%.2f%% rH, below threshold of %.2f%% rH.\r\n", humidity, HUMIDITY_THRES_LOW);
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <trm_event+0x6e0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fef3 	bl	8000548 <__aeabi_f2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	492f      	ldr	r1, [pc, #188]	; (8002828 <trm_event+0x6f8>)
 800276c:	e9cd 0100 	strd	r0, r1, [sp]
 8002770:	492e      	ldr	r1, [pc, #184]	; (800282c <trm_event+0x6fc>)
 8002772:	481c      	ldr	r0, [pc, #112]	; (80027e4 <trm_event+0x6b4>)
 8002774:	f006 fdb2 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002778:	481a      	ldr	r0, [pc, #104]	; (80027e4 <trm_event+0x6b4>)
 800277a:	f7fd fd79 	bl	8000270 <strlen>
 800277e:	4603      	mov	r3, r0
 8002780:	b29a      	uxth	r2, r3
 8002782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002786:	4917      	ldr	r1, [pc, #92]	; (80027e4 <trm_event+0x6b4>)
 8002788:	4817      	ldr	r0, [pc, #92]	; (80027e8 <trm_event+0x6b8>)
 800278a:	f005 f863 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "H:%.2f%% rH, below threshold of %.2f%% rH.\r", humidity, HUMIDITY_THRES_LOW);
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <trm_event+0x6e0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fed8 	bl	8000548 <__aeabi_f2d>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	f04f 0000 	mov.w	r0, #0
 80027a0:	4921      	ldr	r1, [pc, #132]	; (8002828 <trm_event+0x6f8>)
 80027a2:	e9cd 0100 	strd	r0, r1, [sp]
 80027a6:	4922      	ldr	r1, [pc, #136]	; (8002830 <trm_event+0x700>)
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <trm_event+0x6c0>)
 80027aa:	f006 fd97 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <trm_event+0x6c0>)
 80027b0:	f7fd fd5e 	bl	8000270 <strlen>
 80027b4:	4603      	mov	r3, r0
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <trm_event+0x6c4>)
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <trm_event+0x6c0>)
 80027c2:	2001      	movs	r0, #1
 80027c4:	f001 fbcc 	bl	8003f60 <WIFI_SendData>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <trm_event+0x6c8>)
 80027ce:	701a      	strb	r2, [r3, #0]
		break;
 80027d0:	f000 bcc6 	b.w	8003160 <trm_event+0x1030>
 80027d4:	200004c4 	.word	0x200004c4
 80027d8:	43fa0000 	.word	0x43fa0000
 80027dc:	407f4000 	.word	0x407f4000
 80027e0:	0800cabc 	.word	0x0800cabc
 80027e4:	200003f0 	.word	0x200003f0
 80027e8:	20000344 	.word	0x20000344
 80027ec:	0800cae8 	.word	0x0800cae8
 80027f0:	20000618 	.word	0x20000618
 80027f4:	200007a8 	.word	0x200007a8
 80027f8:	200007aa 	.word	0x200007aa
 80027fc:	200004c8 	.word	0x200004c8
 8002800:	42c80000 	.word	0x42c80000
 8002804:	40590000 	.word	0x40590000
 8002808:	0800cb14 	.word	0x0800cb14
 800280c:	0800cb44 	.word	0x0800cb44
 8002810:	200004cc 	.word	0x200004cc
 8002814:	42dc0000 	.word	0x42dc0000
 8002818:	405b8000 	.word	0x405b8000
 800281c:	0800cb74 	.word	0x0800cb74
 8002820:	0800cba4 	.word	0x0800cba4
 8002824:	42200000 	.word	0x42200000
 8002828:	40440000 	.word	0x40440000
 800282c:	0800cbd4 	.word	0x0800cbd4
 8002830:	0800cc04 	.word	0x0800cc04
		accel = read_accel();
 8002834:	f7ff fc58 	bl	80020e8 <read_accel>
 8002838:	eef0 7a40 	vmov.f32	s15, s0
 800283c:	4baa      	ldr	r3, [pc, #680]	; (8002ae8 <trm_event+0x9b8>)
 800283e:	edc3 7a00 	vstr	s15, [r3]
		if (last == 0) { //Without the Last_of_EE2028
 8002842:	4baa      	ldr	r3, [pc, #680]	; (8002aec <trm_event+0x9bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 8445 	bne.w	80030d6 <trm_event+0xfa6>
			temp = read_temp();
 800284c:	f7ff fc3d 	bl	80020ca <read_temp>
 8002850:	eef0 7a40 	vmov.f32	s15, s0
 8002854:	4ba6      	ldr	r3, [pc, #664]	; (8002af0 <trm_event+0x9c0>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
			pressure = read_pressure();
 800285a:	f7ff fbcb 	bl	8001ff4 <read_pressure>
 800285e:	eef0 7a40 	vmov.f32	s15, s0
 8002862:	4ba4      	ldr	r3, [pc, #656]	; (8002af4 <trm_event+0x9c4>)
 8002864:	edc3 7a00 	vstr	s15, [r3]
			height = calc_height(pressure);
 8002868:	4ba2      	ldr	r3, [pc, #648]	; (8002af4 <trm_event+0x9c4>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	eeb0 0a67 	vmov.f32	s0, s15
 8002872:	f7ff fbd1 	bl	8002018 <calc_height>
 8002876:	eef0 7a40 	vmov.f32	s15, s0
 800287a:	4b9f      	ldr	r3, [pc, #636]	; (8002af8 <trm_event+0x9c8>)
 800287c:	edc3 7a00 	vstr	s15, [r3]
			humidity = read_humidity();
 8002880:	f7ff fc14 	bl	80020ac <read_humidity>
 8002884:	eef0 7a40 	vmov.f32	s15, s0
 8002888:	4b9c      	ldr	r3, [pc, #624]	; (8002afc <trm_event+0x9cc>)
 800288a:	edc3 7a00 	vstr	s15, [r3]
			gyro = read_gyro();
 800288e:	f7ff fb3b 	bl	8001f08 <read_gyro>
 8002892:	eef0 7a40 	vmov.f32	s15, s0
 8002896:	4b9a      	ldr	r3, [pc, #616]	; (8002b00 <trm_event+0x9d0>)
 8002898:	edc3 7a00 	vstr	s15, [r3]
			magneto = read_magneto();
 800289c:	f7ff fb86 	bl	8001fac <read_magneto>
 80028a0:	eef0 7a40 	vmov.f32	s15, s0
 80028a4:	4b97      	ldr	r3, [pc, #604]	; (8002b04 <trm_event+0x9d4>)
 80028a6:	edc3 7a00 	vstr	s15, [r3]
			if ((temp > TEMP_THRES_LOW && temp < TEMP_THRES_HIGH) && (pressure > PRESSURE_THRES_LOW && pressure < PRESSURE_THRES_HIGH) && (height < HEIGHT_THRES) && (humidity > HUMIDITY_THRES_LOW && humidity < HUMIDITY_THRES_HIGH) && (accel > ACCEL_THRES) && (gyro < GYRO_THRES) && (magneto < MAGNETO_THRES)) { //Thresholds not violated
 80028aa:	4b91      	ldr	r3, [pc, #580]	; (8002af0 <trm_event+0x9c0>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 80028b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	f340 8140 	ble.w	8002b40 <trm_event+0xa10>
 80028c0:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <trm_event+0x9c0>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002b08 <trm_event+0x9d8>
 80028ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d2:	f140 8135 	bpl.w	8002b40 <trm_event+0xa10>
 80028d6:	4b87      	ldr	r3, [pc, #540]	; (8002af4 <trm_event+0x9c4>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002b0c <trm_event+0x9dc>
 80028e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	f340 812a 	ble.w	8002b40 <trm_event+0xa10>
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <trm_event+0x9c4>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002b10 <trm_event+0x9e0>
 80028f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	f140 811f 	bpl.w	8002b40 <trm_event+0xa10>
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <trm_event+0x9c8>)
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002b14 <trm_event+0x9e4>
 800290c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	f140 8114 	bpl.w	8002b40 <trm_event+0xa10>
 8002918:	4b78      	ldr	r3, [pc, #480]	; (8002afc <trm_event+0x9cc>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002b18 <trm_event+0x9e8>
 8002922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292a:	f340 8109 	ble.w	8002b40 <trm_event+0xa10>
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <trm_event+0x9cc>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002b1c <trm_event+0x9ec>
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	f140 80fe 	bpl.w	8002b40 <trm_event+0xa10>
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <trm_event+0x9b8>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	f340 80f5 	ble.w	8002b40 <trm_event+0xa10>
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <trm_event+0x9d0>)
 8002958:	edd3 7a00 	vldr	s15, [r3]
 800295c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002b20 <trm_event+0x9f0>
 8002960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	f140 80ea 	bpl.w	8002b40 <trm_event+0xa10>
 800296c:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <trm_event+0x9d4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fde9 	bl	8000548 <__aeabi_f2d>
 8002976:	a35a      	add	r3, pc, #360	; (adr r3, 8002ae0 <trm_event+0x9b0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fe f8ae 	bl	8000adc <__aeabi_dcmplt>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80dc 	beq.w	8002b40 <trm_event+0xa10>
				sprintf(tele_message, "T:%.2f degC, P:%.2f hPa, Height:%.2f m, H:%.2f%% rH, A:%.2f mps^2, G:%.2f dps, M(Y):%.2f T\r\n", temp, pressure, height, humidity, accel, gyro, magneto);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <trm_event+0x9c0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fddb 	bl	8000548 <__aeabi_f2d>
 8002992:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002996:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <trm_event+0x9c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdd4 	bl	8000548 <__aeabi_f2d>
 80029a0:	4680      	mov	r8, r0
 80029a2:	4689      	mov	r9, r1
 80029a4:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <trm_event+0x9c8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdcd 	bl	8000548 <__aeabi_f2d>
 80029ae:	4682      	mov	sl, r0
 80029b0:	468b      	mov	fp, r1
 80029b2:	4b52      	ldr	r3, [pc, #328]	; (8002afc <trm_event+0x9cc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fdc6 	bl	8000548 <__aeabi_f2d>
 80029bc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029c0:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <trm_event+0x9b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fdbf 	bl	8000548 <__aeabi_f2d>
 80029ca:	e9c7 0100 	strd	r0, r1, [r7]
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <trm_event+0x9d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fdb8 	bl	8000548 <__aeabi_f2d>
 80029d8:	4604      	mov	r4, r0
 80029da:	460d      	mov	r5, r1
 80029dc:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <trm_event+0x9d4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fdb1 	bl	8000548 <__aeabi_f2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80029ee:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80029f2:	ed97 7b00 	vldr	d7, [r7]
 80029f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80029fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80029fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a02:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002a06:	e9cd 8900 	strd	r8, r9, [sp]
 8002a0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a0e:	4945      	ldr	r1, [pc, #276]	; (8002b24 <trm_event+0x9f4>)
 8002a10:	4845      	ldr	r0, [pc, #276]	; (8002b28 <trm_event+0x9f8>)
 8002a12:	f006 fc63 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002a16:	4844      	ldr	r0, [pc, #272]	; (8002b28 <trm_event+0x9f8>)
 8002a18:	f7fd fc2a 	bl	8000270 <strlen>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a24:	4940      	ldr	r1, [pc, #256]	; (8002b28 <trm_event+0x9f8>)
 8002a26:	4841      	ldr	r0, [pc, #260]	; (8002b2c <trm_event+0x9fc>)
 8002a28:	f004 ff14 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "T:%.2f degC, P:%.2f hPa, Height:%.2f m, H:%.2f%% rH, A:%.2f mps^2, G:%.2f dps, M(Y):%.2f T\r", temp, pressure, height, humidity, accel, gyro, magneto);
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <trm_event+0x9c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd89 	bl	8000548 <__aeabi_f2d>
 8002a36:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <trm_event+0x9c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fd82 	bl	8000548 <__aeabi_f2d>
 8002a44:	4680      	mov	r8, r0
 8002a46:	4689      	mov	r9, r1
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <trm_event+0x9c8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd7b 	bl	8000548 <__aeabi_f2d>
 8002a52:	4682      	mov	sl, r0
 8002a54:	468b      	mov	fp, r1
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <trm_event+0x9cc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd74 	bl	8000548 <__aeabi_f2d>
 8002a60:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <trm_event+0x9b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd6d 	bl	8000548 <__aeabi_f2d>
 8002a6e:	e9c7 0100 	strd	r0, r1, [r7]
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <trm_event+0x9d0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd66 	bl	8000548 <__aeabi_f2d>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	460d      	mov	r5, r1
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <trm_event+0x9d4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd5f 	bl	8000548 <__aeabi_f2d>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002a92:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002a96:	ed97 7b00 	vldr	d7, [r7]
 8002a9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a9e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002aa2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002aa6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002aaa:	e9cd 8900 	strd	r8, r9, [sp]
 8002aae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ab2:	491f      	ldr	r1, [pc, #124]	; (8002b30 <trm_event+0xa00>)
 8002ab4:	481f      	ldr	r0, [pc, #124]	; (8002b34 <trm_event+0xa04>)
 8002ab6:	f006 fc11 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002aba:	481e      	ldr	r0, [pc, #120]	; (8002b34 <trm_event+0xa04>)
 8002abc:	f7fd fbd8 	bl	8000270 <strlen>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <trm_event+0xa08>)
 8002acc:	4919      	ldr	r1, [pc, #100]	; (8002b34 <trm_event+0xa04>)
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f001 fa46 	bl	8003f60 <WIFI_SendData>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <trm_event+0xa0c>)
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e2fb      	b.n	80030d6 <trm_event+0xfa6>
 8002ade:	bf00      	nop
 8002ae0:	5c28f5c3 	.word	0x5c28f5c3
 8002ae4:	bfc5c28f 	.word	0xbfc5c28f
 8002ae8:	200004d4 	.word	0x200004d4
 8002aec:	200003c8 	.word	0x200003c8
 8002af0:	200004d0 	.word	0x200004d0
 8002af4:	200004c4 	.word	0x200004c4
 8002af8:	200004c8 	.word	0x200004c8
 8002afc:	200004cc 	.word	0x200004cc
 8002b00:	200004bc 	.word	0x200004bc
 8002b04:	200004c0 	.word	0x200004c0
 8002b08:	42700000 	.word	0x42700000
 8002b0c:	43fa0000 	.word	0x43fa0000
 8002b10:	44bb8000 	.word	0x44bb8000
 8002b14:	42c80000 	.word	0x42c80000
 8002b18:	42200000 	.word	0x42200000
 8002b1c:	42dc0000 	.word	0x42dc0000
 8002b20:	43af0000 	.word	0x43af0000
 8002b24:	0800cc30 	.word	0x0800cc30
 8002b28:	200003f0 	.word	0x200003f0
 8002b2c:	20000344 	.word	0x20000344
 8002b30:	0800cc90 	.word	0x0800cc90
 8002b34:	20000618 	.word	0x20000618
 8002b38:	200007a8 	.word	0x200007a8
 8002b3c:	200007aa 	.word	0x200007aa
				if (temp > TEMP_THRES_HIGH) {
 8002b40:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <trm_event+0xbc0>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002cf4 <trm_event+0xbc4>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	dd3c      	ble.n	8002bce <trm_event+0xa9e>
					sprintf(tele_message, "T:%.2f degC, exceeds threshold of %.2f degC.\r\n", temp, TEMP_THRES_HIGH);
 8002b54:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <trm_event+0xbc0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fcf5 	bl	8000548 <__aeabi_f2d>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	4964      	ldr	r1, [pc, #400]	; (8002cf8 <trm_event+0xbc8>)
 8002b68:	e9cd 0100 	strd	r0, r1, [sp]
 8002b6c:	4963      	ldr	r1, [pc, #396]	; (8002cfc <trm_event+0xbcc>)
 8002b6e:	4864      	ldr	r0, [pc, #400]	; (8002d00 <trm_event+0xbd0>)
 8002b70:	f006 fbb4 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002b74:	4862      	ldr	r0, [pc, #392]	; (8002d00 <trm_event+0xbd0>)
 8002b76:	f7fd fb7b 	bl	8000270 <strlen>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b82:	495f      	ldr	r1, [pc, #380]	; (8002d00 <trm_event+0xbd0>)
 8002b84:	485f      	ldr	r0, [pc, #380]	; (8002d04 <trm_event+0xbd4>)
 8002b86:	f004 fe65 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "T:%.2f degC, exceeds threshold of %.2f degC.\r", temp, TEMP_THRES_HIGH);
 8002b8a:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <trm_event+0xbc0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fcda 	bl	8000548 <__aeabi_f2d>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	f04f 0000 	mov.w	r0, #0
 8002b9c:	4956      	ldr	r1, [pc, #344]	; (8002cf8 <trm_event+0xbc8>)
 8002b9e:	e9cd 0100 	strd	r0, r1, [sp]
 8002ba2:	4959      	ldr	r1, [pc, #356]	; (8002d08 <trm_event+0xbd8>)
 8002ba4:	4859      	ldr	r0, [pc, #356]	; (8002d0c <trm_event+0xbdc>)
 8002ba6:	f006 fb99 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002baa:	4858      	ldr	r0, [pc, #352]	; (8002d0c <trm_event+0xbdc>)
 8002bac:	f7fd fb60 	bl	8000270 <strlen>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4b55      	ldr	r3, [pc, #340]	; (8002d10 <trm_event+0xbe0>)
 8002bbc:	4953      	ldr	r1, [pc, #332]	; (8002d0c <trm_event+0xbdc>)
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f001 f9ce 	bl	8003f60 <WIFI_SendData>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b52      	ldr	r3, [pc, #328]	; (8002d14 <trm_event+0xbe4>)
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e045      	b.n	8002c5a <trm_event+0xb2a>
				} else if (temp < TEMP_THRES_LOW) {
 8002bce:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <trm_event+0xbc0>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	d53b      	bpl.n	8002c5a <trm_event+0xb2a>
					sprintf(tele_message, "T:%.2f degC, below threshold of %.2f degC.\r\n", temp, TEMP_THRES_LOW);
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <trm_event+0xbc0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcae 	bl	8000548 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	4948      	ldr	r1, [pc, #288]	; (8002d18 <trm_event+0xbe8>)
 8002bf6:	e9cd 0100 	strd	r0, r1, [sp]
 8002bfa:	4948      	ldr	r1, [pc, #288]	; (8002d1c <trm_event+0xbec>)
 8002bfc:	4840      	ldr	r0, [pc, #256]	; (8002d00 <trm_event+0xbd0>)
 8002bfe:	f006 fb6d 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002c02:	483f      	ldr	r0, [pc, #252]	; (8002d00 <trm_event+0xbd0>)
 8002c04:	f7fd fb34 	bl	8000270 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c10:	493b      	ldr	r1, [pc, #236]	; (8002d00 <trm_event+0xbd0>)
 8002c12:	483c      	ldr	r0, [pc, #240]	; (8002d04 <trm_event+0xbd4>)
 8002c14:	f004 fe1e 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "T:%.2f degC, below threshold of %.2f degC.\r", temp, TEMP_THRES_LOW);
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <trm_event+0xbc0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fc93 	bl	8000548 <__aeabi_f2d>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	493b      	ldr	r1, [pc, #236]	; (8002d18 <trm_event+0xbe8>)
 8002c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8002c30:	493b      	ldr	r1, [pc, #236]	; (8002d20 <trm_event+0xbf0>)
 8002c32:	4836      	ldr	r0, [pc, #216]	; (8002d0c <trm_event+0xbdc>)
 8002c34:	f006 fb52 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002c38:	4834      	ldr	r0, [pc, #208]	; (8002d0c <trm_event+0xbdc>)
 8002c3a:	f7fd fb19 	bl	8000270 <strlen>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <trm_event+0xbe0>)
 8002c4a:	4930      	ldr	r1, [pc, #192]	; (8002d0c <trm_event+0xbdc>)
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f001 f987 	bl	8003f60 <WIFI_SendData>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <trm_event+0xbe4>)
 8002c58:	701a      	strb	r2, [r3, #0]
				if (pressure > PRESSURE_THRES_HIGH) {
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <trm_event+0xbf4>)
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002d28 <trm_event+0xbf8>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	dd62      	ble.n	8002d34 <trm_event+0xc04>
					sprintf(tele_message, "P:%.2f hPa, exceeds threshold of %.2f hPa.\r\n", pressure, PRESSURE_THRES_HIGH);
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <trm_event+0xbf4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc68 	bl	8000548 <__aeabi_f2d>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	a11a      	add	r1, pc, #104	; (adr r1, 8002ce8 <trm_event+0xbb8>)
 8002c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c82:	e9cd 0100 	strd	r0, r1, [sp]
 8002c86:	4929      	ldr	r1, [pc, #164]	; (8002d2c <trm_event+0xbfc>)
 8002c88:	481d      	ldr	r0, [pc, #116]	; (8002d00 <trm_event+0xbd0>)
 8002c8a:	f006 fb27 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002c8e:	481c      	ldr	r0, [pc, #112]	; (8002d00 <trm_event+0xbd0>)
 8002c90:	f7fd faee 	bl	8000270 <strlen>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <trm_event+0xbd0>)
 8002c9e:	4819      	ldr	r0, [pc, #100]	; (8002d04 <trm_event+0xbd4>)
 8002ca0:	f004 fdd8 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "P:%.2f hPa, exceeds threshold of %.2f hPa.\r", pressure, PRESSURE_THRES_HIGH);
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <trm_event+0xbf4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc4d 	bl	8000548 <__aeabi_f2d>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	a10d      	add	r1, pc, #52	; (adr r1, 8002ce8 <trm_event+0xbb8>)
 8002cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cb8:	e9cd 0100 	strd	r0, r1, [sp]
 8002cbc:	491c      	ldr	r1, [pc, #112]	; (8002d30 <trm_event+0xc00>)
 8002cbe:	4813      	ldr	r0, [pc, #76]	; (8002d0c <trm_event+0xbdc>)
 8002cc0:	f006 fb0c 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002cc4:	4811      	ldr	r0, [pc, #68]	; (8002d0c <trm_event+0xbdc>)
 8002cc6:	f7fd fad3 	bl	8000270 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	f242 7310 	movw	r3, #10000	; 0x2710
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <trm_event+0xbe0>)
 8002cd6:	490d      	ldr	r1, [pc, #52]	; (8002d0c <trm_event+0xbdc>)
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f001 f941 	bl	8003f60 <WIFI_SendData>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <trm_event+0xbe4>)
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e06b      	b.n	8002dc0 <trm_event+0xc90>
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	40977000 	.word	0x40977000
 8002cf0:	200004d0 	.word	0x200004d0
 8002cf4:	42700000 	.word	0x42700000
 8002cf8:	404e0000 	.word	0x404e0000
 8002cfc:	0800ccec 	.word	0x0800ccec
 8002d00:	200003f0 	.word	0x200003f0
 8002d04:	20000344 	.word	0x20000344
 8002d08:	0800cd1c 	.word	0x0800cd1c
 8002d0c:	20000618 	.word	0x20000618
 8002d10:	200007a8 	.word	0x200007a8
 8002d14:	200007aa 	.word	0x200007aa
 8002d18:	c02e0000 	.word	0xc02e0000
 8002d1c:	0800cd4c 	.word	0x0800cd4c
 8002d20:	0800cd7c 	.word	0x0800cd7c
 8002d24:	200004c4 	.word	0x200004c4
 8002d28:	44bb8000 	.word	0x44bb8000
 8002d2c:	0800ca60 	.word	0x0800ca60
 8002d30:	0800ca90 	.word	0x0800ca90
				} else if (pressure < PRESSURE_THRES_LOW){
 8002d34:	4b69      	ldr	r3, [pc, #420]	; (8002edc <trm_event+0xdac>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ee0 <trm_event+0xdb0>
 8002d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	d53b      	bpl.n	8002dc0 <trm_event+0xc90>
					sprintf(tele_message, "P:%.2f hPa, below threshold of %.2f hPa.\r\n", pressure, PRESSURE_THRES_LOW);
 8002d48:	4b64      	ldr	r3, [pc, #400]	; (8002edc <trm_event+0xdac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fbfb 	bl	8000548 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	f04f 0000 	mov.w	r0, #0
 8002d5a:	4962      	ldr	r1, [pc, #392]	; (8002ee4 <trm_event+0xdb4>)
 8002d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8002d60:	4961      	ldr	r1, [pc, #388]	; (8002ee8 <trm_event+0xdb8>)
 8002d62:	4862      	ldr	r0, [pc, #392]	; (8002eec <trm_event+0xdbc>)
 8002d64:	f006 faba 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002d68:	4860      	ldr	r0, [pc, #384]	; (8002eec <trm_event+0xdbc>)
 8002d6a:	f7fd fa81 	bl	8000270 <strlen>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d76:	495d      	ldr	r1, [pc, #372]	; (8002eec <trm_event+0xdbc>)
 8002d78:	485d      	ldr	r0, [pc, #372]	; (8002ef0 <trm_event+0xdc0>)
 8002d7a:	f004 fd6b 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "P:%.2f hPa, below threshold of %.2f hPa.\r", pressure, PRESSURE_THRES_LOW);
 8002d7e:	4b57      	ldr	r3, [pc, #348]	; (8002edc <trm_event+0xdac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fbe0 	bl	8000548 <__aeabi_f2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	4954      	ldr	r1, [pc, #336]	; (8002ee4 <trm_event+0xdb4>)
 8002d92:	e9cd 0100 	strd	r0, r1, [sp]
 8002d96:	4957      	ldr	r1, [pc, #348]	; (8002ef4 <trm_event+0xdc4>)
 8002d98:	4857      	ldr	r0, [pc, #348]	; (8002ef8 <trm_event+0xdc8>)
 8002d9a:	f006 fa9f 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002d9e:	4856      	ldr	r0, [pc, #344]	; (8002ef8 <trm_event+0xdc8>)
 8002da0:	f7fd fa66 	bl	8000270 <strlen>
 8002da4:	4603      	mov	r3, r0
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	f242 7310 	movw	r3, #10000	; 0x2710
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <trm_event+0xdcc>)
 8002db0:	4951      	ldr	r1, [pc, #324]	; (8002ef8 <trm_event+0xdc8>)
 8002db2:	2001      	movs	r0, #1
 8002db4:	f001 f8d4 	bl	8003f60 <WIFI_SendData>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <trm_event+0xdd0>)
 8002dbe:	701a      	strb	r2, [r3, #0]
				if (height > HEIGHT_THRES) {
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <trm_event+0xdd4>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002f08 <trm_event+0xdd8>
 8002dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	dd3b      	ble.n	8002e4c <trm_event+0xd1c>
					sprintf(tele_message, "Height:%.2f m, exceeds threshold of %.2f m.\r\n", height, HEIGHT_THRES);
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <trm_event+0xdd4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fbb5 	bl	8000548 <__aeabi_f2d>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	4949      	ldr	r1, [pc, #292]	; (8002f0c <trm_event+0xddc>)
 8002de8:	e9cd 0100 	strd	r0, r1, [sp]
 8002dec:	4948      	ldr	r1, [pc, #288]	; (8002f10 <trm_event+0xde0>)
 8002dee:	483f      	ldr	r0, [pc, #252]	; (8002eec <trm_event+0xdbc>)
 8002df0:	f006 fa74 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002df4:	483d      	ldr	r0, [pc, #244]	; (8002eec <trm_event+0xdbc>)
 8002df6:	f7fd fa3b 	bl	8000270 <strlen>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e02:	493a      	ldr	r1, [pc, #232]	; (8002eec <trm_event+0xdbc>)
 8002e04:	483a      	ldr	r0, [pc, #232]	; (8002ef0 <trm_event+0xdc0>)
 8002e06:	f004 fd25 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "Height:%.2f m, exceeds threshold of %.2f m.\r", height, HEIGHT_THRES);
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <trm_event+0xdd4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb9a 	bl	8000548 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	493b      	ldr	r1, [pc, #236]	; (8002f0c <trm_event+0xddc>)
 8002e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8002e22:	493c      	ldr	r1, [pc, #240]	; (8002f14 <trm_event+0xde4>)
 8002e24:	4834      	ldr	r0, [pc, #208]	; (8002ef8 <trm_event+0xdc8>)
 8002e26:	f006 fa59 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002e2a:	4833      	ldr	r0, [pc, #204]	; (8002ef8 <trm_event+0xdc8>)
 8002e2c:	f7fd fa20 	bl	8000270 <strlen>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <trm_event+0xdcc>)
 8002e3c:	492e      	ldr	r1, [pc, #184]	; (8002ef8 <trm_event+0xdc8>)
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f001 f88e 	bl	8003f60 <WIFI_SendData>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <trm_event+0xdd0>)
 8002e4a:	701a      	strb	r2, [r3, #0]
				if (humidity > HUMIDITY_THRES_HIGH) {
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <trm_event+0xde8>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002f1c <trm_event+0xdec>
 8002e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	dd65      	ble.n	8002f2c <trm_event+0xdfc>
					sprintf(tele_message, "H:%.2f%% rH, exceeds threshold of %.2f%% rH.\r\n", humidity, HUMIDITY_THRES_HIGH);
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <trm_event+0xde8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fb6f 	bl	8000548 <__aeabi_f2d>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	f04f 0000 	mov.w	r0, #0
 8002e72:	492b      	ldr	r1, [pc, #172]	; (8002f20 <trm_event+0xdf0>)
 8002e74:	e9cd 0100 	strd	r0, r1, [sp]
 8002e78:	492a      	ldr	r1, [pc, #168]	; (8002f24 <trm_event+0xdf4>)
 8002e7a:	481c      	ldr	r0, [pc, #112]	; (8002eec <trm_event+0xdbc>)
 8002e7c:	f006 fa2e 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002e80:	481a      	ldr	r0, [pc, #104]	; (8002eec <trm_event+0xdbc>)
 8002e82:	f7fd f9f5 	bl	8000270 <strlen>
 8002e86:	4603      	mov	r3, r0
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8e:	4917      	ldr	r1, [pc, #92]	; (8002eec <trm_event+0xdbc>)
 8002e90:	4817      	ldr	r0, [pc, #92]	; (8002ef0 <trm_event+0xdc0>)
 8002e92:	f004 fcdf 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "H:%.2f%% rH, exceeds threshold of %.2f%% rH.\r", humidity, HUMIDITY_THRES_HIGH);
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <trm_event+0xde8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb54 	bl	8000548 <__aeabi_f2d>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	491d      	ldr	r1, [pc, #116]	; (8002f20 <trm_event+0xdf0>)
 8002eaa:	e9cd 0100 	strd	r0, r1, [sp]
 8002eae:	491e      	ldr	r1, [pc, #120]	; (8002f28 <trm_event+0xdf8>)
 8002eb0:	4811      	ldr	r0, [pc, #68]	; (8002ef8 <trm_event+0xdc8>)
 8002eb2:	f006 fa13 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002eb6:	4810      	ldr	r0, [pc, #64]	; (8002ef8 <trm_event+0xdc8>)
 8002eb8:	f7fd f9da 	bl	8000270 <strlen>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <trm_event+0xdcc>)
 8002ec8:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <trm_event+0xdc8>)
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f001 f848 	bl	8003f60 <WIFI_SendData>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <trm_event+0xdd0>)
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e06e      	b.n	8002fb8 <trm_event+0xe88>
 8002eda:	bf00      	nop
 8002edc:	200004c4 	.word	0x200004c4
 8002ee0:	43fa0000 	.word	0x43fa0000
 8002ee4:	407f4000 	.word	0x407f4000
 8002ee8:	0800cabc 	.word	0x0800cabc
 8002eec:	200003f0 	.word	0x200003f0
 8002ef0:	20000344 	.word	0x20000344
 8002ef4:	0800cae8 	.word	0x0800cae8
 8002ef8:	20000618 	.word	0x20000618
 8002efc:	200007a8 	.word	0x200007a8
 8002f00:	200007aa 	.word	0x200007aa
 8002f04:	200004c8 	.word	0x200004c8
 8002f08:	42c80000 	.word	0x42c80000
 8002f0c:	40590000 	.word	0x40590000
 8002f10:	0800cb14 	.word	0x0800cb14
 8002f14:	0800cb44 	.word	0x0800cb44
 8002f18:	200004cc 	.word	0x200004cc
 8002f1c:	42dc0000 	.word	0x42dc0000
 8002f20:	405b8000 	.word	0x405b8000
 8002f24:	0800cb74 	.word	0x0800cb74
 8002f28:	0800cba4 	.word	0x0800cba4
				} else if (humidity < HUMIDITY_THRES_LOW) {
 8002f2c:	4b94      	ldr	r3, [pc, #592]	; (8003180 <trm_event+0x1050>)
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003184 <trm_event+0x1054>
 8002f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3e:	d53b      	bpl.n	8002fb8 <trm_event+0xe88>
					sprintf(tele_message, "H:%.2f%% rH, below threshold of %.2f%% rH.\r\n", humidity, HUMIDITY_THRES_LOW);
 8002f40:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <trm_event+0x1050>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd faff 	bl	8000548 <__aeabi_f2d>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	f04f 0000 	mov.w	r0, #0
 8002f52:	498d      	ldr	r1, [pc, #564]	; (8003188 <trm_event+0x1058>)
 8002f54:	e9cd 0100 	strd	r0, r1, [sp]
 8002f58:	498c      	ldr	r1, [pc, #560]	; (800318c <trm_event+0x105c>)
 8002f5a:	488d      	ldr	r0, [pc, #564]	; (8003190 <trm_event+0x1060>)
 8002f5c:	f006 f9be 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002f60:	488b      	ldr	r0, [pc, #556]	; (8003190 <trm_event+0x1060>)
 8002f62:	f7fd f985 	bl	8000270 <strlen>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6e:	4988      	ldr	r1, [pc, #544]	; (8003190 <trm_event+0x1060>)
 8002f70:	4888      	ldr	r0, [pc, #544]	; (8003194 <trm_event+0x1064>)
 8002f72:	f004 fc6f 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "H:%.2f%% rH, below threshold of %.2f%% rH.\r", humidity, HUMIDITY_THRES_LOW);
 8002f76:	4b82      	ldr	r3, [pc, #520]	; (8003180 <trm_event+0x1050>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fae4 	bl	8000548 <__aeabi_f2d>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	497f      	ldr	r1, [pc, #508]	; (8003188 <trm_event+0x1058>)
 8002f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8002f8e:	4982      	ldr	r1, [pc, #520]	; (8003198 <trm_event+0x1068>)
 8002f90:	4882      	ldr	r0, [pc, #520]	; (800319c <trm_event+0x106c>)
 8002f92:	f006 f9a3 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8002f96:	4881      	ldr	r0, [pc, #516]	; (800319c <trm_event+0x106c>)
 8002f98:	f7fd f96a 	bl	8000270 <strlen>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4b7e      	ldr	r3, [pc, #504]	; (80031a0 <trm_event+0x1070>)
 8002fa8:	497c      	ldr	r1, [pc, #496]	; (800319c <trm_event+0x106c>)
 8002faa:	2001      	movs	r0, #1
 8002fac:	f000 ffd8 	bl	8003f60 <WIFI_SendData>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <trm_event+0x1074>)
 8002fb6:	701a      	strb	r2, [r3, #0]
				if (gyro > GYRO_THRES) {
 8002fb8:	4b7b      	ldr	r3, [pc, #492]	; (80031a8 <trm_event+0x1078>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80031ac <trm_event+0x107c>
 8002fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	dd3b      	ble.n	8003044 <trm_event+0xf14>
					sprintf(tele_message, "G:%.2f dps, exceeds threshold of %.2f dps.\r\n", gyro, GYRO_THRES);
 8002fcc:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <trm_event+0x1078>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fab9 	bl	8000548 <__aeabi_f2d>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	a165      	add	r1, pc, #404	; (adr r1, 8003170 <trm_event+0x1040>)
 8002fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8002fe4:	4972      	ldr	r1, [pc, #456]	; (80031b0 <trm_event+0x1080>)
 8002fe6:	486a      	ldr	r0, [pc, #424]	; (8003190 <trm_event+0x1060>)
 8002fe8:	f006 f978 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 8002fec:	4868      	ldr	r0, [pc, #416]	; (8003190 <trm_event+0x1060>)
 8002fee:	f7fd f93f 	bl	8000270 <strlen>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <trm_event+0x1060>)
 8002ffc:	4865      	ldr	r0, [pc, #404]	; (8003194 <trm_event+0x1064>)
 8002ffe:	f004 fc29 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "G:%.2f dps, exceeds threshold of %.2f dps.\r", gyro, GYRO_THRES);
 8003002:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <trm_event+0x1078>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	a157      	add	r1, pc, #348	; (adr r1, 8003170 <trm_event+0x1040>)
 8003012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003016:	e9cd 0100 	strd	r0, r1, [sp]
 800301a:	4966      	ldr	r1, [pc, #408]	; (80031b4 <trm_event+0x1084>)
 800301c:	485f      	ldr	r0, [pc, #380]	; (800319c <trm_event+0x106c>)
 800301e:	f006 f95d 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003022:	485e      	ldr	r0, [pc, #376]	; (800319c <trm_event+0x106c>)
 8003024:	f7fd f924 	bl	8000270 <strlen>
 8003028:	4603      	mov	r3, r0
 800302a:	b29a      	uxth	r2, r3
 800302c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4b5b      	ldr	r3, [pc, #364]	; (80031a0 <trm_event+0x1070>)
 8003034:	4959      	ldr	r1, [pc, #356]	; (800319c <trm_event+0x106c>)
 8003036:	2001      	movs	r0, #1
 8003038:	f000 ff92 	bl	8003f60 <WIFI_SendData>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	4b58      	ldr	r3, [pc, #352]	; (80031a4 <trm_event+0x1074>)
 8003042:	701a      	strb	r2, [r3, #0]
				if (magneto > MAGNETO_THRES) {
 8003044:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <trm_event+0x1088>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa7d 	bl	8000548 <__aeabi_f2d>
 800304e:	a34a      	add	r3, pc, #296	; (adr r3, 8003178 <trm_event+0x1048>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03b      	beq.n	80030d6 <trm_event+0xfa6>
					sprintf(tele_message, "M(Y):%.2f T, exceeds threshold of %.2f T.\r\n", magneto, MAGNETO_THRES);
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <trm_event+0x1088>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa70 	bl	8000548 <__aeabi_f2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	a142      	add	r1, pc, #264	; (adr r1, 8003178 <trm_event+0x1048>)
 800306e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003072:	e9cd 0100 	strd	r0, r1, [sp]
 8003076:	4951      	ldr	r1, [pc, #324]	; (80031bc <trm_event+0x108c>)
 8003078:	4845      	ldr	r0, [pc, #276]	; (8003190 <trm_event+0x1060>)
 800307a:	f006 f92f 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 800307e:	4844      	ldr	r0, [pc, #272]	; (8003190 <trm_event+0x1060>)
 8003080:	f7fd f8f6 	bl	8000270 <strlen>
 8003084:	4603      	mov	r3, r0
 8003086:	b29a      	uxth	r2, r3
 8003088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800308c:	4940      	ldr	r1, [pc, #256]	; (8003190 <trm_event+0x1060>)
 800308e:	4841      	ldr	r0, [pc, #260]	; (8003194 <trm_event+0x1064>)
 8003090:	f004 fbe0 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "M(Y):%.2f T, exceeds threshold of %.2f T.\r", magneto, MAGNETO_THRES);
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <trm_event+0x1088>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa55 	bl	8000548 <__aeabi_f2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	a135      	add	r1, pc, #212	; (adr r1, 8003178 <trm_event+0x1048>)
 80030a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030a8:	e9cd 0100 	strd	r0, r1, [sp]
 80030ac:	4944      	ldr	r1, [pc, #272]	; (80031c0 <trm_event+0x1090>)
 80030ae:	483b      	ldr	r0, [pc, #236]	; (800319c <trm_event+0x106c>)
 80030b0:	f006 f914 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 80030b4:	4839      	ldr	r0, [pc, #228]	; (800319c <trm_event+0x106c>)
 80030b6:	f7fd f8db 	bl	8000270 <strlen>
 80030ba:	4603      	mov	r3, r0
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f242 7310 	movw	r3, #10000	; 0x2710
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <trm_event+0x1070>)
 80030c6:	4935      	ldr	r1, [pc, #212]	; (800319c <trm_event+0x106c>)
 80030c8:	2001      	movs	r0, #1
 80030ca:	f000 ff49 	bl	8003f60 <WIFI_SendData>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <trm_event+0x1074>)
 80030d4:	701a      	strb	r2, [r3, #0]
		if (last == 1 && (HAL_GetTick() - rescue_time) < 10000) { //With the Last_of_EE2028 and waiting for rescue in 10 secs
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <trm_event+0x1094>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12e      	bne.n	800313c <trm_event+0x100c>
 80030de:	f002 f8f7 	bl	80052d0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <trm_event+0x1098>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d824      	bhi.n	800313c <trm_event+0x100c>
			sprintf(tele_message, "Drone Was Attacked\r\n");
 80030f2:	4936      	ldr	r1, [pc, #216]	; (80031cc <trm_event+0x109c>)
 80030f4:	4826      	ldr	r0, [pc, #152]	; (8003190 <trm_event+0x1060>)
 80030f6:	f006 f8f1 	bl	80092dc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tele_message, strlen(tele_message), 0xFFFF);
 80030fa:	4825      	ldr	r0, [pc, #148]	; (8003190 <trm_event+0x1060>)
 80030fc:	f7fd f8b8 	bl	8000270 <strlen>
 8003100:	4603      	mov	r3, r0
 8003102:	b29a      	uxth	r2, r3
 8003104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003108:	4921      	ldr	r1, [pc, #132]	; (8003190 <trm_event+0x1060>)
 800310a:	4822      	ldr	r0, [pc, #136]	; (8003194 <trm_event+0x1064>)
 800310c:	f004 fba2 	bl	8007854 <HAL_UART_Transmit>
			sprintf((char*)req, "Drone Was Attacked\r");
 8003110:	492f      	ldr	r1, [pc, #188]	; (80031d0 <trm_event+0x10a0>)
 8003112:	4822      	ldr	r0, [pc, #136]	; (800319c <trm_event+0x106c>)
 8003114:	f006 f8e2 	bl	80092dc <siprintf>
			WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003118:	4820      	ldr	r0, [pc, #128]	; (800319c <trm_event+0x106c>)
 800311a:	f7fd f8a9 	bl	8000270 <strlen>
 800311e:	4603      	mov	r3, r0
 8003120:	b29a      	uxth	r2, r3
 8003122:	f242 7310 	movw	r3, #10000	; 0x2710
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <trm_event+0x1070>)
 800312a:	491c      	ldr	r1, [pc, #112]	; (800319c <trm_event+0x106c>)
 800312c:	2001      	movs	r0, #1
 800312e:	f000 ff17 	bl	8003f60 <WIFI_SendData>
 8003132:	4603      	mov	r3, r0
 8003134:	461a      	mov	r2, r3
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <trm_event+0x1074>)
 8003138:	701a      	strb	r2, [r3, #0]
		break;
 800313a:	e010      	b.n	800315e <trm_event+0x102e>
		} else if (last == 1 && (HAL_GetTick() - rescue_time) > 10000) { //With the Last_of_EE2028 and rescue not given in 10 secs
 800313c:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <trm_event+0x1094>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10c      	bne.n	800315e <trm_event+0x102e>
 8003144:	f002 f8c4 	bl	80052d0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <trm_event+0x1098>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f242 7210 	movw	r2, #10000	; 0x2710
 8003154:	4293      	cmp	r3, r2
 8003156:	d902      	bls.n	800315e <trm_event+0x102e>
			on = 0; //KILL program by exiting while loop
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <trm_event+0x10a4>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
		break;
 800315e:	bf00      	nop
	}
}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w
 8003170:	00000000 	.word	0x00000000
 8003174:	4075e000 	.word	0x4075e000
 8003178:	5c28f5c3 	.word	0x5c28f5c3
 800317c:	bfc5c28f 	.word	0xbfc5c28f
 8003180:	200004cc 	.word	0x200004cc
 8003184:	42200000 	.word	0x42200000
 8003188:	40440000 	.word	0x40440000
 800318c:	0800cbd4 	.word	0x0800cbd4
 8003190:	200003f0 	.word	0x200003f0
 8003194:	20000344 	.word	0x20000344
 8003198:	0800cc04 	.word	0x0800cc04
 800319c:	20000618 	.word	0x20000618
 80031a0:	200007a8 	.word	0x200007a8
 80031a4:	200007aa 	.word	0x200007aa
 80031a8:	200004bc 	.word	0x200004bc
 80031ac:	43af0000 	.word	0x43af0000
 80031b0:	0800c9ac 	.word	0x0800c9ac
 80031b4:	0800c9dc 	.word	0x0800c9dc
 80031b8:	200004c0 	.word	0x200004c0
 80031bc:	0800ca08 	.word	0x0800ca08
 80031c0:	0800ca34 	.word	0x0800ca34
 80031c4:	200003c8 	.word	0x200003c8
 80031c8:	200004d8 	.word	0x200004d8
 80031cc:	0800cda8 	.word	0x0800cda8
 80031d0:	0800cdc0 	.word	0x0800cdc0
 80031d4:	20000000 	.word	0x20000000

080031d8 <led_event>:


/*LED handler*/
void led_event()
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	switch(mode) {
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <led_event+0x74>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <led_event+0x12>
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d004      	beq.n	80031f2 <led_event+0x1a>
					led_last_toggle = HAL_GetTick();
				}
			}
			break;
		default:
			break;
 80031e8:	e02e      	b.n	8003248 <led_event+0x70>
			BSP_LED_On(LED2);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f000 ff34 	bl	8004058 <BSP_LED_On>
			break;
 80031f0:	e02a      	b.n	8003248 <led_event+0x70>
			if (last == 0) { //Without the Last of EE2028: Toggle LED every 1 sec
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <led_event+0x78>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d111      	bne.n	800321e <led_event+0x46>
				if (HAL_GetTick() - led_last_toggle > 500) {
 80031fa:	f002 f869 	bl	80052d0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <led_event+0x7c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800320a:	d91c      	bls.n	8003246 <led_event+0x6e>
					BSP_LED_Toggle(LED2);
 800320c:	2000      	movs	r0, #0
 800320e:	f000 ff4f 	bl	80040b0 <BSP_LED_Toggle>
					led_last_toggle = HAL_GetTick();
 8003212:	f002 f85d 	bl	80052d0 <HAL_GetTick>
 8003216:	4603      	mov	r3, r0
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <led_event+0x7c>)
 800321a:	6013      	str	r3, [r2, #0]
			break;
 800321c:	e013      	b.n	8003246 <led_event+0x6e>
			} else if (last == 1) { //With the Last of EE2028: Toggle LED every 0.5 sec
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <led_event+0x78>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10f      	bne.n	8003246 <led_event+0x6e>
				if (HAL_GetTick() - led_last_toggle > 250) {
 8003226:	f002 f853 	bl	80052d0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <led_event+0x7c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2bfa      	cmp	r3, #250	; 0xfa
 8003234:	d907      	bls.n	8003246 <led_event+0x6e>
					BSP_LED_Toggle(LED2);
 8003236:	2000      	movs	r0, #0
 8003238:	f000 ff3a 	bl	80040b0 <BSP_LED_Toggle>
					led_last_toggle = HAL_GetTick();
 800323c:	f002 f848 	bl	80052d0 <HAL_GetTick>
 8003240:	4603      	mov	r3, r0
 8003242:	4a04      	ldr	r2, [pc, #16]	; (8003254 <led_event+0x7c>)
 8003244:	6013      	str	r3, [r2, #0]
			break;
 8003246:	bf00      	nop
	}
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	200003c4 	.word	0x200003c4
 8003250:	200003c8 	.word	0x200003c8
 8003254:	200003ec 	.word	0x200003ec

08003258 <pb_controller>:


/*Pushbutton handler*/
void pb_controller()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af02      	add	r7, sp, #8
	switch(pb_count) {
 800325e:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <pb_controller+0x170>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d002      	beq.n	800326c <pb_controller+0x14>
 8003266:	2b02      	cmp	r3, #2
 8003268:	d02e      	beq.n	80032c8 <pb_controller+0x70>
					pb_count = 0;
				}
			}
			break;
		default:
			break;
 800326a:	e0aa      	b.n	80033c2 <pb_controller+0x16a>
			if ((HAL_GetTick() - single_press_timer) > 500){
 800326c:	f002 f830 	bl	80052d0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	4b56      	ldr	r3, [pc, #344]	; (80033cc <pb_controller+0x174>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800327c:	f240 809e 	bls.w	80033bc <pb_controller+0x164>
				if (mode == 0) { //STANDBY_MODE
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <pb_controller+0x178>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <pb_controller+0x38>
					pb_count = 0; //Single press ignored, reset to default
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <pb_controller+0x170>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
			break;
 800328e:	e095      	b.n	80033bc <pb_controller+0x164>
				} else if (mode == 1 && last == 0) { //BATTLE_MODE without the Last_of_EE2028
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <pb_controller+0x178>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10a      	bne.n	80032ae <pb_controller+0x56>
 8003298:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <pb_controller+0x17c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <pb_controller+0x56>
					charge = 1; //Initiate lasergun charging
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <pb_controller+0x180>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
					pb_count = 0;
 80032a6:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <pb_controller+0x170>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
			break;
 80032ac:	e086      	b.n	80033bc <pb_controller+0x164>
				} else if (mode == 1 && last == 1) { //BATTLE_MODE with the Last_of_EE2028
 80032ae:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <pb_controller+0x178>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 8082 	bne.w	80033bc <pb_controller+0x164>
 80032b8:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <pb_controller+0x17c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d17d      	bne.n	80033bc <pb_controller+0x164>
					pb_count = 0; //Single press ignored, reset to default
 80032c0:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <pb_controller+0x170>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
			break;
 80032c6:	e079      	b.n	80033bc <pb_controller+0x164>
			if ((HAL_GetTick() - single_press_timer) > 500){
 80032c8:	f002 f802 	bl	80052d0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <pb_controller+0x174>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032d8:	d972      	bls.n	80033c0 <pb_controller+0x168>
				if (mode == 0) { //STANDBY_MODE
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <pb_controller+0x178>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d12a      	bne.n	8003338 <pb_controller+0xe0>
					mode = 1; //Change to BATTLE_MODE
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <pb_controller+0x178>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
					sprintf(mode_message, "Entering BATTLE MODE.\r\n");
 80032e8:	493c      	ldr	r1, [pc, #240]	; (80033dc <pb_controller+0x184>)
 80032ea:	483d      	ldr	r0, [pc, #244]	; (80033e0 <pb_controller+0x188>)
 80032ec:	f005 fff6 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)mode_message, strlen(mode_message), 0xFFFF);
 80032f0:	483b      	ldr	r0, [pc, #236]	; (80033e0 <pb_controller+0x188>)
 80032f2:	f7fc ffbd 	bl	8000270 <strlen>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032fe:	4938      	ldr	r1, [pc, #224]	; (80033e0 <pb_controller+0x188>)
 8003300:	4838      	ldr	r0, [pc, #224]	; (80033e4 <pb_controller+0x18c>)
 8003302:	f004 faa7 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "Entering BATTLE MODE.\r");
 8003306:	4938      	ldr	r1, [pc, #224]	; (80033e8 <pb_controller+0x190>)
 8003308:	4838      	ldr	r0, [pc, #224]	; (80033ec <pb_controller+0x194>)
 800330a:	f005 ffe7 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 800330e:	4837      	ldr	r0, [pc, #220]	; (80033ec <pb_controller+0x194>)
 8003310:	f7fc ffae 	bl	8000270 <strlen>
 8003314:	4603      	mov	r3, r0
 8003316:	b29a      	uxth	r2, r3
 8003318:	f242 7310 	movw	r3, #10000	; 0x2710
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <pb_controller+0x198>)
 8003320:	4932      	ldr	r1, [pc, #200]	; (80033ec <pb_controller+0x194>)
 8003322:	2001      	movs	r0, #1
 8003324:	f000 fe1c 	bl	8003f60 <WIFI_SendData>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <pb_controller+0x19c>)
 800332e:	701a      	strb	r2, [r3, #0]
					pb_count = 0;
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <pb_controller+0x170>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
			break;
 8003336:	e043      	b.n	80033c0 <pb_controller+0x168>
				} else if (mode == 1 && last == 0) { //BATTLE_MODE without the Last_of_EE2028
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <pb_controller+0x178>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d12e      	bne.n	800339e <pb_controller+0x146>
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <pb_controller+0x17c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12a      	bne.n	800339e <pb_controller+0x146>
					mode = 0; //Change to STANDBY_MODE
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <pb_controller+0x178>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
					sprintf(mode_message, "Entering STANDBY MODE.\r\n");
 800334e:	492a      	ldr	r1, [pc, #168]	; (80033f8 <pb_controller+0x1a0>)
 8003350:	4823      	ldr	r0, [pc, #140]	; (80033e0 <pb_controller+0x188>)
 8003352:	f005 ffc3 	bl	80092dc <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)mode_message, strlen(mode_message), 0xFFFF);
 8003356:	4822      	ldr	r0, [pc, #136]	; (80033e0 <pb_controller+0x188>)
 8003358:	f7fc ff8a 	bl	8000270 <strlen>
 800335c:	4603      	mov	r3, r0
 800335e:	b29a      	uxth	r2, r3
 8003360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003364:	491e      	ldr	r1, [pc, #120]	; (80033e0 <pb_controller+0x188>)
 8003366:	481f      	ldr	r0, [pc, #124]	; (80033e4 <pb_controller+0x18c>)
 8003368:	f004 fa74 	bl	8007854 <HAL_UART_Transmit>
					sprintf((char*)req, "Entering STANDBY MODE.\r");
 800336c:	4923      	ldr	r1, [pc, #140]	; (80033fc <pb_controller+0x1a4>)
 800336e:	481f      	ldr	r0, [pc, #124]	; (80033ec <pb_controller+0x194>)
 8003370:	f005 ffb4 	bl	80092dc <siprintf>
					WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003374:	481d      	ldr	r0, [pc, #116]	; (80033ec <pb_controller+0x194>)
 8003376:	f7fc ff7b 	bl	8000270 <strlen>
 800337a:	4603      	mov	r3, r0
 800337c:	b29a      	uxth	r2, r3
 800337e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <pb_controller+0x198>)
 8003386:	4919      	ldr	r1, [pc, #100]	; (80033ec <pb_controller+0x194>)
 8003388:	2001      	movs	r0, #1
 800338a:	f000 fde9 	bl	8003f60 <WIFI_SendData>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <pb_controller+0x19c>)
 8003394:	701a      	strb	r2, [r3, #0]
					pb_count = 0;
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <pb_controller+0x170>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
			break;
 800339c:	e010      	b.n	80033c0 <pb_controller+0x168>
				} else if (mode == 1 && last == 1) { //BATTLE_MODE with the Last_of_EE2028
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <pb_controller+0x178>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10c      	bne.n	80033c0 <pb_controller+0x168>
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <pb_controller+0x17c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <pb_controller+0x168>
					last = 0; //Received rescue
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <pb_controller+0x17c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
					pb_count = 0;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <pb_controller+0x170>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
			break;
 80033ba:	e001      	b.n	80033c0 <pb_controller+0x168>
			break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <pb_controller+0x16a>
			break;
 80033c0:	bf00      	nop
	}
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200004dc 	.word	0x200004dc
 80033cc:	200004e0 	.word	0x200004e0
 80033d0:	200003c4 	.word	0x200003c4
 80033d4:	200003c8 	.word	0x200003c8
 80033d8:	200004e8 	.word	0x200004e8
 80033dc:	0800cdd4 	.word	0x0800cdd4
 80033e0:	200003cc 	.word	0x200003cc
 80033e4:	20000344 	.word	0x20000344
 80033e8:	0800cdec 	.word	0x0800cdec
 80033ec:	20000618 	.word	0x20000618
 80033f0:	200007a8 	.word	0x200007a8
 80033f4:	200007aa 	.word	0x200007aa
 80033f8:	0800ce04 	.word	0x0800ce04
 80033fc:	0800ce20 	.word	0x0800ce20

08003400 <last_of_ee2028>:


/*Rescue handler for Last of EE2028*/
void last_of_ee2028()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	if (mode == 1 && last == 0 && (accel < ACCEL_THRES)) {
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <last_of_ee2028+0x3c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d114      	bne.n	8003436 <last_of_ee2028+0x36>
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <last_of_ee2028+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d110      	bne.n	8003436 <last_of_ee2028+0x36>
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <last_of_ee2028+0x44>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d400      	bmi.n	8003426 <last_of_ee2028+0x26>
		//sprintf(debug, "flipped");
		//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
		last = 1; //Change to with the Last_of_EE2028
		rescue_time = HAL_GetTick(); //Record timestamp of flipped drone
	}
}
 8003424:	e007      	b.n	8003436 <last_of_ee2028+0x36>
		last = 1; //Change to with the Last_of_EE2028
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <last_of_ee2028+0x40>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]
		rescue_time = HAL_GetTick(); //Record timestamp of flipped drone
 800342c:	f001 ff50 	bl	80052d0 <HAL_GetTick>
 8003430:	4603      	mov	r3, r0
 8003432:	4a05      	ldr	r2, [pc, #20]	; (8003448 <last_of_ee2028+0x48>)
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200003c4 	.word	0x200003c4
 8003440:	200003c8 	.word	0x200003c8
 8003444:	200004d4 	.word	0x200004d4
 8003448:	200004d8 	.word	0x200004d8

0800344c <lasergun_event>:
		}
	}
} */

void lasergun_event()
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af02      	add	r7, sp, #8
	if (mode == 1 && last == 0) { //BATTLE_MODE without the Last_of_EE2028
 8003452:	4b4e      	ldr	r3, [pc, #312]	; (800358c <lasergun_event+0x140>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	f040 8094 	bne.w	8003584 <lasergun_event+0x138>
 800345c:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <lasergun_event+0x144>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 808f 	bne.w	8003584 <lasergun_event+0x138>
		if (charge == 1) { //Initiated by single press
 8003466:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <lasergun_event+0x148>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	f040 808a 	bne.w	8003584 <lasergun_event+0x138>
			sprintf(debug, "Charging...\r\n");
 8003470:	4949      	ldr	r1, [pc, #292]	; (8003598 <lasergun_event+0x14c>)
 8003472:	484a      	ldr	r0, [pc, #296]	; (800359c <lasergun_event+0x150>)
 8003474:	f005 ff32 	bl	80092dc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
 8003478:	4848      	ldr	r0, [pc, #288]	; (800359c <lasergun_event+0x150>)
 800347a:	f7fc fef9 	bl	8000270 <strlen>
 800347e:	4603      	mov	r3, r0
 8003480:	b29a      	uxth	r2, r3
 8003482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003486:	4945      	ldr	r1, [pc, #276]	; (800359c <lasergun_event+0x150>)
 8003488:	4845      	ldr	r0, [pc, #276]	; (80035a0 <lasergun_event+0x154>)
 800348a:	f004 f9e3 	bl	8007854 <HAL_UART_Transmit>
			sprintf((char*)req, "Charging...\r");
 800348e:	4945      	ldr	r1, [pc, #276]	; (80035a4 <lasergun_event+0x158>)
 8003490:	4845      	ldr	r0, [pc, #276]	; (80035a8 <lasergun_event+0x15c>)
 8003492:	f005 ff23 	bl	80092dc <siprintf>
			WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003496:	4844      	ldr	r0, [pc, #272]	; (80035a8 <lasergun_event+0x15c>)
 8003498:	f7fc feea 	bl	8000270 <strlen>
 800349c:	4603      	mov	r3, r0
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <lasergun_event+0x160>)
 80034a8:	493f      	ldr	r1, [pc, #252]	; (80035a8 <lasergun_event+0x15c>)
 80034aa:	2001      	movs	r0, #1
 80034ac:	f000 fd58 	bl	8003f60 <WIFI_SendData>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b3e      	ldr	r3, [pc, #248]	; (80035b0 <lasergun_event+0x164>)
 80034b6:	701a      	strb	r2, [r3, #0]
			lasergun_energy += LASERGUN_CHARGE; //Charge lasergun
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <lasergun_event+0x168>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3303      	adds	r3, #3
 80034be:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <lasergun_event+0x168>)
 80034c0:	6013      	str	r3, [r2, #0]
			if (lasergun_energy > 10) { //Check if lasergun energy is more than capacity after charging
 80034c2:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <lasergun_event+0x168>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b0a      	cmp	r3, #10
 80034c8:	dd02      	ble.n	80034d0 <lasergun_event+0x84>
				lasergun_energy = LASERGUN_CAP;
 80034ca:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <lasergun_event+0x168>)
 80034cc:	220a      	movs	r2, #10
 80034ce:	601a      	str	r2, [r3, #0]
			}
			sprintf(debug, "Charged! %d out of 10.\r\n", lasergun_energy);
 80034d0:	4b38      	ldr	r3, [pc, #224]	; (80035b4 <lasergun_event+0x168>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4938      	ldr	r1, [pc, #224]	; (80035b8 <lasergun_event+0x16c>)
 80034d8:	4830      	ldr	r0, [pc, #192]	; (800359c <lasergun_event+0x150>)
 80034da:	f005 feff 	bl	80092dc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
 80034de:	482f      	ldr	r0, [pc, #188]	; (800359c <lasergun_event+0x150>)
 80034e0:	f7fc fec6 	bl	8000270 <strlen>
 80034e4:	4603      	mov	r3, r0
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ec:	492b      	ldr	r1, [pc, #172]	; (800359c <lasergun_event+0x150>)
 80034ee:	482c      	ldr	r0, [pc, #176]	; (80035a0 <lasergun_event+0x154>)
 80034f0:	f004 f9b0 	bl	8007854 <HAL_UART_Transmit>
			sprintf((char*)req, "Charged! %d out of 10.\r", lasergun_energy);
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <lasergun_event+0x168>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4930      	ldr	r1, [pc, #192]	; (80035bc <lasergun_event+0x170>)
 80034fc:	482a      	ldr	r0, [pc, #168]	; (80035a8 <lasergun_event+0x15c>)
 80034fe:	f005 feed 	bl	80092dc <siprintf>
			WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003502:	4829      	ldr	r0, [pc, #164]	; (80035a8 <lasergun_event+0x15c>)
 8003504:	f7fc feb4 	bl	8000270 <strlen>
 8003508:	4603      	mov	r3, r0
 800350a:	b29a      	uxth	r2, r3
 800350c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <lasergun_event+0x160>)
 8003514:	4924      	ldr	r1, [pc, #144]	; (80035a8 <lasergun_event+0x15c>)
 8003516:	2001      	movs	r0, #1
 8003518:	f000 fd22 	bl	8003f60 <WIFI_SendData>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <lasergun_event+0x164>)
 8003522:	701a      	strb	r2, [r3, #0]
			charge = 0; //Reset charge counter
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <lasergun_event+0x148>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
			if (lasergun_energy >= 5) { //Automatically fire when lasergun has more than 5 energy
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <lasergun_event+0x168>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b04      	cmp	r3, #4
 8003530:	dd28      	ble.n	8003584 <lasergun_event+0x138>
				lasergun_energy -= LASERGUN_FIRE;
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <lasergun_event+0x168>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3b05      	subs	r3, #5
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <lasergun_event+0x168>)
 800353a:	6013      	str	r3, [r2, #0]
				sprintf(debug, "Firing.\r\n");
 800353c:	4920      	ldr	r1, [pc, #128]	; (80035c0 <lasergun_event+0x174>)
 800353e:	4817      	ldr	r0, [pc, #92]	; (800359c <lasergun_event+0x150>)
 8003540:	f005 fecc 	bl	80092dc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
 8003544:	4815      	ldr	r0, [pc, #84]	; (800359c <lasergun_event+0x150>)
 8003546:	f7fc fe93 	bl	8000270 <strlen>
 800354a:	4603      	mov	r3, r0
 800354c:	b29a      	uxth	r2, r3
 800354e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003552:	4912      	ldr	r1, [pc, #72]	; (800359c <lasergun_event+0x150>)
 8003554:	4812      	ldr	r0, [pc, #72]	; (80035a0 <lasergun_event+0x154>)
 8003556:	f004 f97d 	bl	8007854 <HAL_UART_Transmit>
				sprintf((char*)req, "Firing.\r");
 800355a:	491a      	ldr	r1, [pc, #104]	; (80035c4 <lasergun_event+0x178>)
 800355c:	4812      	ldr	r0, [pc, #72]	; (80035a8 <lasergun_event+0x15c>)
 800355e:	f005 febd 	bl	80092dc <siprintf>
				WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003562:	4811      	ldr	r0, [pc, #68]	; (80035a8 <lasergun_event+0x15c>)
 8003564:	f7fc fe84 	bl	8000270 <strlen>
 8003568:	4603      	mov	r3, r0
 800356a:	b29a      	uxth	r2, r3
 800356c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <lasergun_event+0x160>)
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <lasergun_event+0x15c>)
 8003576:	2001      	movs	r0, #1
 8003578:	f000 fcf2 	bl	8003f60 <WIFI_SendData>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <lasergun_event+0x164>)
 8003582:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200003c4 	.word	0x200003c4
 8003590:	200003c8 	.word	0x200003c8
 8003594:	200004e8 	.word	0x200004e8
 8003598:	0800ce38 	.word	0x0800ce38
 800359c:	200004ec 	.word	0x200004ec
 80035a0:	20000344 	.word	0x20000344
 80035a4:	0800ce48 	.word	0x0800ce48
 80035a8:	20000618 	.word	0x20000618
 80035ac:	200007a8 	.word	0x200007a8
 80035b0:	200007aa 	.word	0x200007aa
 80035b4:	200004e4 	.word	0x200004e4
 80035b8:	0800ce58 	.word	0x0800ce58
 80035bc:	0800ce74 	.word	0x0800ce74
 80035c0:	0800ce8c 	.word	0x0800ce8c
 80035c4:	0800ce98 	.word	0x0800ce98

080035c8 <HAL_GPIO_EXTI_Callback>:


/*EXTI handler*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
		sprintf((char*)req, "press_count: %d, pb_count: %d\r", press_count, pb_count);
		WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
		break;
	} */

	if (GPIO_Pin == BUTTON_EXTI13_Pin){
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	d144      	bne.n	8003664 <HAL_GPIO_EXTI_Callback+0x9c>
		//sprintf(debug, "pressed\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
		static uint32_t last_press_time = 0; //Track last PB press time
		static int press_count = 0; //Count number of press in interrupt
		uint32_t current_time = HAL_GetTick(); //Store PB press time
 80035da:	f001 fe79 	bl	80052d0 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]
		uint32_t diff_time = current_time - last_press_time; //Calculate difference in time between current and last presses
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_GPIO_EXTI_Callback+0xb0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	60bb      	str	r3, [r7, #8]
		if (diff_time > 500){ //Check if difference in time is within 0.5 sec window to proceed with double press
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035f0:	d902      	bls.n	80035f8 <HAL_GPIO_EXTI_Callback+0x30>
			press_count = 0; //Reset previous press since double press time window has expired
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
		}
		press_count++; //Increase press count: 1 if single press for more than 0.5 sec, 2 if double press within 0.5 sec
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 8003600:	6013      	str	r3, [r2, #0]
		last_press_time = current_time;
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6013      	str	r3, [r2, #0]
		single_press_timer = last_press_time;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_GPIO_EXTI_Callback+0xb0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_GPIO_EXTI_Callback+0xb8>)
 800360e:	6013      	str	r3, [r2, #0]
		if (press_count == 1) {
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d103      	bne.n	8003620 <HAL_GPIO_EXTI_Callback+0x58>
			pb_count = 1; //Log that single press happened, allow pb_controller() to handle
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_GPIO_EXTI_Callback+0xbc>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00e      	b.n	800363e <HAL_GPIO_EXTI_Callback+0x76>
		} else if (press_count == 2) {
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d103      	bne.n	8003630 <HAL_GPIO_EXTI_Callback+0x68>
			pb_count = 2; //Log that double press happened, allow pb_controller() to handle
 8003628:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_GPIO_EXTI_Callback+0xbc>)
 800362a:	2202      	movs	r2, #2
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e006      	b.n	800363e <HAL_GPIO_EXTI_Callback+0x76>
		} else if (press_count > 2) {
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b02      	cmp	r3, #2
 8003636:	dd02      	ble.n	800363e <HAL_GPIO_EXTI_Callback+0x76>
			pb_count = 0; //More than 2 presses, reset pb_count to default
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_GPIO_EXTI_Callback+0xbc>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
		}
		sprintf(debug, "press_count: %d, pb_count: %d\r\n", press_count, pb_count);
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_GPIO_EXTI_Callback+0xb4>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_GPIO_EXTI_Callback+0xbc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4910      	ldr	r1, [pc, #64]	; (8003688 <HAL_GPIO_EXTI_Callback+0xc0>)
 8003648:	4810      	ldr	r0, [pc, #64]	; (800368c <HAL_GPIO_EXTI_Callback+0xc4>)
 800364a:	f005 fe47 	bl	80092dc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
 800364e:	480f      	ldr	r0, [pc, #60]	; (800368c <HAL_GPIO_EXTI_Callback+0xc4>)
 8003650:	f7fc fe0e 	bl	8000270 <strlen>
 8003654:	4603      	mov	r3, r0
 8003656:	b29a      	uxth	r2, r3
 8003658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800365c:	490b      	ldr	r1, [pc, #44]	; (800368c <HAL_GPIO_EXTI_Callback+0xc4>)
 800365e:	480c      	ldr	r0, [pc, #48]	; (8003690 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003660:	f004 f8f8 	bl	8007854 <HAL_UART_Transmit>
		//sprintf((char*)req, "press_count: %d, pb_count: %d\r", press_count, pb_count);
		//WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
	}

	if (GPIO_Pin == GPIO_PIN_1) {
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d101      	bne.n	800366e <HAL_GPIO_EXTI_Callback+0xa6>
		SPI_WIFI_ISR();
 800366a:	f7fe fc3d 	bl	8001ee8 <SPI_WIFI_ISR>
	}

}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200007ac 	.word	0x200007ac
 800367c:	200007b0 	.word	0x200007b0
 8003680:	200004e0 	.word	0x200004e0
 8003684:	200004dc 	.word	0x200004dc
 8003688:	0800cea4 	.word	0x0800cea4
 800368c:	200004ec 	.word	0x200004ec
 8003690:	20000344 	.word	0x20000344

08003694 <read_from_terminal>:


/*Last Message Handler*/
HAL_StatusTypeDef read_from_terminal(char* buffer)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    char received_char;
    uint16_t index = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	82fb      	strh	r3, [r7, #22]
    uint32_t start_time = HAL_GetTick(); //Track the start time for reading
 80036a0:	f001 fe16 	bl	80052d0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

    while (1)
    {
        if (HAL_UART_Receive(&huart1, (uint8_t *)&received_char, 1, UART_TIMEOUT_MS) == HAL_OK)
 80036a6:	f107 010f 	add.w	r1, r7, #15
 80036aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80036ae:	2201      	movs	r2, #1
 80036b0:	4816      	ldr	r0, [pc, #88]	; (800370c <read_from_terminal+0x78>)
 80036b2:	f004 f962 	bl	800797a <HAL_UART_Receive>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d114      	bne.n	80036e6 <read_from_terminal+0x52>
        {
            if (received_char == '\n' || index >= (MAX_MESSAGE_SIZE - 1)) //Only newline is returned or message more than or equals to maximum size
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b0a      	cmp	r3, #10
 80036c0:	d002      	beq.n	80036c8 <read_from_terminal+0x34>
 80036c2:	8afb      	ldrh	r3, [r7, #22]
 80036c4:	2bfe      	cmp	r3, #254	; 0xfe
 80036c6:	d906      	bls.n	80036d6 <read_from_terminal+0x42>
            {
                buffer[index] = '\0'; // Null-terminate the string
 80036c8:	8afb      	ldrh	r3, [r7, #22]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
                return HAL_OK; // Successfully received a message
 80036d2:	2300      	movs	r3, #0
 80036d4:	e016      	b.n	8003704 <read_from_terminal+0x70>
            }
            else
            {
                buffer[index] = received_char; //Store input message
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	701a      	strb	r2, [r3, #0]
                index++;
 80036e0:	8afb      	ldrh	r3, [r7, #22]
 80036e2:	3301      	adds	r3, #1
 80036e4:	82fb      	strh	r3, [r7, #22]
            }
        }
        if ((HAL_GetTick() - start_time) >= UART_TIMEOUT_MS) //Check no message received within 10 secs
 80036e6:	f001 fdf3 	bl	80052d0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d9d6      	bls.n	80036a6 <read_from_terminal+0x12>
        {
            buffer[index] = '\0'; // Null-terminate the string
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
            return HAL_TIMEOUT; // Timeout occurred
 8003702:	2303      	movs	r3, #3
        }
    }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000344 	.word	0x20000344

08003710 <main>:


int main(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0c2      	sub	sp, #264	; 0x108
 8003714:	af02      	add	r7, sp, #8
	/*Reset of all peripherals, initializes sensors etc.*/
	HAL_Init();
 8003716:	f001 fd77 	bl	8005208 <HAL_Init>
	/*WiFi*/
	WiFi_Stat = WIFI_Init();
 800371a:	f000 fb99 	bl	8003e50 <WIFI_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <main+0x1bc>)
 8003724:	701a      	strb	r2, [r3, #0]
	WiFi_Stat &= WIFI_Connect(WiFi_SSID, WiFi_password, WiFi_security);
 8003726:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <main+0x1c0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6a      	ldr	r2, [pc, #424]	; (80038d4 <main+0x1c4>)
 800372c:	6811      	ldr	r1, [r2, #0]
 800372e:	2203      	movs	r2, #3
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fbb9 	bl	8003ea8 <WIFI_Connect>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	4b64      	ldr	r3, [pc, #400]	; (80038cc <main+0x1bc>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	4013      	ands	r3, r2
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b62      	ldr	r3, [pc, #392]	; (80038cc <main+0x1bc>)
 8003744:	701a      	strb	r2, [r3, #0]
	if(WiFi_Stat!=WIFI_STATUS_OK) while(1); // halt computations if a WiFi connection could not be established.
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <main+0x1bc>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d000      	beq.n	8003750 <main+0x40>
 800374e:	e7fe      	b.n	800374e <main+0x3e>
	WiFi_Stat = WIFI_OpenClientConnection(1, WIFI_TCP_PROTOCOL, "conn", ipaddr, DEST_PORT, SOURCE_PORT); // Make a TCP connection.
 8003750:	f240 73ec 	movw	r3, #2028	; 0x7ec
 8003754:	221c      	movs	r2, #28
 8003756:	9201      	str	r2, [sp, #4]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <main+0x1c8>)
 800375c:	4a5f      	ldr	r2, [pc, #380]	; (80038dc <main+0x1cc>)
 800375e:	2100      	movs	r1, #0
 8003760:	2001      	movs	r0, #1
 8003762:	f000 fbc3 	bl	8003eec <WIFI_OpenClientConnection>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	4b58      	ldr	r3, [pc, #352]	; (80038cc <main+0x1bc>)
 800376c:	701a      	strb	r2, [r3, #0]
	if(WiFi_Stat!=WIFI_STATUS_OK) while(1); // halt computations if a connection could not be established with the server
 800376e:	4b57      	ldr	r3, [pc, #348]	; (80038cc <main+0x1bc>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d000      	beq.n	8003778 <main+0x68>
 8003776:	e7fe      	b.n	8003776 <main+0x66>
	UART1_Init(); //UART Init
 8003778:	f000 f8ea 	bl	8003950 <UART1_Init>
	MX_GPIO_Init();
 800377c:	f000 f8ca 	bl	8003914 <MX_GPIO_Init>
	BSP_LED_Init(LED2); //LED2 Init
 8003780:	2000      	movs	r0, #0
 8003782:	f000 fc39 	bl	8003ff8 <BSP_LED_Init>
	BSP_GYRO_Init(); //Gyroscope Init
 8003786:	f000 fea5 	bl	80044d4 <BSP_GYRO_Init>
	BSP_MAGNETO_Init(); //Magnetometer Init
 800378a:	f000 ff2b 	bl	80045e4 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init(); //Pressure Init
 800378e:	f000 ff6d 	bl	800466c <BSP_PSENSOR_Init>
	BSP_HSENSOR_Init(); //Humidity Init
 8003792:	f000 fef9 	bl	8004588 <BSP_HSENSOR_Init>
	BSP_TSENSOR_Init(); //Temperature Init
 8003796:	f000 ff97 	bl	80046c8 <BSP_TSENSOR_Init>
	BSP_ACCELERO_Init(); //Accelerometer Init
 800379a:	f000 fe45 	bl	8004428 <BSP_ACCELERO_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI); //Pushbutton Init
 800379e:	2101      	movs	r1, #1
 80037a0:	2000      	movs	r0, #0
 80037a2:	f000 fc9b 	bl	80040dc <BSP_PB_Init>

	/*Print default MODE Message*/
	sprintf(mode_message, "Entering STANDBY MODE.\r\n");
 80037a6:	494e      	ldr	r1, [pc, #312]	; (80038e0 <main+0x1d0>)
 80037a8:	484e      	ldr	r0, [pc, #312]	; (80038e4 <main+0x1d4>)
 80037aa:	f005 fd97 	bl	80092dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)mode_message, strlen(mode_message), 0xFFFF);
 80037ae:	484d      	ldr	r0, [pc, #308]	; (80038e4 <main+0x1d4>)
 80037b0:	f7fc fd5e 	bl	8000270 <strlen>
 80037b4:	4603      	mov	r3, r0
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037bc:	4949      	ldr	r1, [pc, #292]	; (80038e4 <main+0x1d4>)
 80037be:	484a      	ldr	r0, [pc, #296]	; (80038e8 <main+0x1d8>)
 80037c0:	f004 f848 	bl	8007854 <HAL_UART_Transmit>
	sprintf((char*)req, "Entering STANDBY MODE.\r");
 80037c4:	4949      	ldr	r1, [pc, #292]	; (80038ec <main+0x1dc>)
 80037c6:	484a      	ldr	r0, [pc, #296]	; (80038f0 <main+0x1e0>)
 80037c8:	f005 fd88 	bl	80092dc <siprintf>
	WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 80037cc:	4848      	ldr	r0, [pc, #288]	; (80038f0 <main+0x1e0>)
 80037ce:	f7fc fd4f 	bl	8000270 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	4b45      	ldr	r3, [pc, #276]	; (80038f4 <main+0x1e4>)
 80037de:	4944      	ldr	r1, [pc, #272]	; (80038f0 <main+0x1e0>)
 80037e0:	2001      	movs	r0, #1
 80037e2:	f000 fbbd 	bl	8003f60 <WIFI_SendData>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b38      	ldr	r3, [pc, #224]	; (80038cc <main+0x1bc>)
 80037ec:	701a      	strb	r2, [r3, #0]

	/*Power up drone*/
	while (on)
 80037ee:	e017      	b.n	8003820 <main+0x110>
	{
		pb_controller();
 80037f0:	f7ff fd32 	bl	8003258 <pb_controller>
		//sprintf(debug, "pb_controller\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
		last_of_ee2028();
 80037f4:	f7ff fe04 	bl	8003400 <last_of_ee2028>
		//sprintf(debug, "last_of_ee2028\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
		if ((HAL_GetTick() - trm_last_sent) > 1000) { //Send telemetry reading/violation logs every 1 sec
 80037f8:	f001 fd6a 	bl	80052d0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <main+0x1e8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003808:	d906      	bls.n	8003818 <main+0x108>
			trm_event();
 800380a:	f7fe fc91 	bl	8002130 <trm_event>
			trm_last_sent = HAL_GetTick();
 800380e:	f001 fd5f 	bl	80052d0 <HAL_GetTick>
 8003812:	4603      	mov	r3, r0
 8003814:	4a38      	ldr	r2, [pc, #224]	; (80038f8 <main+0x1e8>)
 8003816:	6013      	str	r3, [r2, #0]
			//sprintf(debug,"trm_event\r\n");
			//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
		}
		led_event();
 8003818:	f7ff fcde 	bl	80031d8 <led_event>
		//sprintf(debug, "led_event\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
		lasergun_event();
 800381c:	f7ff fe16 	bl	800344c <lasergun_event>
	while (on)
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <main+0x1ec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e3      	bne.n	80037f0 <main+0xe0>
		//sprintf(debug, "lasergun_event\r\n");
		//HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
	}
	BSP_LED_Off(LED2);
 8003828:	2000      	movs	r0, #0
 800382a:	f000 fc2b 	bl	8004084 <BSP_LED_Off>
	/*UART to read 1 message from terminal before terminating*/
	sprintf(debug, "Drone not rescued. Any last message for it? (Timeout: 10 seconds)\r\n");
 800382e:	4934      	ldr	r1, [pc, #208]	; (8003900 <main+0x1f0>)
 8003830:	4834      	ldr	r0, [pc, #208]	; (8003904 <main+0x1f4>)
 8003832:	f005 fd53 	bl	80092dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
 8003836:	4833      	ldr	r0, [pc, #204]	; (8003904 <main+0x1f4>)
 8003838:	f7fc fd1a 	bl	8000270 <strlen>
 800383c:	4603      	mov	r3, r0
 800383e:	b29a      	uxth	r2, r3
 8003840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003844:	492f      	ldr	r1, [pc, #188]	; (8003904 <main+0x1f4>)
 8003846:	4828      	ldr	r0, [pc, #160]	; (80038e8 <main+0x1d8>)
 8003848:	f004 f804 	bl	8007854 <HAL_UART_Transmit>
	sprintf((char*)req, "Drone not rescued. Any last message for it? (Timeout: 10 seconds)\r");
 800384c:	492e      	ldr	r1, [pc, #184]	; (8003908 <main+0x1f8>)
 800384e:	4828      	ldr	r0, [pc, #160]	; (80038f0 <main+0x1e0>)
 8003850:	f005 fd44 	bl	80092dc <siprintf>
	WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 8003854:	4826      	ldr	r0, [pc, #152]	; (80038f0 <main+0x1e0>)
 8003856:	f7fc fd0b 	bl	8000270 <strlen>
 800385a:	4603      	mov	r3, r0
 800385c:	b29a      	uxth	r2, r3
 800385e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <main+0x1e4>)
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <main+0x1e0>)
 8003868:	2001      	movs	r0, #1
 800386a:	f000 fb79 	bl	8003f60 <WIFI_SendData>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <main+0x1bc>)
 8003874:	701a      	strb	r2, [r3, #0]
	char received_message[MAX_MESSAGE_SIZE];
	read_from_terminal(received_message);
 8003876:	463b      	mov	r3, r7
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff0b 	bl	8003694 <read_from_terminal>
	sprintf(debug, "Good luck E4-03-07, signing out.\r\n");
 800387e:	4923      	ldr	r1, [pc, #140]	; (800390c <main+0x1fc>)
 8003880:	4820      	ldr	r0, [pc, #128]	; (8003904 <main+0x1f4>)
 8003882:	f005 fd2b 	bl	80092dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 0xFFFF);
 8003886:	481f      	ldr	r0, [pc, #124]	; (8003904 <main+0x1f4>)
 8003888:	f7fc fcf2 	bl	8000270 <strlen>
 800388c:	4603      	mov	r3, r0
 800388e:	b29a      	uxth	r2, r3
 8003890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003894:	491b      	ldr	r1, [pc, #108]	; (8003904 <main+0x1f4>)
 8003896:	4814      	ldr	r0, [pc, #80]	; (80038e8 <main+0x1d8>)
 8003898:	f003 ffdc 	bl	8007854 <HAL_UART_Transmit>
	sprintf((char*)req, "Good luck E4-03-07, signing out.\r");
 800389c:	491c      	ldr	r1, [pc, #112]	; (8003910 <main+0x200>)
 800389e:	4814      	ldr	r0, [pc, #80]	; (80038f0 <main+0x1e0>)
 80038a0:	f005 fd1c 	bl	80092dc <siprintf>
	WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 80038a4:	4812      	ldr	r0, [pc, #72]	; (80038f0 <main+0x1e0>)
 80038a6:	f7fc fce3 	bl	8000270 <strlen>
 80038aa:	4603      	mov	r3, r0
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <main+0x1e4>)
 80038b6:	490e      	ldr	r1, [pc, #56]	; (80038f0 <main+0x1e0>)
 80038b8:	2001      	movs	r0, #1
 80038ba:	f000 fb51 	bl	8003f60 <WIFI_SendData>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b02      	ldr	r3, [pc, #8]	; (80038cc <main+0x1bc>)
 80038c4:	701a      	strb	r2, [r3, #0]
	exit(0);
 80038c6:	2000      	movs	r0, #0
 80038c8:	f004 ff72 	bl	80087b0 <exit>
 80038cc:	200007aa 	.word	0x200007aa
 80038d0:	20000004 	.word	0x20000004
 80038d4:	20000008 	.word	0x20000008
 80038d8:	2000000c 	.word	0x2000000c
 80038dc:	0800cec4 	.word	0x0800cec4
 80038e0:	0800ce04 	.word	0x0800ce04
 80038e4:	200003cc 	.word	0x200003cc
 80038e8:	20000344 	.word	0x20000344
 80038ec:	0800ce20 	.word	0x0800ce20
 80038f0:	20000618 	.word	0x20000618
 80038f4:	200007a8 	.word	0x200007a8
 80038f8:	200004b8 	.word	0x200004b8
 80038fc:	20000000 	.word	0x20000000
 8003900:	0800cecc 	.word	0x0800cecc
 8003904:	200004ec 	.word	0x200004ec
 8003908:	0800cf10 	.word	0x0800cf10
 800390c:	0800cf54 	.word	0x0800cf54
 8003910:	0800cf78 	.word	0x0800cf78

08003914 <MX_GPIO_Init>:
}


static void MX_GPIO_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MX_GPIO_Init+0x38>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <MX_GPIO_Init+0x38>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <MX_GPIO_Init+0x38>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003932:	2028      	movs	r0, #40	; 0x28
 8003934:	f001 fdf1 	bl	800551a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2101      	movs	r1, #1
 800393c:	2028      	movs	r0, #40	; 0x28
 800393e:	f001 fdd0 	bl	80054e2 <HAL_NVIC_SetPriority>
	//HAL_NVIC_SetPriority()
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000

08003950 <UART1_Init>:


/*UART configuration*/
static void UART1_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003956:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <UART1_Init+0xa0>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <UART1_Init+0xa0>)
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <UART1_Init+0xa0>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1; //Configure PB6 and PB7 as Alternate Function 7 (AF7)
 800397c:	2307      	movs	r3, #7
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003980:	23c0      	movs	r3, #192	; 0xc0
 8003982:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4817      	ldr	r0, [pc, #92]	; (80039f4 <UART1_Init+0xa4>)
 8003996:	f001 fe1b 	bl	80055d0 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <UART1_Init+0xa8>)
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <UART1_Init+0xac>)
 800399e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200; //Set baudrate as 115200 bits/s
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <UART1_Init+0xa8>)
 80039a2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039a6:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B; //8 bits data
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <UART1_Init+0xa8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1; //1 stop bit
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <UART1_Init+0xa8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE; //No parity
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <UART1_Init+0xa8>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <UART1_Init+0xa8>)
 80039bc:	220c      	movs	r2, #12
 80039be:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE; //No flow control
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <UART1_Init+0xa8>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <UART1_Init+0xa8>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <UART1_Init+0xa8>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <UART1_Init+0xa8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80039d8:	4807      	ldr	r0, [pc, #28]	; (80039f8 <UART1_Init+0xa8>)
 80039da:	f003 feed 	bl	80077b8 <HAL_UART_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d000      	beq.n	80039e6 <UART1_Init+0x96>
    {
      while(1);
 80039e4:	e7fe      	b.n	80039e4 <UART1_Init+0x94>
    }

}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	48000400 	.word	0x48000400
 80039f8:	20000344 	.word	0x20000344
 80039fc:	40013800 	.word	0x40013800

08003a00 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <SPI3_IRQHandler+0x10>)
 8003a06:	f003 fc4f 	bl	80072a8 <HAL_SPI_IRQHandler>
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200005b4 	.word	0x200005b4

08003a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_MspInit+0x44>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_MspInit+0x44>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6613      	str	r3, [r2, #96]	; 0x60
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_MspInit+0x44>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_MspInit+0x44>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_MspInit+0x44>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_MspInit+0x44>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_I2C_MspInit+0x7c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d128      	bne.n	8003ad0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_I2C_MspInit+0x80>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	4a16      	ldr	r2, [pc, #88]	; (8003adc <HAL_I2C_MspInit+0x80>)
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_I2C_MspInit+0x80>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003a96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a9c:	2312      	movs	r3, #18
 8003a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	480b      	ldr	r0, [pc, #44]	; (8003ae0 <HAL_I2C_MspInit+0x84>)
 8003ab4:	f001 fd8c 	bl	80055d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_I2C_MspInit+0x80>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_I2C_MspInit+0x80>)
 8003abe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_I2C_MspInit+0x80>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ad0:	bf00      	nop
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40005800 	.word	0x40005800
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	48000400 	.word	0x48000400

08003ae4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <HAL_I2C_MspDeInit+0x30>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10a      	bne.n	8003b0c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <HAL_I2C_MspDeInit+0x34>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <HAL_I2C_MspDeInit+0x34>)
 8003afc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8003b02:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <HAL_I2C_MspDeInit+0x38>)
 8003b08:	f001 ff0c 	bl	8005924 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40005800 	.word	0x40005800
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	48000400 	.word	0x48000400

08003b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_SPI_MspInit+0x7c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d128      	bne.n	8003b94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_SPI_MspInit+0x80>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_SPI_MspInit+0x80>)
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <HAL_SPI_MspInit+0x80>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_SPI_MspInit+0x80>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_SPI_MspInit+0x80>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_SPI_MspInit+0x80>)
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003b72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b80:	2303      	movs	r3, #3
 8003b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b84:	2306      	movs	r3, #6
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4805      	ldr	r0, [pc, #20]	; (8003ba4 <HAL_SPI_MspInit+0x84>)
 8003b90:	f001 fd1e 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40003c00 	.word	0x40003c00
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	48000800 	.word	0x48000800

08003ba8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <HAL_SPI_MspDeInit+0x30>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_SPI_MspDeInit+0x34>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <HAL_SPI_MspDeInit+0x34>)
 8003bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bc4:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003bc6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <HAL_SPI_MspDeInit+0x38>)
 8003bcc:	f001 feaa 	bl	8005924 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40003c00 	.word	0x40003c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	48000800 	.word	0x48000800

08003be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2e      	ldr	r2, [pc, #184]	; (8003cbc <HAL_UART_MspInit+0xd8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d128      	bne.n	8003c58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c06:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0a:	4a2d      	ldr	r2, [pc, #180]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c10:	6613      	str	r3, [r2, #96]	; 0x60
 8003c12:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1e:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003c36:	23c0      	movs	r3, #192	; 0xc0
 8003c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c42:	2303      	movs	r3, #3
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c46:	2307      	movs	r3, #7
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	481c      	ldr	r0, [pc, #112]	; (8003cc4 <HAL_UART_MspInit+0xe0>)
 8003c52:	f001 fcbd 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c56:	e02d      	b.n	8003cb4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_UART_MspInit+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d128      	bne.n	8003cb4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_UART_MspInit+0xdc>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ca4:	2307      	movs	r3, #7
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	4619      	mov	r1, r3
 8003cae:	4807      	ldr	r0, [pc, #28]	; (8003ccc <HAL_UART_MspInit+0xe8>)
 8003cb0:	f001 fc8e 	bl	80055d0 <HAL_GPIO_Init>
}
 8003cb4:	bf00      	nop
 8003cb6:	3730      	adds	r7, #48	; 0x30
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	48000400 	.word	0x48000400
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	48000c00 	.word	0x48000c00

08003cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ce2:	e7fe      	b.n	8003ce2 <HardFault_Handler+0x4>

08003ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce8:	e7fe      	b.n	8003ce8 <MemManage_Handler+0x4>

08003cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cee:	e7fe      	b.n	8003cee <BusFault_Handler+0x4>

08003cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cf4:	e7fe      	b.n	8003cf4 <UsageFault_Handler+0x4>

08003cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d24:	f001 fac2 	bl	80052ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003d30:	2020      	movs	r0, #32
 8003d32:	f001 ff35 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003d36:	2040      	movs	r0, #64	; 0x40
 8003d38:	f001 ff32 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003d3c:	2080      	movs	r0, #128	; 0x80
 8003d3e:	f001 ff2f 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003d42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d46:	f001 ff2b 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003d52:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d56:	f001 ff23 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003d5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d5e:	f001 ff1f 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d66:	f001 ff1b 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003d6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d6e:	f001 ff17 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003d72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d76:	f001 ff13 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003d82:	2002      	movs	r0, #2
 8003d84:	f001 ff0c 	bl	8005ba0 <HAL_GPIO_EXTI_IRQHandler>
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <_sbrk+0x50>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <_sbrk+0x16>
		heap_end = &end;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <_sbrk+0x50>)
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <_sbrk+0x54>)
 8003da0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <_sbrk+0x50>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <_sbrk+0x50>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	466a      	mov	r2, sp
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d907      	bls.n	8003dc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003db6:	f005 fc61 	bl	800967c <__errno>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	220c      	movs	r2, #12
 8003dbe:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	e006      	b.n	8003dd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <_sbrk+0x50>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <_sbrk+0x50>)
 8003dd0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200007b4 	.word	0x200007b4
 8003de0:	200010b8 	.word	0x200010b8

08003de4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <SystemInit+0x64>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <SystemInit+0x64>)
 8003df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <SystemInit+0x68>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <SystemInit+0x68>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <SystemInit+0x68>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <SystemInit+0x68>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <SystemInit+0x68>)
 8003e10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003e14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003e18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <SystemInit+0x68>)
 8003e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <SystemInit+0x68>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <SystemInit+0x68>)
 8003e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <SystemInit+0x68>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <SystemInit+0x64>)
 8003e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e3a:	609a      	str	r2, [r3, #8]
#endif
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000ed00 	.word	0xe000ed00
 8003e4c:	40021000 	.word	0x40021000

08003e50 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <WIFI_Init+0x40>)
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <WIFI_Init+0x44>)
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <WIFI_Init+0x48>)
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <WIFI_Init+0x4c>)
 8003e66:	490e      	ldr	r1, [pc, #56]	; (8003ea0 <WIFI_Init+0x50>)
 8003e68:	480e      	ldr	r0, [pc, #56]	; (8003ea4 <WIFI_Init+0x54>)
 8003e6a:	f7fd faff 	bl	800146c <ES_WIFI_RegisterBusIO>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003e74:	480b      	ldr	r0, [pc, #44]	; (8003ea4 <WIFI_Init+0x54>)
 8003e76:	f7fd facb 	bl	8001410 <ES_WIFI_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003e84:	79fb      	ldrb	r3, [r7, #7]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	08001c91 	.word	0x08001c91
 8003e94:	08001d75 	.word	0x08001d75
 8003e98:	08001e35 	.word	0x08001e35
 8003e9c:	08001bf9 	.word	0x08001bf9
 8003ea0:	08001a71 	.word	0x08001a71
 8003ea4:	200007b8 	.word	0x200007b8

08003ea8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <WIFI_Connect+0x40>)
 8003ec2:	f7fd fb07 	bl	80014d4 <ES_WIFI_Connect>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003ecc:	4806      	ldr	r0, [pc, #24]	; (8003ee8 <WIFI_Connect+0x40>)
 8003ece:	f7fd fb79 	bl	80015c4 <ES_WIFI_GetNetworkSettings>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200007b8 	.word	0x200007b8

08003eec <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 8003f08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f0a:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 8003f0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f0e:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	789b      	ldrb	r3, [r3, #2]
 8003f2e:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	78db      	ldrb	r3, [r3, #3]
 8003f34:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4807      	ldr	r0, [pc, #28]	; (8003f5c <WIFI_OpenClientConnection+0x70>)
 8003f3e:	f7fd fb6b 	bl	8001618 <ES_WIFI_StartClientConnection>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8003f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3728      	adds	r7, #40	; 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200007b8 	.word	0x200007b8

08003f60 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003f76:	89ba      	ldrh	r2, [r7, #12]
 8003f78:	7bf9      	ldrb	r1, [r7, #15]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <WIFI_SendData+0x40>)
 8003f88:	f7fd fc02 	bl	8001790 <ES_WIFI_SendData>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200007b8 	.word	0x200007b8

08003fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fdc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fa8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003faa:	e003      	b.n	8003fb4 <LoopCopyDataInit>

08003fac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fb2:	3104      	adds	r1, #4

08003fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fb4:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fbc:	d3f6      	bcc.n	8003fac <CopyDataInit>
	ldr	r2, =_sbss
 8003fbe:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fc0:	e002      	b.n	8003fc8 <LoopFillZerobss>

08003fc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003fc4:	f842 3b04 	str.w	r3, [r2], #4

08003fc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <LoopForever+0x16>)
	cmp	r2, r3
 8003fca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fcc:	d3f9      	bcc.n	8003fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fce:	f7ff ff09 	bl	8003de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fd2:	f005 fb59 	bl	8009688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fd6:	f7ff fb9b 	bl	8003710 <main>

08003fda <LoopForever>:

LoopForever:
    b LoopForever
 8003fda:	e7fe      	b.n	8003fda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fdc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003fe0:	0800d3e0 	.word	0x0800d3e0
	ldr	r0, =_sdata
 8003fe4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003fe8:	200002c0 	.word	0x200002c0
	ldr	r2, =_sbss
 8003fec:	200002c0 	.word	0x200002c0
	ldr	r3, = _ebss
 8003ff0:	200010b4 	.word	0x200010b4

08003ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ff4:	e7fe      	b.n	8003ff4 <ADC1_2_IRQHandler>
	...

08003ff8 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <BSP_LED_Init+0x28>
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <BSP_LED_Init+0x58>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	4a10      	ldr	r2, [pc, #64]	; (8004050 <BSP_LED_Init+0x58>)
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <BSP_LED_Init+0x58>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8004020:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004024:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004026:	2301      	movs	r3, #1
 8004028:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800402e:	2302      	movs	r3, #2
 8004030:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	4a07      	ldr	r2, [pc, #28]	; (8004054 <BSP_LED_Init+0x5c>)
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	f107 020c 	add.w	r2, r7, #12
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fac5 	bl	80055d0 <HAL_GPIO_Init>
}
 8004046:	bf00      	nop
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	20000014 	.word	0x20000014

08004058 <BSP_LED_On>:
  * @param  Led: LED to be set on 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <BSP_LED_On+0x28>)
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800406e:	b291      	uxth	r1, r2
 8004070:	2201      	movs	r2, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fd62 	bl	8005b3c <HAL_GPIO_WritePin>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000014 	.word	0x20000014

08004084 <BSP_LED_Off>:
  * @param  Led: LED to be set off
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <BSP_LED_Off+0x28>)
 8004092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800409a:	b291      	uxth	r1, r2
 800409c:	2200      	movs	r2, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 fd4c 	bl	8005b3c <HAL_GPIO_WritePin>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000014 	.word	0x20000014

080040b0 <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	4a06      	ldr	r2, [pc, #24]	; (80040d8 <BSP_LED_Toggle+0x28>)
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040c6:	b292      	uxth	r2, r2
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fd4e 	bl	8005b6c <HAL_GPIO_TogglePin>
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000014 	.word	0x20000014

080040dc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	460a      	mov	r2, r1
 80040e6:	71fb      	strb	r3, [r7, #7]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <BSP_PB_Init+0xa0>)
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <BSP_PB_Init+0xa0>)
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <BSP_PB_Init+0xa0>)
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004104:	79bb      	ldrb	r3, [r7, #6]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d112      	bne.n	8004130 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800410a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800410e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004118:	2302      	movs	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <BSP_PB_Init+0xa4>)
 8004120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004124:	f107 020c 	add.w	r2, r7, #12
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fa50 	bl	80055d0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004130:	79bb      	ldrb	r3, [r7, #6]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d11e      	bne.n	8004174 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800413a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004140:	2303      	movs	r3, #3
 8004142:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <BSP_PB_Init+0xa8>)
 8004146:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <BSP_PB_Init+0xa4>)
 800414c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fa3a 	bl	80055d0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800415c:	2328      	movs	r3, #40	; 0x28
 800415e:	b25b      	sxtb	r3, r3
 8004160:	2200      	movs	r2, #0
 8004162:	210f      	movs	r1, #15
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f9bc 	bl	80054e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800416a:	2328      	movs	r3, #40	; 0x28
 800416c:	b25b      	sxtb	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	f001 f9d3 	bl	800551a <HAL_NVIC_EnableIRQ>
  }
}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	20000018 	.word	0x20000018
 8004184:	10110000 	.word	0x10110000

08004188 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <I2Cx_MspInit+0xa8>)
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <I2Cx_MspInit+0xa8>)
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <I2Cx_MspInit+0xa8>)
 800419e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80041a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80041ae:	2312      	movs	r3, #18
 80041b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b6:	2303      	movs	r3, #3
 80041b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80041ba:	2304      	movs	r3, #4
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4619      	mov	r1, r3
 80041c4:	481b      	ldr	r0, [pc, #108]	; (8004234 <I2Cx_MspInit+0xac>)
 80041c6:	f001 fa03 	bl	80055d0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	4619      	mov	r1, r3
 80041d0:	4818      	ldr	r0, [pc, #96]	; (8004234 <I2Cx_MspInit+0xac>)
 80041d2:	f001 f9fd 	bl	80055d0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80041d6:	4b16      	ldr	r3, [pc, #88]	; (8004230 <I2Cx_MspInit+0xa8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <I2Cx_MspInit+0xa8>)
 80041dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <I2Cx_MspInit+0xa8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <I2Cx_MspInit+0xa8>)
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <I2Cx_MspInit+0xa8>)
 80041f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041f8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <I2Cx_MspInit+0xa8>)
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <I2Cx_MspInit+0xa8>)
 8004200:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004204:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004206:	2200      	movs	r2, #0
 8004208:	210f      	movs	r1, #15
 800420a:	2021      	movs	r0, #33	; 0x21
 800420c:	f001 f969 	bl	80054e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004210:	2021      	movs	r0, #33	; 0x21
 8004212:	f001 f982 	bl	800551a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004216:	2200      	movs	r2, #0
 8004218:	210f      	movs	r1, #15
 800421a:	2022      	movs	r0, #34	; 0x22
 800421c:	f001 f961 	bl	80054e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004220:	2022      	movs	r0, #34	; 0x22
 8004222:	f001 f97a 	bl	800551a <HAL_NVIC_EnableIRQ>
}
 8004226:	bf00      	nop
 8004228:	3728      	adds	r7, #40	; 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	48000400 	.word	0x48000400

08004238 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <I2Cx_Init+0x54>)
 8004244:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <I2Cx_Init+0x58>)
 800424a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff89 	bl	8004188 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fcaa 	bl	8005bd0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800427c:	2100      	movs	r1, #0
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f002 f9ae 	bl	80065e0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40005800 	.word	0x40005800
 8004290:	00702681 	.word	0x00702681

08004294 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af04      	add	r7, sp, #16
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	72fb      	strb	r3, [r7, #11]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	b299      	uxth	r1, r3
 80042b6:	88f8      	ldrh	r0, [r7, #6]
 80042b8:	893a      	ldrh	r2, [r7, #8]
 80042ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042be:	9302      	str	r3, [sp, #8]
 80042c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4603      	mov	r3, r0
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f001 fe52 	bl	8005f74 <HAL_I2C_Mem_Read>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	4619      	mov	r1, r3
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f832 	bl	8004348 <I2Cx_Error>
  }
  return status;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	; 0x28
 80042f2:	af04      	add	r7, sp, #16
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	4608      	mov	r0, r1
 80042f8:	4611      	mov	r1, r2
 80042fa:	461a      	mov	r2, r3
 80042fc:	4603      	mov	r3, r0
 80042fe:	72fb      	strb	r3, [r7, #11]
 8004300:	460b      	mov	r3, r1
 8004302:	813b      	strh	r3, [r7, #8]
 8004304:	4613      	mov	r3, r2
 8004306:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	b299      	uxth	r1, r3
 8004310:	88f8      	ldrh	r0, [r7, #6]
 8004312:	893a      	ldrh	r2, [r7, #8]
 8004314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004318:	9302      	str	r3, [sp, #8]
 800431a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4603      	mov	r3, r0
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f001 fd11 	bl	8005d4c <HAL_I2C_Mem_Write>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	4619      	mov	r1, r3
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f805 	bl	8004348 <I2Cx_Error>
  }
  return status;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 fcca 	bl	8005cee <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ff6c 	bl	8004238 <I2Cx_Init>
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <SENSOR_IO_Init+0x10>)
 800436e:	f7ff ff63 	bl	8004238 <I2Cx_Init>
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000e60 	.word	0x20000e60

0800437c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af02      	add	r7, sp, #8
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
 8004386:	460b      	mov	r3, r1
 8004388:	71bb      	strb	r3, [r7, #6]
 800438a:	4613      	mov	r3, r2
 800438c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800438e:	79bb      	ldrb	r3, [r7, #6]
 8004390:	b29a      	uxth	r2, r3
 8004392:	79f9      	ldrb	r1, [r7, #7]
 8004394:	2301      	movs	r3, #1
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	1d7b      	adds	r3, r7, #5
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2301      	movs	r3, #1
 800439e:	4803      	ldr	r0, [pc, #12]	; (80043ac <SENSOR_IO_Write+0x30>)
 80043a0:	f7ff ffa5 	bl	80042ee <I2Cx_WriteMultiple>
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000e60 	.word	0x20000e60

080043b0 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	4603      	mov	r3, r0
 80043b8:	460a      	mov	r2, r1
 80043ba:	71fb      	strb	r3, [r7, #7]
 80043bc:	4613      	mov	r3, r2
 80043be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80043c4:	79bb      	ldrb	r3, [r7, #6]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	79f9      	ldrb	r1, [r7, #7]
 80043ca:	2301      	movs	r3, #1
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	f107 030f 	add.w	r3, r7, #15
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	4804      	ldr	r0, [pc, #16]	; (80043e8 <SENSOR_IO_Read+0x38>)
 80043d8:	f7ff ff5c 	bl	8004294 <I2Cx_ReadMultiple>

  return read_value;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000e60 	.word	0x20000e60

080043ec <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	603a      	str	r2, [r7, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
 80043fa:	460b      	mov	r3, r1
 80043fc:	71bb      	strb	r3, [r7, #6]
 80043fe:	4613      	mov	r3, r2
 8004400:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004402:	79bb      	ldrb	r3, [r7, #6]
 8004404:	b29a      	uxth	r2, r3
 8004406:	79f9      	ldrb	r1, [r7, #7]
 8004408:	88bb      	ldrh	r3, [r7, #4]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2301      	movs	r3, #1
 8004412:	4804      	ldr	r0, [pc, #16]	; (8004424 <SENSOR_IO_ReadMultiple+0x38>)
 8004414:	f7ff ff3e 	bl	8004294 <I2Cx_ReadMultiple>
 8004418:	4603      	mov	r3, r0
 800441a:	b29b      	uxth	r3, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000e60 	.word	0x20000e60

08004428 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004432:	2300      	movs	r3, #0
 8004434:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <BSP_ACCELERO_Init+0x74>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4798      	blx	r3
 800443c:	4603      	mov	r3, r0
 800443e:	2b6a      	cmp	r3, #106	; 0x6a
 8004440:	d002      	beq.n	8004448 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e024      	b.n	8004492 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <BSP_ACCELERO_Init+0x78>)
 800444a:	4a14      	ldr	r2, [pc, #80]	; (800449c <BSP_ACCELERO_Init+0x74>)
 800444c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800444e:	2330      	movs	r3, #48	; 0x30
 8004450:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8004456:	2300      	movs	r3, #0
 8004458:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8004466:	797a      	ldrb	r2, [r7, #5]
 8004468:	7abb      	ldrb	r3, [r7, #10]
 800446a:	4313      	orrs	r3, r2
 800446c:	b2db      	uxtb	r3, r3
 800446e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004470:	7a3b      	ldrb	r3, [r7, #8]
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	b2db      	uxtb	r3, r3
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	b21a      	sxth	r2, r3
 800447c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	b21b      	sxth	r3, r3
 8004484:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <BSP_ACCELERO_Init+0x78>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	89ba      	ldrh	r2, [r7, #12]
 800448e:	4610      	mov	r0, r2
 8004490:	4798      	blx	r3
  }  

  return ret;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000078 	.word	0x20000078
 80044a0:	20000eac 	.word	0x20000eac

080044a4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
    }
  }
}
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000eac 	.word	0x20000eac

080044d4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80044de:	2300      	movs	r3, #0
 80044e0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <BSP_GYRO_Init+0x7c>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4798      	blx	r3
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b6a      	cmp	r3, #106	; 0x6a
 80044ec:	d002      	beq.n	80044f4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e028      	b.n	8004546 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <BSP_GYRO_Init+0x80>)
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <BSP_GYRO_Init+0x7c>)
 80044f8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80044fe:	2330      	movs	r3, #48	; 0x30
 8004500:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8004512:	230c      	movs	r3, #12
 8004514:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8004516:	7aba      	ldrb	r2, [r7, #10]
 8004518:	797b      	ldrb	r3, [r7, #5]
 800451a:	4313      	orrs	r3, r2
 800451c:	b2db      	uxtb	r3, r3
 800451e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004520:	7a3b      	ldrb	r3, [r7, #8]
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	b2db      	uxtb	r3, r3
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	b21a      	sxth	r2, r3
 800452c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	b21b      	sxth	r3, r3
 8004534:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <BSP_GYRO_Init+0x80>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	89ba      	ldrh	r2, [r7, #12]
 800453e:	4610      	mov	r0, r2
 8004540:	4798      	blx	r3
    
    ret = GYRO_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	200000ac 	.word	0x200000ac
 8004554:	20000eb0 	.word	0x20000eb0

08004558 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <BSP_GYRO_GetXYZ+0x2c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <BSP_GYRO_GetXYZ+0x2c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <BSP_GYRO_GetXYZ+0x2c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
    }
  }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000eb0 	.word	0x20000eb0

08004588 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <BSP_HSENSOR_Init+0x38>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	20be      	movs	r0, #190	; 0xbe
 8004594:	4798      	blx	r3
 8004596:	4603      	mov	r3, r0
 8004598:	2bbc      	cmp	r3, #188	; 0xbc
 800459a:	d002      	beq.n	80045a2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	e009      	b.n	80045b6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <BSP_HSENSOR_Init+0x3c>)
 80045a4:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <BSP_HSENSOR_Init+0x38>)
 80045a6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <BSP_HSENSOR_Init+0x3c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	20be      	movs	r0, #190	; 0xbe
 80045b0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80045b6:	687b      	ldr	r3, [r7, #4]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2000001c 	.word	0x2000001c
 80045c4:	20000eb4 	.word	0x20000eb4

080045c8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <BSP_HSENSOR_ReadHumidity+0x18>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	20be      	movs	r0, #190	; 0xbe
 80045d4:	4798      	blx	r3
 80045d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80045da:	eeb0 0a67 	vmov.f32	s0, s15
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000eb4 	.word	0x20000eb4

080045e4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <BSP_MAGNETO_Init+0x50>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4798      	blx	r3
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b3d      	cmp	r3, #61	; 0x3d
 80045f8:	d002      	beq.n	8004600 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	71fb      	strb	r3, [r7, #7]
 80045fe:	e013      	b.n	8004628 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <BSP_MAGNETO_Init+0x54>)
 8004602:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <BSP_MAGNETO_Init+0x50>)
 8004604:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8004606:	2358      	movs	r3, #88	; 0x58
 8004608:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800460a:	2300      	movs	r3, #0
 800460c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800460e:	2300      	movs	r3, #0
 8004610:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8004612:	2308      	movs	r3, #8
 8004614:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8004616:	2340      	movs	r3, #64	; 0x40
 8004618:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <BSP_MAGNETO_Init+0x54>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	463a      	mov	r2, r7
 8004622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004626:	4798      	blx	r3
  } 

  return ret;  
 8004628:	79fb      	ldrb	r3, [r7, #7]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000038 	.word	0x20000038
 8004638:	20000eb8 	.word	0x20000eb8

0800463c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8004644:	4b08      	ldr	r3, [pc, #32]	; (8004668 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <BSP_MAGNETO_GetXYZ+0x2c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
    }
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000eb8 	.word	0x20000eb8

0800466c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <BSP_PSENSOR_Init+0x38>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	20ba      	movs	r0, #186	; 0xba
 8004678:	4798      	blx	r3
 800467a:	4603      	mov	r3, r0
 800467c:	2bb1      	cmp	r3, #177	; 0xb1
 800467e:	d002      	beq.n	8004686 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	e009      	b.n	800469a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <BSP_PSENSOR_Init+0x3c>)
 8004688:	4a06      	ldr	r2, [pc, #24]	; (80046a4 <BSP_PSENSOR_Init+0x38>)
 800468a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <BSP_PSENSOR_Init+0x3c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	20ba      	movs	r0, #186	; 0xba
 8004694:	4798      	blx	r3
    ret = PSENSOR_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800469a:	687b      	ldr	r3, [r7, #4]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2000006c 	.word	0x2000006c
 80046a8:	20000ebc 	.word	0x20000ebc

080046ac <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <BSP_PSENSOR_ReadPressure+0x18>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	20ba      	movs	r0, #186	; 0xba
 80046b8:	4798      	blx	r3
 80046ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000ebc 	.word	0x20000ebc

080046c8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <BSP_TSENSOR_Init+0x30>)
 80046d4:	4a09      	ldr	r2, [pc, #36]	; (80046fc <BSP_TSENSOR_Init+0x34>)
 80046d6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80046d8:	f7ff fe46 	bl	8004368 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <BSP_TSENSOR_Init+0x30>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2100      	movs	r1, #0
 80046e4:	20be      	movs	r0, #190	; 0xbe
 80046e6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80046ec:	79fb      	ldrb	r3, [r7, #7]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000ec0 	.word	0x20000ec0
 80046fc:	20000028 	.word	0x20000028

08004700 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <BSP_TSENSOR_ReadTemp+0x18>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	20be      	movs	r0, #190	; 0xbe
 800470c:	4798      	blx	r3
 800470e:	eef0 7a40 	vmov.f32	s15, s0
}
 8004712:	eeb0 0a67 	vmov.f32	s0, s15
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000ec0 	.word	0x20000ec0

0800471c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2120      	movs	r1, #32
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fe3f 	bl	80043b0 <SENSOR_IO_Read>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	f023 0303 	bic.w	r3, r3, #3
 800474c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800475c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	2120      	movs	r1, #32
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fe08 	bl	800437c <SENSOR_IO_Write>
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8004782:	f7ff fdf1 	bl	8004368 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	210f      	movs	r1, #15
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fe0f 	bl	80043b0 <SENSOR_IO_Read>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	b2d8      	uxtb	r0, r3
 80047ae:	f107 020c 	add.w	r2, r7, #12
 80047b2:	2302      	movs	r3, #2
 80047b4:	21b0      	movs	r1, #176	; 0xb0
 80047b6:	f7ff fe19 	bl	80043ec <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80047ba:	7b3b      	ldrb	r3, [r7, #12]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80047c2:	7b7b      	ldrb	r3, [r7, #13]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	b2d8      	uxtb	r0, r3
 80047ce:	f107 020c 	add.w	r2, r7, #12
 80047d2:	2302      	movs	r3, #2
 80047d4:	21b6      	movs	r1, #182	; 0xb6
 80047d6:	f7ff fe09 	bl	80043ec <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80047da:	7b7b      	ldrb	r3, [r7, #13]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b21a      	sxth	r2, r3
 80047e0:	7b3b      	ldrb	r3, [r7, #12]
 80047e2:	b21b      	sxth	r3, r3
 80047e4:	4313      	orrs	r3, r2
 80047e6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	b2d8      	uxtb	r0, r3
 80047ec:	f107 020c 	add.w	r2, r7, #12
 80047f0:	2302      	movs	r3, #2
 80047f2:	21ba      	movs	r1, #186	; 0xba
 80047f4:	f7ff fdfa 	bl	80043ec <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80047f8:	7b7b      	ldrb	r3, [r7, #13]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	b21a      	sxth	r2, r3
 80047fe:	7b3b      	ldrb	r3, [r7, #12]
 8004800:	b21b      	sxth	r3, r3
 8004802:	4313      	orrs	r3, r2
 8004804:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	b2d8      	uxtb	r0, r3
 800480a:	f107 020c 	add.w	r2, r7, #12
 800480e:	2302      	movs	r3, #2
 8004810:	21a8      	movs	r1, #168	; 0xa8
 8004812:	f7ff fdeb 	bl	80043ec <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004816:	7b7b      	ldrb	r3, [r7, #13]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	b21a      	sxth	r2, r3
 800481c:	7b3b      	ldrb	r3, [r7, #12]
 800481e:	b21b      	sxth	r3, r3
 8004820:	4313      	orrs	r3, r2
 8004822:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8004824:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004828:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004836:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800483a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004848:	ee67 6a27 	vmul.f32	s13, s14, s15
 800484c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004850:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800486e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004872:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8004876:	edd7 7a04 	vldr	s15, [r7, #16]
 800487a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800487e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004882:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8004886:	edd7 7a04 	vldr	s15, [r7, #16]
 800488a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80048d0 <HTS221_H_ReadHumidity+0x130>
 800488e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004896:	dd01      	ble.n	800489c <HTS221_H_ReadHumidity+0xfc>
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HTS221_H_ReadHumidity+0x134>)
 800489a:	e00a      	b.n	80048b2 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800489c:	edd7 7a04 	vldr	s15, [r7, #16]
 80048a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a8:	d502      	bpl.n	80048b0 <HTS221_H_ReadHumidity+0x110>
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	e000      	b.n	80048b2 <HTS221_H_ReadHumidity+0x112>
 80048b0:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80048b2:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80048b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80048b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80048bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80048c4:	eeb0 0a67 	vmov.f32	s0, s15
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	447a0000 	.word	0x447a0000
 80048d4:	447a0000 	.word	0x447a0000

080048d8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	6039      	str	r1, [r7, #0]
 80048e2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2120      	movs	r1, #32
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fd60 	bl	80043b0 <SENSOR_IO_Read>
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	f023 0304 	bic.w	r3, r3, #4
 80048fa:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800491a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	7bfa      	ldrb	r2, [r7, #15]
 8004922:	2120      	movs	r1, #32
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fd29 	bl	800437c <SENSOR_IO_Write>
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	b2d8      	uxtb	r0, r3
 8004940:	f107 0208 	add.w	r2, r7, #8
 8004944:	2302      	movs	r3, #2
 8004946:	21b2      	movs	r1, #178	; 0xb2
 8004948:	f7ff fd50 	bl	80043ec <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2135      	movs	r1, #53	; 0x35
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fd2c 	bl	80043b0 <SENSOR_IO_Read>
 8004958:	4603      	mov	r3, r0
 800495a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800495c:	7ffb      	ldrb	r3, [r7, #31]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	b21b      	sxth	r3, r3
 8004962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004966:	b21a      	sxth	r2, r3
 8004968:	7a3b      	ldrb	r3, [r7, #8]
 800496a:	b21b      	sxth	r3, r3
 800496c:	4313      	orrs	r3, r2
 800496e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	019b      	lsls	r3, r3, #6
 8004974:	b21b      	sxth	r3, r3
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	b21a      	sxth	r2, r3
 800497c:	7a7b      	ldrb	r3, [r7, #9]
 800497e:	b21b      	sxth	r3, r3
 8004980:	4313      	orrs	r3, r2
 8004982:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8004984:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004988:	10db      	asrs	r3, r3, #3
 800498a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800498c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004990:	10db      	asrs	r3, r3, #3
 8004992:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	b2d8      	uxtb	r0, r3
 8004998:	f107 0208 	add.w	r2, r7, #8
 800499c:	2304      	movs	r3, #4
 800499e:	21bc      	movs	r1, #188	; 0xbc
 80049a0:	f7ff fd24 	bl	80043ec <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80049a4:	7a7b      	ldrb	r3, [r7, #9]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	b21a      	sxth	r2, r3
 80049aa:	7a3b      	ldrb	r3, [r7, #8]
 80049ac:	b21b      	sxth	r3, r3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80049b2:	7afb      	ldrb	r3, [r7, #11]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	b21a      	sxth	r2, r3
 80049b8:	7abb      	ldrb	r3, [r7, #10]
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	4313      	orrs	r3, r2
 80049be:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	b2d8      	uxtb	r0, r3
 80049c4:	f107 0208 	add.w	r2, r7, #8
 80049c8:	2302      	movs	r3, #2
 80049ca:	21aa      	movs	r1, #170	; 0xaa
 80049cc:	f7ff fd0e 	bl	80043ec <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80049d0:	7a7b      	ldrb	r3, [r7, #9]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	b21a      	sxth	r2, r3
 80049d6:	7a3b      	ldrb	r3, [r7, #8]
 80049d8:	b21b      	sxth	r3, r3
 80049da:	4313      	orrs	r3, r2
 80049dc:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80049de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80049e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80049f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a02:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004a06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004a0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a2c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	ee07 3a90 	vmov	s15, r3
}
 8004a36:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	463b      	mov	r3, r7
 8004a48:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8004a4c:	783b      	ldrb	r3, [r7, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2120      	movs	r1, #32
 8004a52:	203c      	movs	r0, #60	; 0x3c
 8004a54:	f7ff fc92 	bl	800437c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8004a58:	787b      	ldrb	r3, [r7, #1]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2121      	movs	r1, #33	; 0x21
 8004a5e:	203c      	movs	r0, #60	; 0x3c
 8004a60:	f7ff fc8c 	bl	800437c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8004a64:	78bb      	ldrb	r3, [r7, #2]
 8004a66:	461a      	mov	r2, r3
 8004a68:	2122      	movs	r1, #34	; 0x22
 8004a6a:	203c      	movs	r0, #60	; 0x3c
 8004a6c:	f7ff fc86 	bl	800437c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	461a      	mov	r2, r3
 8004a74:	2123      	movs	r1, #35	; 0x23
 8004a76:	203c      	movs	r0, #60	; 0x3c
 8004a78:	f7ff fc80 	bl	800437c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8004a7c:	793b      	ldrb	r3, [r7, #4]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2124      	movs	r1, #36	; 0x24
 8004a82:	203c      	movs	r0, #60	; 0x3c
 8004a84:	f7ff fc7a 	bl	800437c <SENSOR_IO_Write>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004a96:	2300      	movs	r3, #0
 8004a98:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004a9a:	2122      	movs	r1, #34	; 0x22
 8004a9c:	203c      	movs	r0, #60	; 0x3c
 8004a9e:	f7ff fc87 	bl	80043b0 <SENSOR_IO_Read>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	f023 0303 	bic.w	r3, r3, #3
 8004aac:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	f043 0303 	orr.w	r3, r3, #3
 8004ab4:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2122      	movs	r1, #34	; 0x22
 8004abc:	203c      	movs	r0, #60	; 0x3c
 8004abe:	f7ff fc5d 	bl	800437c <SENSOR_IO_Write>
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004ace:	f7ff fc4b 	bl	8004368 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	203c      	movs	r0, #60	; 0x3c
 8004ad6:	f7ff fc6b 	bl	80043b0 <SENSOR_IO_Read>
 8004ada:	4603      	mov	r3, r0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004aee:	2122      	movs	r1, #34	; 0x22
 8004af0:	203c      	movs	r0, #60	; 0x3c
 8004af2:	f7ff fc5d 	bl	80043b0 <SENSOR_IO_Read>
 8004af6:	4603      	mov	r3, r0
 8004af8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	f023 0320 	bic.w	r3, r3, #32
 8004b00:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	f043 0320 	orr.w	r3, r3, #32
 8004b0e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	461a      	mov	r2, r3
 8004b14:	2122      	movs	r1, #34	; 0x22
 8004b16:	203c      	movs	r0, #60	; 0x3c
 8004b18:	f7ff fc30 	bl	800437c <SENSOR_IO_Write>
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8004b3a:	2121      	movs	r1, #33	; 0x21
 8004b3c:	203c      	movs	r0, #60	; 0x3c
 8004b3e:	f7ff fc37 	bl	80043b0 <SENSOR_IO_Read>
 8004b42:	4603      	mov	r3, r0
 8004b44:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8004b46:	f107 0208 	add.w	r2, r7, #8
 8004b4a:	2306      	movs	r3, #6
 8004b4c:	21a8      	movs	r1, #168	; 0xa8
 8004b4e:	203c      	movs	r0, #60	; 0x3c
 8004b50:	f7ff fc4c 	bl	80043ec <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e01c      	b.n	8004b94 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004b5a:	7ffb      	ldrb	r3, [r7, #31]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	3301      	adds	r3, #1
 8004b60:	3320      	adds	r3, #32
 8004b62:	443b      	add	r3, r7
 8004b64:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	3320      	adds	r3, #32
 8004b74:	443b      	add	r3, r7
 8004b76:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	7ffb      	ldrb	r3, [r7, #31]
 8004b82:	b212      	sxth	r2, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	3320      	adds	r3, #32
 8004b88:	443b      	add	r3, r7
 8004b8a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	3301      	adds	r3, #1
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	7ffb      	ldrb	r3, [r7, #31]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d9df      	bls.n	8004b5a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ba0:	2b60      	cmp	r3, #96	; 0x60
 8004ba2:	d013      	beq.n	8004bcc <LIS3MDL_MagReadXYZ+0xa8>
 8004ba4:	2b60      	cmp	r3, #96	; 0x60
 8004ba6:	dc14      	bgt.n	8004bd2 <LIS3MDL_MagReadXYZ+0xae>
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d00c      	beq.n	8004bc6 <LIS3MDL_MagReadXYZ+0xa2>
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	dc10      	bgt.n	8004bd2 <LIS3MDL_MagReadXYZ+0xae>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <LIS3MDL_MagReadXYZ+0x96>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d003      	beq.n	8004bc0 <LIS3MDL_MagReadXYZ+0x9c>
 8004bb8:	e00b      	b.n	8004bd2 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <LIS3MDL_MagReadXYZ+0xfc>)
 8004bbc:	61bb      	str	r3, [r7, #24]
    break;
 8004bbe:	e008      	b.n	8004bd2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8004bc0:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <LIS3MDL_MagReadXYZ+0x100>)
 8004bc2:	61bb      	str	r3, [r7, #24]
    break;
 8004bc4:	e005      	b.n	8004bd2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8004bc6:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <LIS3MDL_MagReadXYZ+0x104>)
 8004bc8:	61bb      	str	r3, [r7, #24]
    break;
 8004bca:	e002      	b.n	8004bd2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <LIS3MDL_MagReadXYZ+0x108>)
 8004bce:	61bb      	str	r3, [r7, #24]
    break;    
 8004bd0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e01a      	b.n	8004c0e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004bd8:	7ffb      	ldrb	r3, [r7, #31]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	3320      	adds	r3, #32
 8004bde:	443b      	add	r3, r7
 8004be0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf4:	7ffb      	ldrb	r3, [r7, #31]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c00:	ee17 2a90 	vmov	r2, s15
 8004c04:	b212      	sxth	r2, r2
 8004c06:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004c08:	7ffb      	ldrb	r3, [r7, #31]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	7ffb      	ldrb	r3, [r7, #31]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d9e1      	bls.n	8004bd8 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	3e0f5c29 	.word	0x3e0f5c29
 8004c24:	3e947ae1 	.word	0x3e947ae1
 8004c28:	3edc28f6 	.word	0x3edc28f6
 8004c2c:	3f147ae1 	.word	0x3f147ae1

08004c30 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f879 	bl	8004d34 <LPS22HB_Init>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	4603      	mov	r3, r0
 8004c52:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004c58:	f7ff fb86 	bl	8004368 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	210f      	movs	r1, #15
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fba4 	bl	80043b0 <SENSOR_IO_Read>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	74fb      	strb	r3, [r7, #19]
 8004c8a:	e013      	b.n	8004cb4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	3328      	adds	r3, #40	; 0x28
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	7cfc      	ldrb	r4, [r7, #19]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7ff fb88 	bl	80043b0 <SENSOR_IO_Read>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f104 0318 	add.w	r3, r4, #24
 8004ca8:	443b      	add	r3, r7
 8004caa:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	74fb      	strb	r3, [r7, #19]
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d9e8      	bls.n	8004c8c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	74fb      	strb	r3, [r7, #19]
 8004cbe:	e00f      	b.n	8004ce0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	443b      	add	r3, r7
 8004cc6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	74fb      	strb	r3, [r7, #19]
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d9ec      	bls.n	8004cc0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2264      	movs	r2, #100	; 0x64
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	da01      	bge.n	8004d0c <LPS22HB_P_ReadPressure+0x94>
 8004d08:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004d0c:	131b      	asrs	r3, r3, #12
 8004d0e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d1a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004d30 <LPS22HB_P_ReadPressure+0xb8>
 8004d1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d22:	eef0 7a66 	vmov.f32	s15, s13
}
 8004d26:	eeb0 0a67 	vmov.f32	s0, s15
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	42c80000 	.word	0x42c80000

08004d34 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	211a      	movs	r1, #26
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fb33 	bl	80043b0 <SENSOR_IO_Read>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	211a      	movs	r1, #26
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fb08 	bl	800437c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2110      	movs	r1, #16
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fb1c 	bl	80043b0 <SENSOR_IO_Read>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004d8a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	f023 0302 	bic.w	r3, r3, #2
 8004d92:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	f043 0302 	orr.w	r3, r3, #2
 8004d9a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	2110      	movs	r1, #16
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fae9 	bl	800437c <SENSOR_IO_Write>
}  
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	4603      	mov	r3, r0
 8004dba:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004dc0:	2110      	movs	r1, #16
 8004dc2:	20d4      	movs	r0, #212	; 0xd4
 8004dc4:	f7ff faf4 	bl	80043b0 <SENSOR_IO_Read>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004dd8:	7bba      	ldrb	r2, [r7, #14]
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8004de0:	7bbb      	ldrb	r3, [r7, #14]
 8004de2:	461a      	mov	r2, r3
 8004de4:	2110      	movs	r1, #16
 8004de6:	20d4      	movs	r0, #212	; 0xd4
 8004de8:	f7ff fac8 	bl	800437c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004dec:	2112      	movs	r1, #18
 8004dee:	20d4      	movs	r0, #212	; 0xd4
 8004df0:	f7ff fade 	bl	80043b0 <SENSOR_IO_Read>
 8004df4:	4603      	mov	r3, r0
 8004df6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004e06:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004e08:	7bba      	ldrb	r2, [r7, #14]
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004e10:	7bbb      	ldrb	r3, [r7, #14]
 8004e12:	461a      	mov	r2, r3
 8004e14:	2112      	movs	r1, #18
 8004e16:	20d4      	movs	r0, #212	; 0xd4
 8004e18:	f7ff fab0 	bl	800437c <SENSOR_IO_Write>
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004e2e:	2110      	movs	r1, #16
 8004e30:	20d4      	movs	r0, #212	; 0xd4
 8004e32:	f7ff fabd 	bl	80043b0 <SENSOR_IO_Read>
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	461a      	mov	r2, r3
 8004e46:	2110      	movs	r1, #16
 8004e48:	20d4      	movs	r0, #212	; 0xd4
 8004e4a:	f7ff fa97 	bl	800437c <SENSOR_IO_Write>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004e56:	b580      	push	{r7, lr}
 8004e58:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004e5a:	f7ff fa85 	bl	8004368 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004e5e:	210f      	movs	r1, #15
 8004e60:	20d4      	movs	r0, #212	; 0xd4
 8004e62:	f7ff faa5 	bl	80043b0 <SENSOR_IO_Read>
 8004e66:	4603      	mov	r3, r0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004e7a:	2115      	movs	r1, #21
 8004e7c:	20d4      	movs	r0, #212	; 0xd4
 8004e7e:	f7ff fa97 	bl	80043b0 <SENSOR_IO_Read>
 8004e82:	4603      	mov	r3, r0
 8004e84:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	f023 0310 	bic.w	r3, r3, #16
 8004e8c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	f043 0310 	orr.w	r3, r3, #16
 8004e9a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2115      	movs	r1, #21
 8004ea2:	20d4      	movs	r0, #212	; 0xd4
 8004ea4:	f7ff fa6a 	bl	800437c <SENSOR_IO_Write>
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	20d4      	movs	r0, #212	; 0xd4
 8004eca:	f7ff fa71 	bl	80043b0 <SENSOR_IO_Read>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8004ed2:	f107 0208 	add.w	r2, r7, #8
 8004ed6:	2306      	movs	r3, #6
 8004ed8:	2128      	movs	r1, #40	; 0x28
 8004eda:	20d4      	movs	r0, #212	; 0xd4
 8004edc:	f7ff fa86 	bl	80043ec <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e01c      	b.n	8004f20 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	3301      	adds	r3, #1
 8004eec:	3320      	adds	r3, #32
 8004eee:	443b      	add	r3, r7
 8004ef0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	3320      	adds	r3, #32
 8004f00:	443b      	add	r3, r7
 8004f02:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	7ffb      	ldrb	r3, [r7, #31]
 8004f0e:	b212      	sxth	r2, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	3320      	adds	r3, #32
 8004f14:	443b      	add	r3, r7
 8004f16:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004f1a:	7ffb      	ldrb	r3, [r7, #31]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d9df      	bls.n	8004ee6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d829      	bhi.n	8004f84 <LSM6DSL_AccReadXYZ+0xd4>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <LSM6DSL_AccReadXYZ+0x88>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08004f85 	.word	0x08004f85
 8004f40:	08004f85 	.word	0x08004f85
 8004f44:	08004f85 	.word	0x08004f85
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f85 	.word	0x08004f85
 8004f58:	08004f73 	.word	0x08004f73
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	08004f79 	.word	0x08004f79
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004f6c:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <LSM6DSL_AccReadXYZ+0x120>)
 8004f6e:	61bb      	str	r3, [r7, #24]
    break;
 8004f70:	e008      	b.n	8004f84 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <LSM6DSL_AccReadXYZ+0x124>)
 8004f74:	61bb      	str	r3, [r7, #24]
    break;
 8004f76:	e005      	b.n	8004f84 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004f78:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <LSM6DSL_AccReadXYZ+0x128>)
 8004f7a:	61bb      	str	r3, [r7, #24]
    break;
 8004f7c:	e002      	b.n	8004f84 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004f7e:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <LSM6DSL_AccReadXYZ+0x12c>)
 8004f80:	61bb      	str	r3, [r7, #24]
    break;    
 8004f82:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e01a      	b.n	8004fc0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004f8a:	7ffb      	ldrb	r3, [r7, #31]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	3320      	adds	r3, #32
 8004f90:	443b      	add	r3, r7
 8004f92:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb2:	ee17 2a90 	vmov	r2, s15
 8004fb6:	b212      	sxth	r2, r2
 8004fb8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004fba:	7ffb      	ldrb	r3, [r7, #31]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	7ffb      	ldrb	r3, [r7, #31]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d9e1      	bls.n	8004f8a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	3d79db23 	.word	0x3d79db23
 8004fd4:	3df9db23 	.word	0x3df9db23
 8004fd8:	3e79db23 	.word	0x3e79db23
 8004fdc:	3ef9db23 	.word	0x3ef9db23

08004fe0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004fee:	2111      	movs	r1, #17
 8004ff0:	20d4      	movs	r0, #212	; 0xd4
 8004ff2:	f7ff f9dd 	bl	80043b0 <SENSOR_IO_Read>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005006:	7bba      	ldrb	r2, [r7, #14]
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	4313      	orrs	r3, r2
 800500c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800500e:	7bbb      	ldrb	r3, [r7, #14]
 8005010:	461a      	mov	r2, r3
 8005012:	2111      	movs	r1, #17
 8005014:	20d4      	movs	r0, #212	; 0xd4
 8005016:	f7ff f9b1 	bl	800437c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800501a:	2112      	movs	r1, #18
 800501c:	20d4      	movs	r0, #212	; 0xd4
 800501e:	f7ff f9c7 	bl	80043b0 <SENSOR_IO_Read>
 8005022:	4603      	mov	r3, r0
 8005024:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	b29b      	uxth	r3, r3
 800502c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8005034:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8005036:	7bba      	ldrb	r2, [r7, #14]
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	4313      	orrs	r3, r2
 800503c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	461a      	mov	r2, r3
 8005042:	2112      	movs	r1, #18
 8005044:	20d4      	movs	r0, #212	; 0xd4
 8005046:	f7ff f999 	bl	800437c <SENSOR_IO_Write>
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005058:	2300      	movs	r3, #0
 800505a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800505c:	2111      	movs	r1, #17
 800505e:	20d4      	movs	r0, #212	; 0xd4
 8005060:	f7ff f9a6 	bl	80043b0 <SENSOR_IO_Read>
 8005064:	4603      	mov	r3, r0
 8005066:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	461a      	mov	r2, r3
 8005074:	2111      	movs	r1, #17
 8005076:	20d4      	movs	r0, #212	; 0xd4
 8005078:	f7ff f980 	bl	800437c <SENSOR_IO_Write>
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005088:	f7ff f96e 	bl	8004368 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800508c:	210f      	movs	r1, #15
 800508e:	20d4      	movs	r0, #212	; 0xd4
 8005090:	f7ff f98e 	bl	80043b0 <SENSOR_IO_Read>
 8005094:	4603      	mov	r3, r0
}
 8005096:	4618      	mov	r0, r3
 8005098:	bd80      	pop	{r7, pc}

0800509a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4603      	mov	r3, r0
 80050a2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80050a8:	2116      	movs	r1, #22
 80050aa:	20d4      	movs	r0, #212	; 0xd4
 80050ac:	f7ff f980 	bl	80043b0 <SENSOR_IO_Read>
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ba:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050c8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	461a      	mov	r2, r3
 80050ce:	2116      	movs	r1, #22
 80050d0:	20d4      	movs	r0, #212	; 0xd4
 80050d2:	f7ff f953 	bl	800437c <SENSOR_IO_Write>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80050f6:	2111      	movs	r1, #17
 80050f8:	20d4      	movs	r0, #212	; 0xd4
 80050fa:	f7ff f959 	bl	80043b0 <SENSOR_IO_Read>
 80050fe:	4603      	mov	r3, r0
 8005100:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8005102:	f107 0208 	add.w	r2, r7, #8
 8005106:	2306      	movs	r3, #6
 8005108:	2122      	movs	r1, #34	; 0x22
 800510a:	20d4      	movs	r0, #212	; 0xd4
 800510c:	f7ff f96e 	bl	80043ec <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005110:	2300      	movs	r3, #0
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e01c      	b.n	8005150 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005116:	7ffb      	ldrb	r3, [r7, #31]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	3301      	adds	r3, #1
 800511c:	3320      	adds	r3, #32
 800511e:	443b      	add	r3, r7
 8005120:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005124:	b29b      	uxth	r3, r3
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	b29a      	uxth	r2, r3
 800512a:	7ffb      	ldrb	r3, [r7, #31]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	3320      	adds	r3, #32
 8005130:	443b      	add	r3, r7
 8005132:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005136:	b29b      	uxth	r3, r3
 8005138:	4413      	add	r3, r2
 800513a:	b29a      	uxth	r2, r3
 800513c:	7ffb      	ldrb	r3, [r7, #31]
 800513e:	b212      	sxth	r2, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	3320      	adds	r3, #32
 8005144:	443b      	add	r3, r7
 8005146:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800514a:	7ffb      	ldrb	r3, [r7, #31]
 800514c:	3301      	adds	r3, #1
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d9df      	bls.n	8005116 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d829      	bhi.n	80051b4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	0800519d 	.word	0x0800519d
 800516c:	080051b5 	.word	0x080051b5
 8005170:	080051b5 	.word	0x080051b5
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051a3 	.word	0x080051a3
 800517c:	080051b5 	.word	0x080051b5
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051b5 	.word	0x080051b5
 8005188:	080051a9 	.word	0x080051a9
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051af 	.word	0x080051af
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800519e:	61bb      	str	r3, [r7, #24]
    break;
 80051a0:	e008      	b.n	80051b4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80051a4:	61bb      	str	r3, [r7, #24]
    break;
 80051a6:	e005      	b.n	80051b4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80051aa:	61bb      	str	r3, [r7, #24]
    break;
 80051ac:	e002      	b.n	80051b4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80051b0:	61bb      	str	r3, [r7, #24]
    break;    
 80051b2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e016      	b.n	80051e8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	3320      	adds	r3, #32
 80051c0:	443b      	add	r3, r7
 80051c2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ce:	7ffb      	ldrb	r3, [r7, #31]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80051da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051de:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
 80051e4:	3301      	adds	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	7ffb      	ldrb	r3, [r7, #31]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d9e5      	bls.n	80051ba <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	410c0000 	.word	0x410c0000
 80051fc:	418c0000 	.word	0x418c0000
 8005200:	420c0000 	.word	0x420c0000
 8005204:	428c0000 	.word	0x428c0000

08005208 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005212:	2003      	movs	r0, #3
 8005214:	f000 f95a 	bl	80054cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005218:	2000      	movs	r0, #0
 800521a:	f000 f80d 	bl	8005238 <HAL_InitTick>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	71fb      	strb	r3, [r7, #7]
 8005228:	e001      	b.n	800522e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800522a:	f7fe fbf3 	bl	8003a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800522e:	79fb      	ldrb	r3, [r7, #7]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_InitTick+0x68>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d022      	beq.n	8005292 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800524c:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <HAL_InitTick+0x6c>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_InitTick+0x68>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005258:	fbb1 f3f3 	udiv	r3, r1, r3
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f968 	bl	8005536 <HAL_SYSTICK_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	d809      	bhi.n	8005286 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005272:	2200      	movs	r2, #0
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	f000 f932 	bl	80054e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <HAL_InitTick+0x70>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e007      	b.n	8005296 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	e004      	b.n	8005296 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
 8005290:	e001      	b.n	8005296 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	200000e4 	.word	0x200000e4
 80052a4:	20000010 	.word	0x20000010
 80052a8:	200000e0 	.word	0x200000e0

080052ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <HAL_IncTick+0x1c>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_IncTick+0x20>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4413      	add	r3, r2
 80052ba:	4a03      	ldr	r2, [pc, #12]	; (80052c8 <HAL_IncTick+0x1c>)
 80052bc:	6013      	str	r3, [r2, #0]
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000ec4 	.word	0x20000ec4
 80052cc:	200000e4 	.word	0x200000e4

080052d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return uwTick;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_GetTick+0x14>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000ec4 	.word	0x20000ec4

080052e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f0:	f7ff ffee 	bl	80052d0 <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d004      	beq.n	800530c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_Delay+0x40>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800530c:	bf00      	nop
 800530e:	f7ff ffdf 	bl	80052d0 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	429a      	cmp	r2, r3
 800531c:	d8f7      	bhi.n	800530e <HAL_Delay+0x26>
  {
  }
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	200000e4 	.word	0x200000e4

0800532c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <__NVIC_SetPriorityGrouping+0x44>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005348:	4013      	ands	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800535e:	4a04      	ldr	r2, [pc, #16]	; (8005370 <__NVIC_SetPriorityGrouping+0x44>)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	60d3      	str	r3, [r2, #12]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <__NVIC_GetPriorityGrouping+0x18>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	f003 0307 	and.w	r3, r3, #7
}
 8005382:	4618      	mov	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	e000ed00 	.word	0xe000ed00

08005390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	db0b      	blt.n	80053ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	f003 021f 	and.w	r2, r3, #31
 80053a8:	4907      	ldr	r1, [pc, #28]	; (80053c8 <__NVIC_EnableIRQ+0x38>)
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2001      	movs	r0, #1
 80053b2:	fa00 f202 	lsl.w	r2, r0, r2
 80053b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000e100 	.word	0xe000e100

080053cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	db0a      	blt.n	80053f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	490c      	ldr	r1, [pc, #48]	; (8005418 <__NVIC_SetPriority+0x4c>)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	440b      	add	r3, r1
 80053f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053f4:	e00a      	b.n	800540c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4908      	ldr	r1, [pc, #32]	; (800541c <__NVIC_SetPriority+0x50>)
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	3b04      	subs	r3, #4
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	440b      	add	r3, r1
 800540a:	761a      	strb	r2, [r3, #24]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000e100 	.word	0xe000e100
 800541c:	e000ed00 	.word	0xe000ed00

08005420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	; 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f1c3 0307 	rsb	r3, r3, #7
 800543a:	2b04      	cmp	r3, #4
 800543c:	bf28      	it	cs
 800543e:	2304      	movcs	r3, #4
 8005440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3304      	adds	r3, #4
 8005446:	2b06      	cmp	r3, #6
 8005448:	d902      	bls.n	8005450 <NVIC_EncodePriority+0x30>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3b03      	subs	r3, #3
 800544e:	e000      	b.n	8005452 <NVIC_EncodePriority+0x32>
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	401a      	ands	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005468:	f04f 31ff 	mov.w	r1, #4294967295
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	43d9      	mvns	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005478:	4313      	orrs	r3, r2
         );
}
 800547a:	4618      	mov	r0, r3
 800547c:	3724      	adds	r7, #36	; 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3b01      	subs	r3, #1
 8005494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005498:	d301      	bcc.n	800549e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800549a:	2301      	movs	r3, #1
 800549c:	e00f      	b.n	80054be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800549e:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <SysTick_Config+0x40>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054a6:	210f      	movs	r1, #15
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	f7ff ff8e 	bl	80053cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <SysTick_Config+0x40>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054b6:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <SysTick_Config+0x40>)
 80054b8:	2207      	movs	r2, #7
 80054ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	e000e010 	.word	0xe000e010

080054cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff29 	bl	800532c <__NVIC_SetPriorityGrouping>
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b086      	sub	sp, #24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	4603      	mov	r3, r0
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054f4:	f7ff ff3e 	bl	8005374 <__NVIC_GetPriorityGrouping>
 80054f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	f7ff ff8e 	bl	8005420 <NVIC_EncodePriority>
 8005504:	4602      	mov	r2, r0
 8005506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff5d 	bl	80053cc <__NVIC_SetPriority>
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	4603      	mov	r3, r0
 8005522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff31 	bl	8005390 <__NVIC_EnableIRQ>
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ffa2 	bl	8005488 <SysTick_Config>
 8005544:	4603      	mov	r3, r0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d005      	beq.n	8005572 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e029      	b.n	80055c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 020e 	bic.w	r2, r2, #14
 8005580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f003 021c 	and.w	r2, r3, #28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f202 	lsl.w	r2, r1, r2
 80055a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
    }
  }
  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055de:	e17f      	b.n	80058e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	2101      	movs	r1, #1
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8171 	beq.w	80058da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d00b      	beq.n	8005618 <HAL_GPIO_Init+0x48>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d007      	beq.n	8005618 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800560c:	2b11      	cmp	r3, #17
 800560e:	d003      	beq.n	8005618 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b12      	cmp	r3, #18
 8005616:	d130      	bne.n	800567a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	2203      	movs	r2, #3
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800564e:	2201      	movs	r2, #1
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4013      	ands	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	f003 0201 	and.w	r2, r3, #1
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b03      	cmp	r3, #3
 8005684:	d118      	bne.n	80056b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800568c:	2201      	movs	r2, #1
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	08db      	lsrs	r3, r3, #3
 80056a2:	f003 0201 	and.w	r2, r3, #1
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d003      	beq.n	80056f8 <HAL_GPIO_Init+0x128>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b12      	cmp	r3, #18
 80056f6:	d123      	bne.n	8005740 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	220f      	movs	r2, #15
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4013      	ands	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	6939      	ldr	r1, [r7, #16]
 800573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2203      	movs	r2, #3
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80ac 	beq.w	80058da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005782:	4b5f      	ldr	r3, [pc, #380]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	4a5e      	ldr	r2, [pc, #376]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6613      	str	r3, [r2, #96]	; 0x60
 800578e:	4b5c      	ldr	r3, [pc, #368]	; (8005900 <HAL_GPIO_Init+0x330>)
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800579a:	4a5a      	ldr	r2, [pc, #360]	; (8005904 <HAL_GPIO_Init+0x334>)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	3302      	adds	r3, #2
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057c4:	d025      	beq.n	8005812 <HAL_GPIO_Init+0x242>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4f      	ldr	r2, [pc, #316]	; (8005908 <HAL_GPIO_Init+0x338>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01f      	beq.n	800580e <HAL_GPIO_Init+0x23e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a4e      	ldr	r2, [pc, #312]	; (800590c <HAL_GPIO_Init+0x33c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d019      	beq.n	800580a <HAL_GPIO_Init+0x23a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a4d      	ldr	r2, [pc, #308]	; (8005910 <HAL_GPIO_Init+0x340>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_GPIO_Init+0x236>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a4c      	ldr	r2, [pc, #304]	; (8005914 <HAL_GPIO_Init+0x344>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00d      	beq.n	8005802 <HAL_GPIO_Init+0x232>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a4b      	ldr	r2, [pc, #300]	; (8005918 <HAL_GPIO_Init+0x348>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <HAL_GPIO_Init+0x22e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a4a      	ldr	r2, [pc, #296]	; (800591c <HAL_GPIO_Init+0x34c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_GPIO_Init+0x22a>
 80057f6:	2306      	movs	r3, #6
 80057f8:	e00c      	b.n	8005814 <HAL_GPIO_Init+0x244>
 80057fa:	2307      	movs	r3, #7
 80057fc:	e00a      	b.n	8005814 <HAL_GPIO_Init+0x244>
 80057fe:	2305      	movs	r3, #5
 8005800:	e008      	b.n	8005814 <HAL_GPIO_Init+0x244>
 8005802:	2304      	movs	r3, #4
 8005804:	e006      	b.n	8005814 <HAL_GPIO_Init+0x244>
 8005806:	2303      	movs	r3, #3
 8005808:	e004      	b.n	8005814 <HAL_GPIO_Init+0x244>
 800580a:	2302      	movs	r3, #2
 800580c:	e002      	b.n	8005814 <HAL_GPIO_Init+0x244>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_GPIO_Init+0x244>
 8005812:	2300      	movs	r3, #0
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	f002 0203 	and.w	r2, r2, #3
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4093      	lsls	r3, r2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005824:	4937      	ldr	r1, [pc, #220]	; (8005904 <HAL_GPIO_Init+0x334>)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005832:	4b3b      	ldr	r3, [pc, #236]	; (8005920 <HAL_GPIO_Init+0x350>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	43db      	mvns	r3, r3
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005856:	4a32      	ldr	r2, [pc, #200]	; (8005920 <HAL_GPIO_Init+0x350>)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800585c:	4b30      	ldr	r3, [pc, #192]	; (8005920 <HAL_GPIO_Init+0x350>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	43db      	mvns	r3, r3
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4013      	ands	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <HAL_GPIO_Init+0x350>)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <HAL_GPIO_Init+0x350>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058aa:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <HAL_GPIO_Init+0x350>)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <HAL_GPIO_Init+0x350>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058d4:	4a12      	ldr	r2, [pc, #72]	; (8005920 <HAL_GPIO_Init+0x350>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3301      	adds	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f47f ae78 	bne.w	80055e0 <HAL_GPIO_Init+0x10>
  }
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	40010000 	.word	0x40010000
 8005908:	48000400 	.word	0x48000400
 800590c:	48000800 	.word	0x48000800
 8005910:	48000c00 	.word	0x48000c00
 8005914:	48001000 	.word	0x48001000
 8005918:	48001400 	.word	0x48001400
 800591c:	48001800 	.word	0x48001800
 8005920:	40010400 	.word	0x40010400

08005924 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005932:	e0cd      	b.n	8005ad0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005934:	2201      	movs	r2, #1
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80c0 	beq.w	8005aca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800594a:	4a68      	ldr	r2, [pc, #416]	; (8005aec <HAL_GPIO_DeInit+0x1c8>)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	3302      	adds	r3, #2
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	220f      	movs	r2, #15
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005972:	d025      	beq.n	80059c0 <HAL_GPIO_DeInit+0x9c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a5e      	ldr	r2, [pc, #376]	; (8005af0 <HAL_GPIO_DeInit+0x1cc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d01f      	beq.n	80059bc <HAL_GPIO_DeInit+0x98>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a5d      	ldr	r2, [pc, #372]	; (8005af4 <HAL_GPIO_DeInit+0x1d0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d019      	beq.n	80059b8 <HAL_GPIO_DeInit+0x94>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a5c      	ldr	r2, [pc, #368]	; (8005af8 <HAL_GPIO_DeInit+0x1d4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <HAL_GPIO_DeInit+0x90>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a5b      	ldr	r2, [pc, #364]	; (8005afc <HAL_GPIO_DeInit+0x1d8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00d      	beq.n	80059b0 <HAL_GPIO_DeInit+0x8c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a5a      	ldr	r2, [pc, #360]	; (8005b00 <HAL_GPIO_DeInit+0x1dc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d007      	beq.n	80059ac <HAL_GPIO_DeInit+0x88>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a59      	ldr	r2, [pc, #356]	; (8005b04 <HAL_GPIO_DeInit+0x1e0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <HAL_GPIO_DeInit+0x84>
 80059a4:	2306      	movs	r3, #6
 80059a6:	e00c      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059a8:	2307      	movs	r3, #7
 80059aa:	e00a      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059ac:	2305      	movs	r3, #5
 80059ae:	e008      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059b0:	2304      	movs	r3, #4
 80059b2:	e006      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059b4:	2303      	movs	r3, #3
 80059b6:	e004      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e002      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_GPIO_DeInit+0x9e>
 80059c0:	2300      	movs	r3, #0
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	f002 0203 	and.w	r2, r2, #3
 80059c8:	0092      	lsls	r2, r2, #2
 80059ca:	4093      	lsls	r3, r2
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d132      	bne.n	8005a38 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80059d2:	4b4d      	ldr	r3, [pc, #308]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	494b      	ldr	r1, [pc, #300]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059dc:	4013      	ands	r3, r2
 80059de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80059e0:	4b49      	ldr	r3, [pc, #292]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	43db      	mvns	r3, r3
 80059e8:	4947      	ldr	r1, [pc, #284]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80059ee:	4b46      	ldr	r3, [pc, #280]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	4944      	ldr	r1, [pc, #272]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80059fc:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	4940      	ldr	r1, [pc, #256]	; (8005b08 <HAL_GPIO_DeInit+0x1e4>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	220f      	movs	r2, #15
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005a1a:	4a34      	ldr	r2, [pc, #208]	; (8005aec <HAL_GPIO_DeInit+0x1c8>)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	3302      	adds	r3, #2
 8005a22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	43da      	mvns	r2, r3
 8005a2a:	4830      	ldr	r0, [pc, #192]	; (8005aec <HAL_GPIO_DeInit+0x1c8>)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	400a      	ands	r2, r1
 8005a32:	3302      	adds	r3, #2
 8005a34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	2103      	movs	r1, #3
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	08da      	lsrs	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	08d2      	lsrs	r2, r2, #3
 8005a6c:	4019      	ands	r1, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3208      	adds	r2, #8
 8005a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	2103      	movs	r1, #3
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	401a      	ands	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	2101      	movs	r1, #1
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	fa01 f303 	lsl.w	r3, r1, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2103      	movs	r1, #3
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aba:	2101      	movs	r1, #1
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3301      	adds	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f af2b 	bne.w	8005934 <HAL_GPIO_DeInit+0x10>
  }
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40010000 	.word	0x40010000
 8005af0:	48000400 	.word	0x48000400
 8005af4:	48000800 	.word	0x48000800
 8005af8:	48000c00 	.word	0x48000c00
 8005afc:	48001000 	.word	0x48001000
 8005b00:	48001400 	.word	0x48001400
 8005b04:	48001800 	.word	0x48001800
 8005b08:	40010400 	.word	0x40010400

08005b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	887b      	ldrh	r3, [r7, #2]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
 8005b28:	e001      	b.n	8005b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b4c:	787b      	ldrb	r3, [r7, #1]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b52:	887a      	ldrh	r2, [r7, #2]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b58:	e002      	b.n	8005b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	887b      	ldrh	r3, [r7, #2]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b84:	887a      	ldrh	r2, [r7, #2]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005b8a:	e002      	b.n	8005b92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b8c:	887a      	ldrh	r2, [r7, #2]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	619a      	str	r2, [r3, #24]
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bb6:	4a05      	ldr	r2, [pc, #20]	; (8005bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fd fd02 	bl	80035c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e081      	b.n	8005ce6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fd ff30 	bl	8003a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d107      	bne.n	8005c4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	e006      	b.n	8005c58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d104      	bne.n	8005c6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	ea42 0103 	orr.w	r1, r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	021a      	lsls	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69d9      	ldr	r1, [r3, #28]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e021      	b.n	8005d44 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2224      	movs	r2, #36	; 0x24
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fd fee3 	bl	8003ae4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	817b      	strh	r3, [r7, #10]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	813b      	strh	r3, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	f040 80f9 	bne.w	8005f66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_I2C_Mem_Write+0x34>
 8005d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0ed      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_I2C_Mem_Write+0x4e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0e6      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005da2:	f7ff fa95 	bl	80052d0 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	2319      	movs	r3, #25
 8005dae:	2201      	movs	r2, #1
 8005db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fac3 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0d1      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2221      	movs	r2, #33	; 0x21
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dec:	88f8      	ldrh	r0, [r7, #6]
 8005dee:	893a      	ldrh	r2, [r7, #8]
 8005df0:	8979      	ldrh	r1, [r7, #10]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f9d3 	bl	80061a8 <I2C_RequestMemoryWrite>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0a9      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2bff      	cmp	r3, #255	; 0xff
 8005e1c:	d90e      	bls.n	8005e3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	22ff      	movs	r2, #255	; 0xff
 8005e22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	8979      	ldrh	r1, [r7, #10]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fba5 	bl	8006584 <I2C_TransferConfig>
 8005e3a:	e00f      	b.n	8005e5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	8979      	ldrh	r1, [r7, #10]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fb94 	bl	8006584 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 faad 	bl	80063c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e07b      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d034      	beq.n	8005f14 <HAL_I2C_Mem_Write+0x1c8>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d130      	bne.n	8005f14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fa3f 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e04d      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2bff      	cmp	r3, #255	; 0xff
 8005ed4:	d90e      	bls.n	8005ef4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	22ff      	movs	r2, #255	; 0xff
 8005eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	8979      	ldrh	r1, [r7, #10]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fb49 	bl	8006584 <I2C_TransferConfig>
 8005ef2:	e00f      	b.n	8005f14 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	8979      	ldrh	r1, [r7, #10]
 8005f06:	2300      	movs	r3, #0
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fb38 	bl	8006584 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d19e      	bne.n	8005e5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fa8c 	bl	8006440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e01a      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2220      	movs	r2, #32
 8005f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6859      	ldr	r1, [r3, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <HAL_I2C_Mem_Write+0x224>)
 8005f46:	400b      	ands	r3, r1
 8005f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e000      	b.n	8005f68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f66:	2302      	movs	r3, #2
  }
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	fe00e800 	.word	0xfe00e800

08005f74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	460b      	mov	r3, r1
 8005f88:	813b      	strh	r3, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	f040 80fd 	bne.w	8006196 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_I2C_Mem_Read+0x34>
 8005fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0f1      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_I2C_Mem_Read+0x4e>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0ea      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fca:	f7ff f981 	bl	80052d0 <HAL_GetTick>
 8005fce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2319      	movs	r3, #25
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f9af 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0d5      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2222      	movs	r2, #34	; 0x22
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2240      	movs	r2, #64	; 0x40
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800600c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006014:	88f8      	ldrh	r0, [r7, #6]
 8006016:	893a      	ldrh	r2, [r7, #8]
 8006018:	8979      	ldrh	r1, [r7, #10]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	4603      	mov	r3, r0
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f913 	bl	8006250 <I2C_RequestMemoryRead>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0ad      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2bff      	cmp	r3, #255	; 0xff
 8006044:	d90e      	bls.n	8006064 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006050:	b2da      	uxtb	r2, r3
 8006052:	8979      	ldrh	r1, [r7, #10]
 8006054:	4b52      	ldr	r3, [pc, #328]	; (80061a0 <HAL_I2C_Mem_Read+0x22c>)
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fa91 	bl	8006584 <I2C_TransferConfig>
 8006062:	e00f      	b.n	8006084 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006072:	b2da      	uxtb	r2, r3
 8006074:	8979      	ldrh	r1, [r7, #10]
 8006076:	4b4a      	ldr	r3, [pc, #296]	; (80061a0 <HAL_I2C_Mem_Read+0x22c>)
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fa80 	bl	8006584 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	2200      	movs	r2, #0
 800608c:	2104      	movs	r1, #4
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f956 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e07c      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d034      	beq.n	8006144 <HAL_I2C_Mem_Read+0x1d0>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d130      	bne.n	8006144 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2200      	movs	r2, #0
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f927 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e04d      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	d90e      	bls.n	8006124 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	b2da      	uxtb	r2, r3
 8006112:	8979      	ldrh	r1, [r7, #10]
 8006114:	2300      	movs	r3, #0
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fa31 	bl	8006584 <I2C_TransferConfig>
 8006122:	e00f      	b.n	8006144 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	b2da      	uxtb	r2, r3
 8006134:	8979      	ldrh	r1, [r7, #10]
 8006136:	2300      	movs	r3, #0
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fa20 	bl	8006584 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d19a      	bne.n	8006084 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f974 	bl	8006440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e01a      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2220      	movs	r2, #32
 8006168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_I2C_Mem_Read+0x230>)
 8006176:	400b      	ands	r3, r1
 8006178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	80002400 	.word	0x80002400
 80061a4:	fe00e800 	.word	0xfe00e800

080061a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	817b      	strh	r3, [r7, #10]
 80061ba:	460b      	mov	r3, r1
 80061bc:	813b      	strh	r3, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	8979      	ldrh	r1, [r7, #10]
 80061c8:	4b20      	ldr	r3, [pc, #128]	; (800624c <I2C_RequestMemoryWrite+0xa4>)
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f9d7 	bl	8006584 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	69b9      	ldr	r1, [r7, #24]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f8f0 	bl	80063c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e02c      	b.n	8006244 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d105      	bne.n	80061fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061f0:	893b      	ldrh	r3, [r7, #8]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28
 80061fa:	e015      	b.n	8006228 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061fc:	893b      	ldrh	r3, [r7, #8]
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	b29b      	uxth	r3, r3
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	69b9      	ldr	r1, [r7, #24]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f8d6 	bl	80063c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e012      	b.n	8006244 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800621e:	893b      	ldrh	r3, [r7, #8]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2200      	movs	r2, #0
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f884 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	80002000 	.word	0x80002000

08006250 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	4608      	mov	r0, r1
 800625a:	4611      	mov	r1, r2
 800625c:	461a      	mov	r2, r3
 800625e:	4603      	mov	r3, r0
 8006260:	817b      	strh	r3, [r7, #10]
 8006262:	460b      	mov	r3, r1
 8006264:	813b      	strh	r3, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <I2C_RequestMemoryRead+0xa4>)
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f984 	bl	8006584 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f89d 	bl	80063c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e02c      	b.n	80062ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006290:	88fb      	ldrh	r3, [r7, #6]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006296:	893b      	ldrh	r3, [r7, #8]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	629a      	str	r2, [r3, #40]	; 0x28
 80062a0:	e015      	b.n	80062ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062a2:	893b      	ldrh	r3, [r7, #8]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f883 	bl	80063c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e012      	b.n	80062ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2140      	movs	r1, #64	; 0x40
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f831 	bl	8006340 <I2C_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	80002000 	.word	0x80002000

080062f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d103      	bne.n	8006316 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d007      	beq.n	8006334 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	619a      	str	r2, [r3, #24]
  }
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006350:	e022      	b.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d01e      	beq.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635a:	f7fe ffb9 	bl	80052d0 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d302      	bcc.n	8006370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d113      	bne.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e00f      	b.n	80063b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4013      	ands	r3, r2
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d0cd      	beq.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063cc:	e02c      	b.n	8006428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f870 	bl	80064b8 <I2C_IsAcknowledgeFailed>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e02a      	b.n	8006438 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d01e      	beq.n	8006428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fe ff71 	bl	80052d0 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d113      	bne.n	8006428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e007      	b.n	8006438 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d1cb      	bne.n	80063ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800644c:	e028      	b.n	80064a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f830 	bl	80064b8 <I2C_IsAcknowledgeFailed>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e026      	b.n	80064b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006462:	f7fe ff35 	bl	80052d0 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d113      	bne.n	80064a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d1cf      	bne.n	800644e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d151      	bne.n	8006576 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064d2:	e022      	b.n	800651a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d01e      	beq.n	800651a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064dc:	f7fe fef8 	bl	80052d0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <I2C_IsAcknowledgeFailed+0x3a>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d113      	bne.n	800651a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e02e      	b.n	8006578 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b20      	cmp	r3, #32
 8006526:	d1d5      	bne.n	80064d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2210      	movs	r2, #16
 800652e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2220      	movs	r2, #32
 8006536:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fedd 	bl	80062f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6859      	ldr	r1, [r3, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <I2C_IsAcknowledgeFailed+0xc8>)
 800654a:	400b      	ands	r3, r1
 800654c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	fe00e800 	.word	0xfe00e800

08006584 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	4613      	mov	r3, r2
 8006594:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	0d5b      	lsrs	r3, r3, #21
 80065a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <I2C_TransferConfig+0x58>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	43db      	mvns	r3, r3
 80065aa:	ea02 0103 	and.w	r1, r2, r3
 80065ae:	897b      	ldrh	r3, [r7, #10]
 80065b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065b4:	7a7b      	ldrb	r3, [r7, #9]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	03ff63ff 	.word	0x03ff63ff

080065e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d138      	bne.n	8006668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006600:	2302      	movs	r3, #2
 8006602:	e032      	b.n	800666a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0201 	bic.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e000      	b.n	800666a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006686:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006690:	4b3b      	ldr	r3, [pc, #236]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_RCC_GetSysClockFreq+0x34>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	d121      	bne.n	80066ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d11e      	bne.n	80066ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066ac:	4b34      	ldr	r3, [pc, #208]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066b8:	4b31      	ldr	r3, [pc, #196]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	e005      	b.n	80066d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066c8:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066d4:	4a2b      	ldr	r2, [pc, #172]	; (8006784 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10d      	bne.n	8006700 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066e8:	e00a      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d102      	bne.n	80066f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066f0:	4b25      	ldr	r3, [pc, #148]	; (8006788 <HAL_RCC_GetSysClockFreq+0x110>)
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e004      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d101      	bne.n	8006700 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066fc:	4b23      	ldr	r3, [pc, #140]	; (800678c <HAL_RCC_GetSysClockFreq+0x114>)
 80066fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b0c      	cmp	r3, #12
 8006704:	d134      	bne.n	8006770 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006706:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d003      	beq.n	800671e <HAL_RCC_GetSysClockFreq+0xa6>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b03      	cmp	r3, #3
 800671a:	d003      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0xac>
 800671c:	e005      	b.n	800672a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800671e:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <HAL_RCC_GetSysClockFreq+0x110>)
 8006720:	617b      	str	r3, [r7, #20]
      break;
 8006722:	e005      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006724:	4b19      	ldr	r3, [pc, #100]	; (800678c <HAL_RCC_GetSysClockFreq+0x114>)
 8006726:	617b      	str	r3, [r7, #20]
      break;
 8006728:	e002      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	617b      	str	r3, [r7, #20]
      break;
 800672e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006730:	4b13      	ldr	r3, [pc, #76]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	091b      	lsrs	r3, r3, #4
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	3301      	adds	r3, #1
 800673c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800673e:	4b10      	ldr	r3, [pc, #64]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	fb03 f202 	mul.w	r2, r3, r2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_RCC_GetSysClockFreq+0x108>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	0e5b      	lsrs	r3, r3, #25
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	3301      	adds	r3, #1
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	fbb2 f3f3 	udiv	r3, r2, r3
 800676e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006770:	69bb      	ldr	r3, [r7, #24]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3724      	adds	r7, #36	; 0x24
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000
 8006784:	0800cfa4 	.word	0x0800cfa4
 8006788:	00f42400 	.word	0x00f42400
 800678c:	007a1200 	.word	0x007a1200

08006790 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006794:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006796:	681b      	ldr	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000010 	.word	0x20000010

080067a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067ac:	f7ff fff0 	bl	8006790 <HAL_RCC_GetHCLKFreq>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	4904      	ldr	r1, [pc, #16]	; (80067d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40021000 	.word	0x40021000
 80067d0:	0800cf9c 	.word	0x0800cf9c

080067d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067d8:	f7ff ffda 	bl	8006790 <HAL_RCC_GetHCLKFreq>
 80067dc:	4602      	mov	r2, r0
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	0adb      	lsrs	r3, r3, #11
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	4904      	ldr	r1, [pc, #16]	; (80067fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80067ea:	5ccb      	ldrb	r3, [r1, r3]
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0800cf9c 	.word	0x0800cf9c

08006800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e07c      	b.n	800690c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d106      	bne.n	8006832 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fd f977 	bl	8003b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006848:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006852:	d902      	bls.n	800685a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e002      	b.n	8006860 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800685a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800685e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006868:	d007      	beq.n	800687a <HAL_SPI_Init+0x7a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006872:	d002      	beq.n	800687a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800688a:	d903      	bls.n	8006894 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
 8006892:	e002      	b.n	800689a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	ea42 0103 	orr.w	r1, r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	0c1b      	lsrs	r3, r3, #16
 80068da:	f003 0204 	and.w	r2, r3, #4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	ea42 0103 	orr.w	r1, r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e01a      	b.n	800695c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fd f932 	bl	8003ba8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_SPI_Transmit+0x22>
 8006982:	2302      	movs	r3, #2
 8006984:	e150      	b.n	8006c28 <HAL_SPI_Transmit+0x2c4>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800698e:	f7fe fc9f 	bl	80052d0 <HAL_GetTick>
 8006992:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d002      	beq.n	80069aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069a4:	2302      	movs	r3, #2
 80069a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069a8:	e135      	b.n	8006c16 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <HAL_SPI_Transmit+0x52>
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069ba:	e12c      	b.n	8006c16 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2203      	movs	r2, #3
 80069c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	88fa      	ldrh	r2, [r7, #6]
 80069d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	88fa      	ldrh	r2, [r7, #6]
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a06:	d107      	bne.n	8006a18 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	d007      	beq.n	8006a36 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a3e:	d94b      	bls.n	8006ad8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_SPI_Transmit+0xea>
 8006a48:	8afb      	ldrh	r3, [r7, #22]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d13e      	bne.n	8006acc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a72:	e02b      	b.n	8006acc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d112      	bne.n	8006aa8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	881a      	ldrh	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aa6:	e011      	b.n	8006acc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa8:	f7fe fc12 	bl	80052d0 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d803      	bhi.n	8006ac0 <HAL_SPI_Transmit+0x15c>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d102      	bne.n	8006ac6 <HAL_SPI_Transmit+0x162>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aca:	e0a4      	b.n	8006c16 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ce      	bne.n	8006a74 <HAL_SPI_Transmit+0x110>
 8006ad6:	e07c      	b.n	8006bd2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_SPI_Transmit+0x182>
 8006ae0:	8afb      	ldrh	r3, [r7, #22]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d170      	bne.n	8006bc8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d912      	bls.n	8006b16 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	1c9a      	adds	r2, r3, #2
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b02      	subs	r3, #2
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b14:	e058      	b.n	8006bc8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b3c:	e044      	b.n	8006bc8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d12b      	bne.n	8006ba4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d912      	bls.n	8006b7c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	881a      	ldrh	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	1c9a      	adds	r2, r3, #2
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b02      	subs	r3, #2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b7a:	e025      	b.n	8006bc8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ba2:	e011      	b.n	8006bc8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba4:	f7fe fb94 	bl	80052d0 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d803      	bhi.n	8006bbc <HAL_SPI_Transmit+0x258>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d102      	bne.n	8006bc2 <HAL_SPI_Transmit+0x25e>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bc6:	e026      	b.n	8006c16 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1b5      	bne.n	8006b3e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fda8 	bl	800772c <SPI_EndRxTxTransaction>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e000      	b.n	8006c16 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006c14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4c:	d112      	bne.n	8006c74 <HAL_SPI_Receive+0x44>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10e      	bne.n	8006c74 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f908 	bl	8006e80 <HAL_SPI_TransmitReceive>
 8006c70:	4603      	mov	r3, r0
 8006c72:	e101      	b.n	8006e78 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_SPI_Receive+0x52>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e0fa      	b.n	8006e78 <HAL_SPI_Receive+0x248>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c8a:	f7fe fb21 	bl	80052d0 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ca0:	e0e1      	b.n	8006e66 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_SPI_Receive+0x7e>
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cb2:	e0d8      	b.n	8006e66 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cfe:	d908      	bls.n	8006d12 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d0e:	605a      	str	r2, [r3, #4]
 8006d10:	e007      	b.n	8006d22 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d20:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2a:	d107      	bne.n	8006d3c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d007      	beq.n	8006d5a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d62:	d867      	bhi.n	8006e34 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d64:	e030      	b.n	8006dc8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d117      	bne.n	8006da4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f103 020c 	add.w	r2, r3, #12
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006da2:	e011      	b.n	8006dc8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da4:	f7fe fa94 	bl	80052d0 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d803      	bhi.n	8006dbc <HAL_SPI_Receive+0x18c>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d102      	bne.n	8006dc2 <HAL_SPI_Receive+0x192>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dc6:	e04e      	b.n	8006e66 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1c8      	bne.n	8006d66 <HAL_SPI_Receive+0x136>
 8006dd4:	e034      	b.n	8006e40 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d115      	bne.n	8006e10 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	b292      	uxth	r2, r2
 8006df0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e0e:	e011      	b.n	8006e34 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e10:	f7fe fa5e 	bl	80052d0 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d803      	bhi.n	8006e28 <HAL_SPI_Receive+0x1f8>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d102      	bne.n	8006e2e <HAL_SPI_Receive+0x1fe>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e32:	e018      	b.n	8006e66 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ca      	bne.n	8006dd6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fc19 	bl	800767c <SPI_EndRxTransaction>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
 8006e62:	e000      	b.n	8006e66 <HAL_SPI_Receive+0x236>
  }

error :
 8006e64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	; 0x28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x26>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e1fb      	b.n	800729e <HAL_SPI_TransmitReceive+0x41e>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eae:	f7fe fa0f 	bl	80052d0 <HAL_GetTick>
 8006eb2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ec2:	887b      	ldrh	r3, [r7, #2]
 8006ec4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ec6:	887b      	ldrh	r3, [r7, #2]
 8006ec8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eca:	7efb      	ldrb	r3, [r7, #27]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d00e      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x6e>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed6:	d106      	bne.n	8006ee6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_SPI_TransmitReceive+0x66>
 8006ee0:	7efb      	ldrb	r3, [r7, #27]
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d003      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006eec:	e1cd      	b.n	800728a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x80>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x80>
 8006efa:	887b      	ldrh	r3, [r7, #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f06:	e1c0      	b.n	800728a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d003      	beq.n	8006f1c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2205      	movs	r2, #5
 8006f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	887a      	ldrh	r2, [r7, #2]
 8006f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	887a      	ldrh	r2, [r7, #2]
 8006f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	887a      	ldrh	r2, [r7, #2]
 8006f42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	887a      	ldrh	r2, [r7, #2]
 8006f48:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f5e:	d802      	bhi.n	8006f66 <HAL_SPI_TransmitReceive+0xe6>
 8006f60:	8a3b      	ldrh	r3, [r7, #16]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d908      	bls.n	8006f78 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	e007      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d007      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fae:	d97c      	bls.n	80070aa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0x13e>
 8006fb8:	8a7b      	ldrh	r3, [r7, #18]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d169      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	881a      	ldrh	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	1c9a      	adds	r2, r3, #2
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe2:	e056      	b.n	8007092 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d11b      	bne.n	800702a <HAL_SPI_TransmitReceive+0x1aa>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <HAL_SPI_TransmitReceive+0x1aa>
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d113      	bne.n	800702a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	881a      	ldrh	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d11c      	bne.n	8007072 <HAL_SPI_TransmitReceive+0x1f2>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d016      	beq.n	8007072 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	b292      	uxth	r2, r2
 8007050:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	1c9a      	adds	r2, r3, #2
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800706e:	2301      	movs	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007072:	f7fe f92d 	bl	80052d0 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707e:	429a      	cmp	r2, r3
 8007080:	d807      	bhi.n	8007092 <HAL_SPI_TransmitReceive+0x212>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d003      	beq.n	8007092 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007090:	e0fb      	b.n	800728a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1a3      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x164>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d19d      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x164>
 80070a8:	e0df      	b.n	800726a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_SPI_TransmitReceive+0x23a>
 80070b2:	8a7b      	ldrh	r3, [r7, #18]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 80cb 	bne.w	8007250 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d912      	bls.n	80070ea <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	1c9a      	adds	r2, r3, #2
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b02      	subs	r3, #2
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070e8:	e0b2      	b.n	8007250 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	7812      	ldrb	r2, [r2, #0]
 80070f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	e09e      	b.n	8007250 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d134      	bne.n	800718a <HAL_SPI_TransmitReceive+0x30a>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02f      	beq.n	800718a <HAL_SPI_TransmitReceive+0x30a>
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	2b01      	cmp	r3, #1
 800712e:	d12c      	bne.n	800718a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d912      	bls.n	8007160 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	881a      	ldrh	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b02      	subs	r3, #2
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800715e:	e012      	b.n	8007186 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b01      	cmp	r3, #1
 8007196:	d148      	bne.n	800722a <HAL_SPI_TransmitReceive+0x3aa>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d042      	beq.n	800722a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d923      	bls.n	80071f8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	b292      	uxth	r2, r2
 80071bc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	1c9a      	adds	r2, r3, #2
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b02      	subs	r3, #2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d81f      	bhi.n	8007226 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071f4:	605a      	str	r2, [r3, #4]
 80071f6:	e016      	b.n	8007226 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f103 020c 	add.w	r2, r3, #12
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007226:	2301      	movs	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800722a:	f7fe f851 	bl	80052d0 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007236:	429a      	cmp	r2, r3
 8007238:	d803      	bhi.n	8007242 <HAL_SPI_TransmitReceive+0x3c2>
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d102      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x3c8>
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800724e:	e01c      	b.n	800728a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	f47f af5b 	bne.w	8007112 <HAL_SPI_TransmitReceive+0x292>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	f47f af54 	bne.w	8007112 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 fa5c 	bl	800772c <SPI_EndRxTxTransaction>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d006      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	661a      	str	r2, [r3, #96]	; 0x60
 8007286:	e000      	b.n	800728a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800729a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3728      	adds	r7, #40	; 0x28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10e      	bne.n	80072e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
    return;
 80072e6:	e0ce      	b.n	8007486 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d009      	beq.n	8007306 <HAL_SPI_IRQHandler+0x5e>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
    return;
 8007304:	e0bf      	b.n	8007486 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <HAL_SPI_IRQHandler+0x7e>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <HAL_SPI_IRQHandler+0x7e>
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80b0 	beq.w	8007486 <HAL_SPI_IRQHandler+0x1de>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80aa 	beq.w	8007486 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d023      	beq.n	8007384 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b03      	cmp	r3, #3
 8007346:	d011      	beq.n	800736c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734c:	f043 0204 	orr.w	r2, r3, #4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	e00b      	b.n	8007384 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	693b      	ldr	r3, [r7, #16]
        return;
 8007382:	e080      	b.n	8007486 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d014      	beq.n	80073b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00c      	beq.n	80073dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c6:	f043 0208 	orr.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d04f      	beq.n	8007484 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d104      	bne.n	8007410 <HAL_SPI_IRQHandler+0x168>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d034      	beq.n	800747a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0203 	bic.w	r2, r2, #3
 800741e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	2b00      	cmp	r3, #0
 8007426:	d011      	beq.n	800744c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	4a17      	ldr	r2, [pc, #92]	; (800748c <HAL_SPI_IRQHandler+0x1e4>)
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe f88a 	bl	800554e <HAL_DMA_Abort_IT>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	2b00      	cmp	r3, #0
 8007452:	d016      	beq.n	8007482 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	4a0c      	ldr	r2, [pc, #48]	; (800748c <HAL_SPI_IRQHandler+0x1e4>)
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe f874 	bl	800554e <HAL_DMA_Abort_IT>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007478:	e003      	b.n	8007482 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f808 	bl	8007490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007480:	e000      	b.n	8007484 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007482:	bf00      	nop
    return;
 8007484:	bf00      	nop
  }
}
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	080074a5 	.word	0x080074a5

08007490 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7ff ffe5 	bl	8007490 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074de:	e04c      	b.n	800757a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d048      	beq.n	800757a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80074e8:	f7fd fef2 	bl	80052d0 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d902      	bls.n	80074fe <SPI_WaitFlagStateUntilTimeout+0x30>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d13d      	bne.n	800757a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800750c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007516:	d111      	bne.n	800753c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	d004      	beq.n	800752c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d107      	bne.n	800753c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800753a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007544:	d10f      	bne.n	8007566 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e00f      	b.n	800759a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d1a3      	bne.n	80074e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80075b0:	e057      	b.n	8007662 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075b8:	d106      	bne.n	80075c8 <SPI_WaitFifoStateUntilTimeout+0x26>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d103      	bne.n	80075c8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d048      	beq.n	8007662 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80075d0:	f7fd fe7e 	bl	80052d0 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d902      	bls.n	80075e6 <SPI_WaitFifoStateUntilTimeout+0x44>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d13d      	bne.n	8007662 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fe:	d111      	bne.n	8007624 <SPI_WaitFifoStateUntilTimeout+0x82>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007608:	d004      	beq.n	8007614 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007612:	d107      	bne.n	8007624 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d10f      	bne.n	800764e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800764c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e008      	b.n	8007674 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4013      	ands	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d19f      	bne.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007690:	d111      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d004      	beq.n	80076a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a4:	d107      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff ff04 	bl	80074ce <SPI_WaitFlagStateUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e023      	b.n	8007724 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076e4:	d11d      	bne.n	8007722 <SPI_EndRxTransaction+0xa6>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ee:	d004      	beq.n	80076fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f8:	d113      	bne.n	8007722 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2200      	movs	r2, #0
 8007702:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff ff4b 	bl	80075a2 <SPI_WaitFifoStateUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e000      	b.n	8007724 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff ff2c 	bl	80075a2 <SPI_WaitFifoStateUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	f043 0220 	orr.w	r2, r3, #32
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e027      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff feaf 	bl	80074ce <SPI_WaitFlagStateUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777a:	f043 0220 	orr.w	r2, r3, #32
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e014      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff ff05 	bl	80075a2 <SPI_WaitFifoStateUntilTimeout>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e000      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e040      	b.n	800784c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fc fa02 	bl	8003be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2224      	movs	r2, #36	; 0x24
 80077e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f98c 	bl	8007b14 <UART_SetConfig>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e022      	b.n	800784c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fd20 	bl	8008254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fda7 	bl	8008398 <UART_CheckIdleState>
 800784a:	4603      	mov	r3, r0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	; 0x28
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	4613      	mov	r3, r2
 8007862:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007868:	2b20      	cmp	r3, #32
 800786a:	f040 8081 	bne.w	8007970 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_UART_Transmit+0x26>
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e079      	b.n	8007972 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_UART_Transmit+0x38>
 8007888:	2302      	movs	r3, #2
 800788a:	e072      	b.n	8007972 <HAL_UART_Transmit+0x11e>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2221      	movs	r2, #33	; 0x21
 800789e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80078a0:	f7fd fd16 	bl	80052d0 <HAL_GetTick>
 80078a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	88fa      	ldrh	r2, [r7, #6]
 80078aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	88fa      	ldrh	r2, [r7, #6]
 80078b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078be:	d108      	bne.n	80078d2 <HAL_UART_Transmit+0x7e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	e003      	b.n	80078da <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80078e2:	e02d      	b.n	8007940 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2200      	movs	r2, #0
 80078ec:	2180      	movs	r1, #128	; 0x80
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fd97 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e039      	b.n	8007972 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10b      	bne.n	800791c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	881a      	ldrh	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007910:	b292      	uxth	r2, r2
 8007912:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3302      	adds	r3, #2
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	e008      	b.n	800792e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	b292      	uxth	r2, r2
 8007926:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1cb      	bne.n	80078e4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2200      	movs	r2, #0
 8007954:	2140      	movs	r1, #64	; 0x40
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fd63 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e005      	b.n	8007972 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b08a      	sub	sp, #40	; 0x28
 800797e:	af02      	add	r7, sp, #8
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798e:	2b20      	cmp	r3, #32
 8007990:	f040 80bb 	bne.w	8007b0a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Receive+0x26>
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0b3      	b.n	8007b0c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Receive+0x38>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e0ac      	b.n	8007b0c <HAL_UART_Receive+0x192>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2222      	movs	r2, #34	; 0x22
 80079c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80079c6:	f7fd fc83 	bl	80052d0 <HAL_GetTick>
 80079ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	88fa      	ldrh	r2, [r7, #6]
 80079d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e4:	d10e      	bne.n	8007a04 <HAL_UART_Receive+0x8a>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <HAL_UART_Receive+0x80>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079f8:	e02d      	b.n	8007a56 <HAL_UART_Receive+0xdc>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	22ff      	movs	r2, #255	; 0xff
 80079fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a02:	e028      	b.n	8007a56 <HAL_UART_Receive+0xdc>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10d      	bne.n	8007a28 <HAL_UART_Receive+0xae>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_UART_Receive+0xa4>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	22ff      	movs	r2, #255	; 0xff
 8007a18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a1c:	e01b      	b.n	8007a56 <HAL_UART_Receive+0xdc>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	227f      	movs	r2, #127	; 0x7f
 8007a22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a26:	e016      	b.n	8007a56 <HAL_UART_Receive+0xdc>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a30:	d10d      	bne.n	8007a4e <HAL_UART_Receive+0xd4>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <HAL_UART_Receive+0xca>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	227f      	movs	r2, #127	; 0x7f
 8007a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a42:	e008      	b.n	8007a56 <HAL_UART_Receive+0xdc>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	223f      	movs	r2, #63	; 0x3f
 8007a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a4c:	e003      	b.n	8007a56 <HAL_UART_Receive+0xdc>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a5c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a66:	d108      	bne.n	8007a7a <HAL_UART_Receive+0x100>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	e003      	b.n	8007a82 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007a8a:	e033      	b.n	8007af4 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2200      	movs	r2, #0
 8007a94:	2120      	movs	r1, #32
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fcc3 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e032      	b.n	8007b0c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	8a7b      	ldrh	r3, [r7, #18]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	3302      	adds	r3, #2
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e00d      	b.n	8007ae2 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	8a7b      	ldrh	r3, [r7, #18]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1c5      	bne.n	8007a8c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2220      	movs	r2, #32
 8007b04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8007b0a:	2302      	movs	r3, #2
  }
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3720      	adds	r7, #32
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b18:	b0a0      	sub	sp, #128	; 0x80
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	431a      	orrs	r2, r3
 8007b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	49a4      	ldr	r1, [pc, #656]	; (8007ddc <UART_SetConfig+0x2c8>)
 8007b4c:	4019      	ands	r1, r3
 8007b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b64:	68d9      	ldr	r1, [r3, #12]
 8007b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	ea40 0301 	orr.w	r3, r0, r1
 8007b6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4b99      	ldr	r3, [pc, #612]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d004      	beq.n	8007b8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b86:	4313      	orrs	r3, r2
 8007b88:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4b90      	ldr	r3, [pc, #576]	; (8007de4 <UART_SetConfig+0x2d0>)
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d125      	bne.n	8007bf4 <UART_SetConfig+0xe0>
 8007ba8:	4b8f      	ldr	r3, [pc, #572]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d81a      	bhi.n	8007bec <UART_SetConfig+0xd8>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0xa8>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007bd2:	e116      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007bda:	e112      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007be2:	e10e      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007bea:	e10a      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007bf2:	e106      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	4b7c      	ldr	r3, [pc, #496]	; (8007dec <UART_SetConfig+0x2d8>)
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d138      	bne.n	8007c70 <UART_SetConfig+0x15c>
 8007bfe:	4b7a      	ldr	r3, [pc, #488]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b0c      	cmp	r3, #12
 8007c0a:	d82d      	bhi.n	8007c68 <UART_SetConfig+0x154>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0x100>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c49 	.word	0x08007c49
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c59 	.word	0x08007c59
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c69 	.word	0x08007c69
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007c4e:	e0d8      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007c56:	e0d4      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007c5e:	e0d0      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007c66:	e0cc      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007c6e:	e0c8      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	4b5e      	ldr	r3, [pc, #376]	; (8007df0 <UART_SetConfig+0x2dc>)
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d125      	bne.n	8007cc6 <UART_SetConfig+0x1b2>
 8007c7a:	4b5b      	ldr	r3, [pc, #364]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c84:	2b30      	cmp	r3, #48	; 0x30
 8007c86:	d016      	beq.n	8007cb6 <UART_SetConfig+0x1a2>
 8007c88:	2b30      	cmp	r3, #48	; 0x30
 8007c8a:	d818      	bhi.n	8007cbe <UART_SetConfig+0x1aa>
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d00a      	beq.n	8007ca6 <UART_SetConfig+0x192>
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d814      	bhi.n	8007cbe <UART_SetConfig+0x1aa>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <UART_SetConfig+0x18a>
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d008      	beq.n	8007cae <UART_SetConfig+0x19a>
 8007c9c:	e00f      	b.n	8007cbe <UART_SetConfig+0x1aa>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007ca4:	e0ad      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007cac:	e0a9      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007cae:	2304      	movs	r3, #4
 8007cb0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007cb4:	e0a5      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007cbc:	e0a1      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007cbe:	2310      	movs	r3, #16
 8007cc0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007cc4:	e09d      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b4a      	ldr	r3, [pc, #296]	; (8007df4 <UART_SetConfig+0x2e0>)
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d125      	bne.n	8007d1c <UART_SetConfig+0x208>
 8007cd0:	4b45      	ldr	r3, [pc, #276]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cda:	2bc0      	cmp	r3, #192	; 0xc0
 8007cdc:	d016      	beq.n	8007d0c <UART_SetConfig+0x1f8>
 8007cde:	2bc0      	cmp	r3, #192	; 0xc0
 8007ce0:	d818      	bhi.n	8007d14 <UART_SetConfig+0x200>
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d00a      	beq.n	8007cfc <UART_SetConfig+0x1e8>
 8007ce6:	2b80      	cmp	r3, #128	; 0x80
 8007ce8:	d814      	bhi.n	8007d14 <UART_SetConfig+0x200>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <UART_SetConfig+0x1e0>
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d008      	beq.n	8007d04 <UART_SetConfig+0x1f0>
 8007cf2:	e00f      	b.n	8007d14 <UART_SetConfig+0x200>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007cfa:	e082      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d02:	e07e      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d04:	2304      	movs	r3, #4
 8007d06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d0a:	e07a      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d12:	e076      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d14:	2310      	movs	r3, #16
 8007d16:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d1a:	e072      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <UART_SetConfig+0x2e4>)
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d12a      	bne.n	8007d7c <UART_SetConfig+0x268>
 8007d26:	4b30      	ldr	r3, [pc, #192]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d34:	d01a      	beq.n	8007d6c <UART_SetConfig+0x258>
 8007d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d3a:	d81b      	bhi.n	8007d74 <UART_SetConfig+0x260>
 8007d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d40:	d00c      	beq.n	8007d5c <UART_SetConfig+0x248>
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d46:	d815      	bhi.n	8007d74 <UART_SetConfig+0x260>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <UART_SetConfig+0x240>
 8007d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d50:	d008      	beq.n	8007d64 <UART_SetConfig+0x250>
 8007d52:	e00f      	b.n	8007d74 <UART_SetConfig+0x260>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d5a:	e052      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d62:	e04e      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d6a:	e04a      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d72:	e046      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007d7a:	e042      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b17      	ldr	r3, [pc, #92]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d13a      	bne.n	8007dfc <UART_SetConfig+0x2e8>
 8007d86:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d94:	d01a      	beq.n	8007dcc <UART_SetConfig+0x2b8>
 8007d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d9a:	d81b      	bhi.n	8007dd4 <UART_SetConfig+0x2c0>
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da0:	d00c      	beq.n	8007dbc <UART_SetConfig+0x2a8>
 8007da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da6:	d815      	bhi.n	8007dd4 <UART_SetConfig+0x2c0>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <UART_SetConfig+0x2a0>
 8007dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db0:	d008      	beq.n	8007dc4 <UART_SetConfig+0x2b0>
 8007db2:	e00f      	b.n	8007dd4 <UART_SetConfig+0x2c0>
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007dba:	e022      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007dc2:	e01e      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007dca:	e01a      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007dd2:	e016      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007dda:	e012      	b.n	8007e02 <UART_SetConfig+0x2ee>
 8007ddc:	efff69f3 	.word	0xefff69f3
 8007de0:	40008000 	.word	0x40008000
 8007de4:	40013800 	.word	0x40013800
 8007de8:	40021000 	.word	0x40021000
 8007dec:	40004400 	.word	0x40004400
 8007df0:	40004800 	.word	0x40004800
 8007df4:	40004c00 	.word	0x40004c00
 8007df8:	40005000 	.word	0x40005000
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4bb6      	ldr	r3, [pc, #728]	; (80080e0 <UART_SetConfig+0x5cc>)
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	f040 810c 	bne.w	8008026 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e0e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d823      	bhi.n	8007e5e <UART_SetConfig+0x34a>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <UART_SetConfig+0x308>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e5f 	.word	0x08007e5f
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e5f 	.word	0x08007e5f
 8007e2c:	08007e4f 	.word	0x08007e4f
 8007e30:	08007e5f 	.word	0x08007e5f
 8007e34:	08007e5f 	.word	0x08007e5f
 8007e38:	08007e5f 	.word	0x08007e5f
 8007e3c:	08007e57 	.word	0x08007e57
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007e40:	f7fe fcb2 	bl	80067a8 <HAL_RCC_GetPCLK1Freq>
 8007e44:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007e46:	e00e      	b.n	8007e66 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007e48:	4ba6      	ldr	r3, [pc, #664]	; (80080e4 <UART_SetConfig+0x5d0>)
 8007e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007e4c:	e00b      	b.n	8007e66 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007e4e:	f7fe fc13 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 8007e52:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007e54:	e007      	b.n	8007e66 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007e5c:	e003      	b.n	8007e66 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8007e64:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 81e5 	beq.w	8008238 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	441a      	add	r2, r3
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d305      	bcc.n	8007e8a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d903      	bls.n	8007e92 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007e90:	e1d2      	b.n	8008238 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8007e92:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	f200 80b0 	bhi.w	8007ffc <UART_SetConfig+0x4e8>
 8007e9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x390>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ffd 	.word	0x08007ffd
 8007eac:	08007f29 	.word	0x08007f29
 8007eb0:	08007ffd 	.word	0x08007ffd
 8007eb4:	08007f69 	.word	0x08007f69
 8007eb8:	08007ffd 	.word	0x08007ffd
 8007ebc:	08007ffd 	.word	0x08007ffd
 8007ec0:	08007ffd 	.word	0x08007ffd
 8007ec4:	08007fc5 	.word	0x08007fc5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007ec8:	f7fe fc6e 	bl	80067a8 <HAL_RCC_GetPCLK1Freq>
 8007ecc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4698      	mov	r8, r3
 8007ed4:	4691      	mov	r9, r2
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8007ee2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8007ee6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8007eea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007eec:	6849      	ldr	r1, [r1, #4]
 8007eee:	0849      	lsrs	r1, r1, #1
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	6539      	str	r1, [r7, #80]	; 0x50
 8007ef4:	6578      	str	r0, [r7, #84]	; 0x54
 8007ef6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8007efa:	4621      	mov	r1, r4
 8007efc:	1851      	adds	r1, r2, r1
 8007efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f00:	4629      	mov	r1, r5
 8007f02:	eb43 0101 	adc.w	r1, r3, r1
 8007f06:	64f9      	str	r1, [r7, #76]	; 0x4c
 8007f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f10:	647a      	str	r2, [r7, #68]	; 0x44
 8007f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f1a:	f7f8 fe95 	bl	8000c48 <__aeabi_uldivmod>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4613      	mov	r3, r2
 8007f24:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007f26:	e06d      	b.n	8008004 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	2200      	movs	r2, #0
 8007f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f32:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f34:	4b6c      	ldr	r3, [pc, #432]	; (80080e8 <UART_SetConfig+0x5d4>)
 8007f36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	18d3      	adds	r3, r2, r3
 8007f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f40:	460b      	mov	r3, r1
 8007f42:	f143 0300 	adc.w	r3, r3, #0
 8007f46:	637b      	str	r3, [r7, #52]	; 0x34
 8007f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f56:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007f5a:	f7f8 fe75 	bl	8000c48 <__aeabi_uldivmod>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4613      	mov	r3, r2
 8007f64:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007f66:	e04d      	b.n	8008004 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007f68:	f7fe fb86 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 8007f6c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f70:	2200      	movs	r2, #0
 8007f72:	461c      	mov	r4, r3
 8007f74:	4615      	mov	r5, r2
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	022b      	lsls	r3, r5, #8
 8007f80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f84:	0222      	lsls	r2, r4, #8
 8007f86:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007f88:	6849      	ldr	r1, [r1, #4]
 8007f8a:	0849      	lsrs	r1, r1, #1
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	6239      	str	r1, [r7, #32]
 8007f90:	6278      	str	r0, [r7, #36]	; 0x24
 8007f92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007f96:	4621      	mov	r1, r4
 8007f98:	1851      	adds	r1, r2, r1
 8007f9a:	61b9      	str	r1, [r7, #24]
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	eb43 0101 	adc.w	r1, r3, r1
 8007fa2:	61f9      	str	r1, [r7, #28]
 8007fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	617a      	str	r2, [r7, #20]
 8007fae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007fb6:	f7f8 fe47 	bl	8000c48 <__aeabi_uldivmod>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007fc2:	e01f      	b.n	8008004 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	2200      	movs	r2, #0
 8007fcc:	469a      	mov	sl, r3
 8007fce:	4693      	mov	fp, r2
 8007fd0:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	f14b 0300 	adc.w	r3, fp, #0
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fee:	f7f8 fe2b 	bl	8000c48 <__aeabi_uldivmod>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007ffa:	e003      	b.n	8008004 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8008002:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800800a:	d308      	bcc.n	800801e <UART_SetConfig+0x50a>
 800800c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800800e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008012:	d204      	bcs.n	800801e <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8008014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	e10c      	b.n	8008238 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008024:	e108      	b.n	8008238 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802e:	f040 808f 	bne.w	8008150 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8008032:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8008036:	2b08      	cmp	r3, #8
 8008038:	d864      	bhi.n	8008104 <UART_SetConfig+0x5f0>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x52c>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008065 	.word	0x08008065
 8008044:	08008085 	.word	0x08008085
 8008048:	080080a5 	.word	0x080080a5
 800804c:	08008105 	.word	0x08008105
 8008050:	080080c1 	.word	0x080080c1
 8008054:	08008105 	.word	0x08008105
 8008058:	08008105 	.word	0x08008105
 800805c:	08008105 	.word	0x08008105
 8008060:	080080ed 	.word	0x080080ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fe fba0 	bl	80067a8 <HAL_RCC_GetPCLK1Freq>
 8008068:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800806a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800806c:	005a      	lsls	r2, r3, #1
 800806e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	441a      	add	r2, r3
 8008076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	fbb2 f3f3 	udiv	r3, r2, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8008082:	e043      	b.n	800810c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fe fba6 	bl	80067d4 <HAL_RCC_GetPCLK2Freq>
 8008088:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800808a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800808c:	005a      	lsls	r2, r3, #1
 800808e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	441a      	add	r2, r3
 8008096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	fbb2 f3f3 	udiv	r3, r2, r3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80080a2:	e033      	b.n	800810c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80080a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80080ae:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80080b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080b4:	6852      	ldr	r2, [r2, #4]
 80080b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80080be:	e025      	b.n	800810c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080c0:	f7fe fada 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 80080c4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080c8:	005a      	lsls	r2, r3, #1
 80080ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	441a      	add	r2, r3
 80080d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	b29b      	uxth	r3, r3
 80080dc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80080de:	e015      	b.n	800810c <UART_SetConfig+0x5f8>
 80080e0:	40008000 	.word	0x40008000
 80080e4:	00f42400 	.word	0x00f42400
 80080e8:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80080ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80080f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	b29b      	uxth	r3, r3
 8008100:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8008102:	e003      	b.n	800810c <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800810a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800810c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800810e:	2b0f      	cmp	r3, #15
 8008110:	d91a      	bls.n	8008148 <UART_SetConfig+0x634>
 8008112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008118:	d216      	bcs.n	8008148 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800811a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800811c:	b29b      	uxth	r3, r3
 800811e:	f023 030f 	bic.w	r3, r3, #15
 8008122:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	b29b      	uxth	r3, r3
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	b29a      	uxth	r2, r3
 8008132:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008136:	4313      	orrs	r3, r2
 8008138:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 800813c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	e077      	b.n	8008238 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800814e:	e073      	b.n	8008238 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8008150:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8008154:	2b08      	cmp	r3, #8
 8008156:	d85c      	bhi.n	8008212 <UART_SetConfig+0x6fe>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <UART_SetConfig+0x64c>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008185 	.word	0x08008185
 8008164:	080081a3 	.word	0x080081a3
 8008168:	080081c1 	.word	0x080081c1
 800816c:	08008213 	.word	0x08008213
 8008170:	080081dd 	.word	0x080081dd
 8008174:	08008213 	.word	0x08008213
 8008178:	08008213 	.word	0x08008213
 800817c:	08008213 	.word	0x08008213
 8008180:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008184:	f7fe fb10 	bl	80067a8 <HAL_RCC_GetPCLK1Freq>
 8008188:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800818a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	085a      	lsrs	r2, r3, #1
 8008190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008192:	441a      	add	r2, r3
 8008194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	fbb2 f3f3 	udiv	r3, r2, r3
 800819c:	b29b      	uxth	r3, r3
 800819e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80081a0:	e03b      	b.n	800821a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a2:	f7fe fb17 	bl	80067d4 <HAL_RCC_GetPCLK2Freq>
 80081a6:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	085a      	lsrs	r2, r3, #1
 80081ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081b0:	441a      	add	r2, r3
 80081b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80081be:	e02c      	b.n	800821a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80081c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	085b      	lsrs	r3, r3, #1
 80081c6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80081ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80081ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081d0:	6852      	ldr	r2, [r2, #4]
 80081d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80081da:	e01e      	b.n	800821a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081dc:	f7fe fa4c 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 80081e0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	085a      	lsrs	r2, r3, #1
 80081e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ea:	441a      	add	r2, r3
 80081ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80081f8:	e00f      	b.n	800821a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80081fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	b29b      	uxth	r3, r3
 800820e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8008210:	e003      	b.n	800821a <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8008218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800821a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d908      	bls.n	8008232 <UART_SetConfig+0x71e>
 8008220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008226:	d204      	bcs.n	8008232 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8008228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	e002      	b.n	8008238 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800823a:	2200      	movs	r2, #0
 800823c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800823e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008240:	2200      	movs	r2, #0
 8008242:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008244:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8008248:	4618      	mov	r0, r3
 800824a:	3780      	adds	r7, #128	; 0x80
 800824c:	46bd      	mov	sp, r7
 800824e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008252:	bf00      	nop

08008254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01a      	beq.n	800836a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008352:	d10a      	bne.n	800836a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af02      	add	r7, sp, #8
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80083a6:	f7fc ff93 	bl	80052d0 <HAL_GetTick>
 80083aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d10e      	bne.n	80083d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f82a 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e020      	b.n	800841a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d10e      	bne.n	8008404 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f814 	bl	8008422 <UART_WaitOnFlagUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e00a      	b.n	800841a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	603b      	str	r3, [r7, #0]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008432:	e05d      	b.n	80084f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d059      	beq.n	80084f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843c:	f7fc ff48 	bl	80052d0 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	429a      	cmp	r2, r3
 800844a:	d302      	bcc.n	8008452 <UART_WaitOnFlagUntilTimeout+0x30>
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d11b      	bne.n	800848a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008460:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e042      	b.n	8008510 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d02b      	beq.n	80084f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a6:	d123      	bne.n	80084f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084c0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0201 	bic.w	r2, r2, #1
 80084d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2220      	movs	r2, #32
 80084e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e00f      	b.n	8008510 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69da      	ldr	r2, [r3, #28]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4013      	ands	r3, r2
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	429a      	cmp	r2, r3
 800850c:	d092      	beq.n	8008434 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <findslot>:
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <findslot+0x2c>)
 800851a:	b510      	push	{r4, lr}
 800851c:	4604      	mov	r4, r0
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	b118      	cbz	r0, 800852a <findslot+0x12>
 8008522:	6a03      	ldr	r3, [r0, #32]
 8008524:	b90b      	cbnz	r3, 800852a <findslot+0x12>
 8008526:	f000 fe35 	bl	8009194 <__sinit>
 800852a:	2c13      	cmp	r4, #19
 800852c:	d807      	bhi.n	800853e <findslot+0x26>
 800852e:	4806      	ldr	r0, [pc, #24]	; (8008548 <findslot+0x30>)
 8008530:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8008534:	3201      	adds	r2, #1
 8008536:	d002      	beq.n	800853e <findslot+0x26>
 8008538:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800853c:	bd10      	pop	{r4, pc}
 800853e:	2000      	movs	r0, #0
 8008540:	e7fc      	b.n	800853c <findslot+0x24>
 8008542:	bf00      	nop
 8008544:	20000140 	.word	0x20000140
 8008548:	20000ec8 	.word	0x20000ec8

0800854c <error>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	4604      	mov	r4, r0
 8008550:	f001 f894 	bl	800967c <__errno>
 8008554:	2613      	movs	r6, #19
 8008556:	4605      	mov	r5, r0
 8008558:	2700      	movs	r7, #0
 800855a:	4630      	mov	r0, r6
 800855c:	4639      	mov	r1, r7
 800855e:	beab      	bkpt	0x00ab
 8008560:	4606      	mov	r6, r0
 8008562:	602e      	str	r6, [r5, #0]
 8008564:	4620      	mov	r0, r4
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008568 <checkerror>:
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d101      	bne.n	8008570 <checkerror+0x8>
 800856c:	f7ff bfee 	b.w	800854c <error>
 8008570:	4770      	bx	lr

08008572 <_swiread>:
 8008572:	b530      	push	{r4, r5, lr}
 8008574:	b085      	sub	sp, #20
 8008576:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800857a:	9203      	str	r2, [sp, #12]
 800857c:	2406      	movs	r4, #6
 800857e:	ad01      	add	r5, sp, #4
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	beab      	bkpt	0x00ab
 8008586:	4604      	mov	r4, r0
 8008588:	4620      	mov	r0, r4
 800858a:	f7ff ffed 	bl	8008568 <checkerror>
 800858e:	b005      	add	sp, #20
 8008590:	bd30      	pop	{r4, r5, pc}

08008592 <_read>:
 8008592:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008594:	4615      	mov	r5, r2
 8008596:	9101      	str	r1, [sp, #4]
 8008598:	f7ff ffbe 	bl	8008518 <findslot>
 800859c:	9901      	ldr	r1, [sp, #4]
 800859e:	4604      	mov	r4, r0
 80085a0:	b938      	cbnz	r0, 80085b2 <_read+0x20>
 80085a2:	f001 f86b 	bl	800967c <__errno>
 80085a6:	2309      	movs	r3, #9
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	b003      	add	sp, #12
 80085b0:	bd30      	pop	{r4, r5, pc}
 80085b2:	6800      	ldr	r0, [r0, #0]
 80085b4:	462a      	mov	r2, r5
 80085b6:	f7ff ffdc 	bl	8008572 <_swiread>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d0f7      	beq.n	80085ae <_read+0x1c>
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	1a2a      	subs	r2, r5, r0
 80085c2:	4413      	add	r3, r2
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	4610      	mov	r0, r2
 80085c8:	e7f1      	b.n	80085ae <_read+0x1c>

080085ca <_swilseek>:
 80085ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	4616      	mov	r6, r2
 80085d0:	f7ff ffa2 	bl	8008518 <findslot>
 80085d4:	4605      	mov	r5, r0
 80085d6:	b940      	cbnz	r0, 80085ea <_swilseek+0x20>
 80085d8:	f001 f850 	bl	800967c <__errno>
 80085dc:	2309      	movs	r3, #9
 80085de:	6003      	str	r3, [r0, #0]
 80085e0:	f04f 34ff 	mov.w	r4, #4294967295
 80085e4:	4620      	mov	r0, r4
 80085e6:	b003      	add	sp, #12
 80085e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ea:	2e02      	cmp	r6, #2
 80085ec:	d903      	bls.n	80085f6 <_swilseek+0x2c>
 80085ee:	f001 f845 	bl	800967c <__errno>
 80085f2:	2316      	movs	r3, #22
 80085f4:	e7f3      	b.n	80085de <_swilseek+0x14>
 80085f6:	2e01      	cmp	r6, #1
 80085f8:	d112      	bne.n	8008620 <_swilseek+0x56>
 80085fa:	6843      	ldr	r3, [r0, #4]
 80085fc:	18e4      	adds	r4, r4, r3
 80085fe:	d4f6      	bmi.n	80085ee <_swilseek+0x24>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	260a      	movs	r6, #10
 8008604:	e9cd 3400 	strd	r3, r4, [sp]
 8008608:	466f      	mov	r7, sp
 800860a:	4630      	mov	r0, r6
 800860c:	4639      	mov	r1, r7
 800860e:	beab      	bkpt	0x00ab
 8008610:	4606      	mov	r6, r0
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff ffa8 	bl	8008568 <checkerror>
 8008618:	2800      	cmp	r0, #0
 800861a:	dbe1      	blt.n	80085e0 <_swilseek+0x16>
 800861c:	606c      	str	r4, [r5, #4]
 800861e:	e7e1      	b.n	80085e4 <_swilseek+0x1a>
 8008620:	2e02      	cmp	r6, #2
 8008622:	6803      	ldr	r3, [r0, #0]
 8008624:	d1ec      	bne.n	8008600 <_swilseek+0x36>
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	260c      	movs	r6, #12
 800862a:	466f      	mov	r7, sp
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	beab      	bkpt	0x00ab
 8008632:	4606      	mov	r6, r0
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff ff97 	bl	8008568 <checkerror>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d0d0      	beq.n	80085e0 <_swilseek+0x16>
 800863e:	4404      	add	r4, r0
 8008640:	e7de      	b.n	8008600 <_swilseek+0x36>

08008642 <_lseek>:
 8008642:	f7ff bfc2 	b.w	80085ca <_swilseek>

08008646 <_swiwrite>:
 8008646:	b530      	push	{r4, r5, lr}
 8008648:	b085      	sub	sp, #20
 800864a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800864e:	9203      	str	r2, [sp, #12]
 8008650:	2405      	movs	r4, #5
 8008652:	ad01      	add	r5, sp, #4
 8008654:	4620      	mov	r0, r4
 8008656:	4629      	mov	r1, r5
 8008658:	beab      	bkpt	0x00ab
 800865a:	4604      	mov	r4, r0
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff ff83 	bl	8008568 <checkerror>
 8008662:	b005      	add	sp, #20
 8008664:	bd30      	pop	{r4, r5, pc}

08008666 <_write>:
 8008666:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008668:	4615      	mov	r5, r2
 800866a:	9101      	str	r1, [sp, #4]
 800866c:	f7ff ff54 	bl	8008518 <findslot>
 8008670:	9901      	ldr	r1, [sp, #4]
 8008672:	4604      	mov	r4, r0
 8008674:	b930      	cbnz	r0, 8008684 <_write+0x1e>
 8008676:	f001 f801 	bl	800967c <__errno>
 800867a:	2309      	movs	r3, #9
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	f04f 30ff 	mov.w	r0, #4294967295
 8008682:	e012      	b.n	80086aa <_write+0x44>
 8008684:	6800      	ldr	r0, [r0, #0]
 8008686:	462a      	mov	r2, r5
 8008688:	f7ff ffdd 	bl	8008646 <_swiwrite>
 800868c:	2800      	cmp	r0, #0
 800868e:	dbf6      	blt.n	800867e <_write+0x18>
 8008690:	6862      	ldr	r2, [r4, #4]
 8008692:	1a2b      	subs	r3, r5, r0
 8008694:	441a      	add	r2, r3
 8008696:	42a8      	cmp	r0, r5
 8008698:	6062      	str	r2, [r4, #4]
 800869a:	d105      	bne.n	80086a8 <_write+0x42>
 800869c:	2000      	movs	r0, #0
 800869e:	b003      	add	sp, #12
 80086a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a4:	f7ff bf52 	b.w	800854c <error>
 80086a8:	4618      	mov	r0, r3
 80086aa:	b003      	add	sp, #12
 80086ac:	bd30      	pop	{r4, r5, pc}

080086ae <_swiclose>:
 80086ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086b0:	2402      	movs	r4, #2
 80086b2:	9001      	str	r0, [sp, #4]
 80086b4:	ad01      	add	r5, sp, #4
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	beab      	bkpt	0x00ab
 80086bc:	4604      	mov	r4, r0
 80086be:	4620      	mov	r0, r4
 80086c0:	f7ff ff52 	bl	8008568 <checkerror>
 80086c4:	b003      	add	sp, #12
 80086c6:	bd30      	pop	{r4, r5, pc}

080086c8 <_close>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4605      	mov	r5, r0
 80086cc:	f7ff ff24 	bl	8008518 <findslot>
 80086d0:	4604      	mov	r4, r0
 80086d2:	b930      	cbnz	r0, 80086e2 <_close+0x1a>
 80086d4:	f000 ffd2 	bl	800967c <__errno>
 80086d8:	2309      	movs	r3, #9
 80086da:	6003      	str	r3, [r0, #0]
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	3d01      	subs	r5, #1
 80086e4:	2d01      	cmp	r5, #1
 80086e6:	d809      	bhi.n	80086fc <_close+0x34>
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <_close+0x48>)
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d104      	bne.n	80086fc <_close+0x34>
 80086f2:	f04f 33ff 	mov.w	r3, #4294967295
 80086f6:	6003      	str	r3, [r0, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e7f1      	b.n	80086e0 <_close+0x18>
 80086fc:	6820      	ldr	r0, [r4, #0]
 80086fe:	f7ff ffd6 	bl	80086ae <_swiclose>
 8008702:	2800      	cmp	r0, #0
 8008704:	d1ec      	bne.n	80086e0 <_close+0x18>
 8008706:	f04f 33ff 	mov.w	r3, #4294967295
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	e7e8      	b.n	80086e0 <_close+0x18>
 800870e:	bf00      	nop
 8008710:	20000ec8 	.word	0x20000ec8

08008714 <_getpid>:
 8008714:	2001      	movs	r0, #1
 8008716:	4770      	bx	lr

08008718 <_swistat>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	460c      	mov	r4, r1
 800871c:	f7ff fefc 	bl	8008518 <findslot>
 8008720:	4605      	mov	r5, r0
 8008722:	b930      	cbnz	r0, 8008732 <_swistat+0x1a>
 8008724:	f000 ffaa 	bl	800967c <__errno>
 8008728:	2309      	movs	r3, #9
 800872a:	6003      	str	r3, [r0, #0]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	6863      	ldr	r3, [r4, #4]
 8008734:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008738:	6063      	str	r3, [r4, #4]
 800873a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800873e:	64a3      	str	r3, [r4, #72]	; 0x48
 8008740:	260c      	movs	r6, #12
 8008742:	4630      	mov	r0, r6
 8008744:	4629      	mov	r1, r5
 8008746:	beab      	bkpt	0x00ab
 8008748:	4605      	mov	r5, r0
 800874a:	4628      	mov	r0, r5
 800874c:	f7ff ff0c 	bl	8008568 <checkerror>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	bf1c      	itt	ne
 8008754:	6120      	strne	r0, [r4, #16]
 8008756:	2000      	movne	r0, #0
 8008758:	e7ea      	b.n	8008730 <_swistat+0x18>

0800875a <_fstat>:
 800875a:	460b      	mov	r3, r1
 800875c:	b510      	push	{r4, lr}
 800875e:	2100      	movs	r1, #0
 8008760:	4604      	mov	r4, r0
 8008762:	2258      	movs	r2, #88	; 0x58
 8008764:	4618      	mov	r0, r3
 8008766:	f000 feb1 	bl	80094cc <memset>
 800876a:	4601      	mov	r1, r0
 800876c:	4620      	mov	r0, r4
 800876e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008772:	f7ff bfd1 	b.w	8008718 <_swistat>

08008776 <_isatty>:
 8008776:	b570      	push	{r4, r5, r6, lr}
 8008778:	f7ff fece 	bl	8008518 <findslot>
 800877c:	2509      	movs	r5, #9
 800877e:	4604      	mov	r4, r0
 8008780:	b920      	cbnz	r0, 800878c <_isatty+0x16>
 8008782:	f000 ff7b 	bl	800967c <__errno>
 8008786:	6005      	str	r5, [r0, #0]
 8008788:	4620      	mov	r0, r4
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	4628      	mov	r0, r5
 800878e:	4621      	mov	r1, r4
 8008790:	beab      	bkpt	0x00ab
 8008792:	4604      	mov	r4, r0
 8008794:	2c01      	cmp	r4, #1
 8008796:	d0f7      	beq.n	8008788 <_isatty+0x12>
 8008798:	f000 ff70 	bl	800967c <__errno>
 800879c:	2400      	movs	r4, #0
 800879e:	4605      	mov	r5, r0
 80087a0:	2613      	movs	r6, #19
 80087a2:	4630      	mov	r0, r6
 80087a4:	4621      	mov	r1, r4
 80087a6:	beab      	bkpt	0x00ab
 80087a8:	4606      	mov	r6, r0
 80087aa:	602e      	str	r6, [r5, #0]
 80087ac:	e7ec      	b.n	8008788 <_isatty+0x12>
	...

080087b0 <exit>:
 80087b0:	b508      	push	{r3, lr}
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <exit+0x1c>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	b113      	cbz	r3, 80087be <exit+0xe>
 80087b8:	2100      	movs	r1, #0
 80087ba:	f3af 8000 	nop.w
 80087be:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <exit+0x20>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <exit+0x16>
 80087c4:	4798      	blx	r3
 80087c6:	4620      	mov	r0, r4
 80087c8:	f003 fed8 	bl	800c57c <_exit>
 80087cc:	00000000 	.word	0x00000000
 80087d0:	200010a0 	.word	0x200010a0

080087d4 <__cvt>:
 80087d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	ec55 4b10 	vmov	r4, r5, d0
 80087dc:	2d00      	cmp	r5, #0
 80087de:	460e      	mov	r6, r1
 80087e0:	4619      	mov	r1, r3
 80087e2:	462b      	mov	r3, r5
 80087e4:	bfbb      	ittet	lt
 80087e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087ea:	461d      	movlt	r5, r3
 80087ec:	2300      	movge	r3, #0
 80087ee:	232d      	movlt	r3, #45	; 0x2d
 80087f0:	700b      	strb	r3, [r1, #0]
 80087f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087f8:	4691      	mov	r9, r2
 80087fa:	f023 0820 	bic.w	r8, r3, #32
 80087fe:	bfbc      	itt	lt
 8008800:	4622      	movlt	r2, r4
 8008802:	4614      	movlt	r4, r2
 8008804:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008808:	d005      	beq.n	8008816 <__cvt+0x42>
 800880a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800880e:	d100      	bne.n	8008812 <__cvt+0x3e>
 8008810:	3601      	adds	r6, #1
 8008812:	2102      	movs	r1, #2
 8008814:	e000      	b.n	8008818 <__cvt+0x44>
 8008816:	2103      	movs	r1, #3
 8008818:	ab03      	add	r3, sp, #12
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	ab02      	add	r3, sp, #8
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	ec45 4b10 	vmov	d0, r4, r5
 8008824:	4653      	mov	r3, sl
 8008826:	4632      	mov	r2, r6
 8008828:	f001 f80a 	bl	8009840 <_dtoa_r>
 800882c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008830:	4607      	mov	r7, r0
 8008832:	d102      	bne.n	800883a <__cvt+0x66>
 8008834:	f019 0f01 	tst.w	r9, #1
 8008838:	d022      	beq.n	8008880 <__cvt+0xac>
 800883a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800883e:	eb07 0906 	add.w	r9, r7, r6
 8008842:	d110      	bne.n	8008866 <__cvt+0x92>
 8008844:	783b      	ldrb	r3, [r7, #0]
 8008846:	2b30      	cmp	r3, #48	; 0x30
 8008848:	d10a      	bne.n	8008860 <__cvt+0x8c>
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8008856:	b918      	cbnz	r0, 8008860 <__cvt+0x8c>
 8008858:	f1c6 0601 	rsb	r6, r6, #1
 800885c:	f8ca 6000 	str.w	r6, [sl]
 8008860:	f8da 3000 	ldr.w	r3, [sl]
 8008864:	4499      	add	r9, r3
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	f7f8 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008872:	b108      	cbz	r0, 8008878 <__cvt+0xa4>
 8008874:	f8cd 900c 	str.w	r9, [sp, #12]
 8008878:	2230      	movs	r2, #48	; 0x30
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	454b      	cmp	r3, r9
 800887e:	d307      	bcc.n	8008890 <__cvt+0xbc>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008884:	1bdb      	subs	r3, r3, r7
 8008886:	4638      	mov	r0, r7
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	b004      	add	sp, #16
 800888c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008890:	1c59      	adds	r1, r3, #1
 8008892:	9103      	str	r1, [sp, #12]
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	e7f0      	b.n	800887a <__cvt+0xa6>

08008898 <__exponent>:
 8008898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800889a:	4603      	mov	r3, r0
 800889c:	2900      	cmp	r1, #0
 800889e:	bfb8      	it	lt
 80088a0:	4249      	neglt	r1, r1
 80088a2:	f803 2b02 	strb.w	r2, [r3], #2
 80088a6:	bfb4      	ite	lt
 80088a8:	222d      	movlt	r2, #45	; 0x2d
 80088aa:	222b      	movge	r2, #43	; 0x2b
 80088ac:	2909      	cmp	r1, #9
 80088ae:	7042      	strb	r2, [r0, #1]
 80088b0:	dd2a      	ble.n	8008908 <__exponent+0x70>
 80088b2:	f10d 0207 	add.w	r2, sp, #7
 80088b6:	4617      	mov	r7, r2
 80088b8:	260a      	movs	r6, #10
 80088ba:	4694      	mov	ip, r2
 80088bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80088c0:	fb06 1415 	mls	r4, r6, r5, r1
 80088c4:	3430      	adds	r4, #48	; 0x30
 80088c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80088ca:	460c      	mov	r4, r1
 80088cc:	2c63      	cmp	r4, #99	; 0x63
 80088ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80088d2:	4629      	mov	r1, r5
 80088d4:	dcf1      	bgt.n	80088ba <__exponent+0x22>
 80088d6:	3130      	adds	r1, #48	; 0x30
 80088d8:	f1ac 0402 	sub.w	r4, ip, #2
 80088dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088e0:	1c41      	adds	r1, r0, #1
 80088e2:	4622      	mov	r2, r4
 80088e4:	42ba      	cmp	r2, r7
 80088e6:	d30a      	bcc.n	80088fe <__exponent+0x66>
 80088e8:	f10d 0209 	add.w	r2, sp, #9
 80088ec:	eba2 020c 	sub.w	r2, r2, ip
 80088f0:	42bc      	cmp	r4, r7
 80088f2:	bf88      	it	hi
 80088f4:	2200      	movhi	r2, #0
 80088f6:	4413      	add	r3, r2
 80088f8:	1a18      	subs	r0, r3, r0
 80088fa:	b003      	add	sp, #12
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008902:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008906:	e7ed      	b.n	80088e4 <__exponent+0x4c>
 8008908:	2330      	movs	r3, #48	; 0x30
 800890a:	3130      	adds	r1, #48	; 0x30
 800890c:	7083      	strb	r3, [r0, #2]
 800890e:	70c1      	strb	r1, [r0, #3]
 8008910:	1d03      	adds	r3, r0, #4
 8008912:	e7f1      	b.n	80088f8 <__exponent+0x60>

08008914 <_printf_float>:
 8008914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008918:	ed2d 8b02 	vpush	{d8}
 800891c:	b08d      	sub	sp, #52	; 0x34
 800891e:	460c      	mov	r4, r1
 8008920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008924:	4616      	mov	r6, r2
 8008926:	461f      	mov	r7, r3
 8008928:	4605      	mov	r5, r0
 800892a:	f000 fe5d 	bl	80095e8 <_localeconv_r>
 800892e:	f8d0 a000 	ldr.w	sl, [r0]
 8008932:	4650      	mov	r0, sl
 8008934:	f7f7 fc9c 	bl	8000270 <strlen>
 8008938:	2300      	movs	r3, #0
 800893a:	930a      	str	r3, [sp, #40]	; 0x28
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	f8d8 3000 	ldr.w	r3, [r8]
 8008944:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008948:	3307      	adds	r3, #7
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	f103 0208 	add.w	r2, r3, #8
 8008952:	f8c8 2000 	str.w	r2, [r8]
 8008956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800895a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	f8cd 8018 	str.w	r8, [sp, #24]
 8008964:	ee08 0a10 	vmov	s16, r0
 8008968:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800896c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008970:	4b9e      	ldr	r3, [pc, #632]	; (8008bec <_printf_float+0x2d8>)
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	f7f8 f8d9 	bl	8000b2c <__aeabi_dcmpun>
 800897a:	bb88      	cbnz	r0, 80089e0 <_printf_float+0xcc>
 800897c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008980:	4b9a      	ldr	r3, [pc, #616]	; (8008bec <_printf_float+0x2d8>)
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	f7f8 f8b3 	bl	8000af0 <__aeabi_dcmple>
 800898a:	bb48      	cbnz	r0, 80089e0 <_printf_float+0xcc>
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f8 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8008998:	b110      	cbz	r0, 80089a0 <_printf_float+0x8c>
 800899a:	232d      	movs	r3, #45	; 0x2d
 800899c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a0:	4a93      	ldr	r2, [pc, #588]	; (8008bf0 <_printf_float+0x2dc>)
 80089a2:	4b94      	ldr	r3, [pc, #592]	; (8008bf4 <_printf_float+0x2e0>)
 80089a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089a8:	bf94      	ite	ls
 80089aa:	4690      	movls	r8, r2
 80089ac:	4698      	movhi	r8, r3
 80089ae:	2303      	movs	r3, #3
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	f023 0304 	bic.w	r3, r3, #4
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	f04f 0900 	mov.w	r9, #0
 80089be:	9700      	str	r7, [sp, #0]
 80089c0:	4633      	mov	r3, r6
 80089c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f9da 	bl	8008d80 <_printf_common>
 80089cc:	3001      	adds	r0, #1
 80089ce:	f040 8090 	bne.w	8008af2 <_printf_float+0x1de>
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	b00d      	add	sp, #52	; 0x34
 80089d8:	ecbd 8b02 	vpop	{d8}
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	4642      	mov	r2, r8
 80089e2:	464b      	mov	r3, r9
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f8 f8a0 	bl	8000b2c <__aeabi_dcmpun>
 80089ec:	b140      	cbz	r0, 8008a00 <_printf_float+0xec>
 80089ee:	464b      	mov	r3, r9
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bfbc      	itt	lt
 80089f4:	232d      	movlt	r3, #45	; 0x2d
 80089f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089fa:	4a7f      	ldr	r2, [pc, #508]	; (8008bf8 <_printf_float+0x2e4>)
 80089fc:	4b7f      	ldr	r3, [pc, #508]	; (8008bfc <_printf_float+0x2e8>)
 80089fe:	e7d1      	b.n	80089a4 <_printf_float+0x90>
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a06:	9206      	str	r2, [sp, #24]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	d13f      	bne.n	8008a8c <_printf_float+0x178>
 8008a0c:	2306      	movs	r3, #6
 8008a0e:	6063      	str	r3, [r4, #4]
 8008a10:	9b05      	ldr	r3, [sp, #20]
 8008a12:	6861      	ldr	r1, [r4, #4]
 8008a14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	ab0a      	add	r3, sp, #40	; 0x28
 8008a1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a22:	ab09      	add	r3, sp, #36	; 0x24
 8008a24:	ec49 8b10 	vmov	d0, r8, r9
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a30:	4628      	mov	r0, r5
 8008a32:	f7ff fecf 	bl	80087d4 <__cvt>
 8008a36:	9b06      	ldr	r3, [sp, #24]
 8008a38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a3a:	2b47      	cmp	r3, #71	; 0x47
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	d108      	bne.n	8008a52 <_printf_float+0x13e>
 8008a40:	1cc8      	adds	r0, r1, #3
 8008a42:	db02      	blt.n	8008a4a <_printf_float+0x136>
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	4299      	cmp	r1, r3
 8008a48:	dd41      	ble.n	8008ace <_printf_float+0x1ba>
 8008a4a:	f1ab 0302 	sub.w	r3, fp, #2
 8008a4e:	fa5f fb83 	uxtb.w	fp, r3
 8008a52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a56:	d820      	bhi.n	8008a9a <_printf_float+0x186>
 8008a58:	3901      	subs	r1, #1
 8008a5a:	465a      	mov	r2, fp
 8008a5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a60:	9109      	str	r1, [sp, #36]	; 0x24
 8008a62:	f7ff ff19 	bl	8008898 <__exponent>
 8008a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a68:	1813      	adds	r3, r2, r0
 8008a6a:	2a01      	cmp	r2, #1
 8008a6c:	4681      	mov	r9, r0
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	dc02      	bgt.n	8008a78 <_printf_float+0x164>
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	07d2      	lsls	r2, r2, #31
 8008a76:	d501      	bpl.n	8008a7c <_printf_float+0x168>
 8008a78:	3301      	adds	r3, #1
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d09c      	beq.n	80089be <_printf_float+0xaa>
 8008a84:	232d      	movs	r3, #45	; 0x2d
 8008a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a8a:	e798      	b.n	80089be <_printf_float+0xaa>
 8008a8c:	9a06      	ldr	r2, [sp, #24]
 8008a8e:	2a47      	cmp	r2, #71	; 0x47
 8008a90:	d1be      	bne.n	8008a10 <_printf_float+0xfc>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1bc      	bne.n	8008a10 <_printf_float+0xfc>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7b9      	b.n	8008a0e <_printf_float+0xfa>
 8008a9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a9e:	d118      	bne.n	8008ad2 <_printf_float+0x1be>
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	6863      	ldr	r3, [r4, #4]
 8008aa4:	dd0b      	ble.n	8008abe <_printf_float+0x1aa>
 8008aa6:	6121      	str	r1, [r4, #16]
 8008aa8:	b913      	cbnz	r3, 8008ab0 <_printf_float+0x19c>
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	07d0      	lsls	r0, r2, #31
 8008aae:	d502      	bpl.n	8008ab6 <_printf_float+0x1a2>
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	440b      	add	r3, r1
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ab8:	f04f 0900 	mov.w	r9, #0
 8008abc:	e7de      	b.n	8008a7c <_printf_float+0x168>
 8008abe:	b913      	cbnz	r3, 8008ac6 <_printf_float+0x1b2>
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	07d2      	lsls	r2, r2, #31
 8008ac4:	d501      	bpl.n	8008aca <_printf_float+0x1b6>
 8008ac6:	3302      	adds	r3, #2
 8008ac8:	e7f4      	b.n	8008ab4 <_printf_float+0x1a0>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e7f2      	b.n	8008ab4 <_printf_float+0x1a0>
 8008ace:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	db05      	blt.n	8008ae4 <_printf_float+0x1d0>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	6121      	str	r1, [r4, #16]
 8008adc:	07d8      	lsls	r0, r3, #31
 8008ade:	d5ea      	bpl.n	8008ab6 <_printf_float+0x1a2>
 8008ae0:	1c4b      	adds	r3, r1, #1
 8008ae2:	e7e7      	b.n	8008ab4 <_printf_float+0x1a0>
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	bfd4      	ite	le
 8008ae8:	f1c1 0202 	rsble	r2, r1, #2
 8008aec:	2201      	movgt	r2, #1
 8008aee:	4413      	add	r3, r2
 8008af0:	e7e0      	b.n	8008ab4 <_printf_float+0x1a0>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	055a      	lsls	r2, r3, #21
 8008af6:	d407      	bmi.n	8008b08 <_printf_float+0x1f4>
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	4642      	mov	r2, r8
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	d12c      	bne.n	8008b60 <_printf_float+0x24c>
 8008b06:	e764      	b.n	80089d2 <_printf_float+0xbe>
 8008b08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b0c:	f240 80e0 	bls.w	8008cd0 <_printf_float+0x3bc>
 8008b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b14:	2200      	movs	r2, #0
 8008b16:	2300      	movs	r3, #0
 8008b18:	f7f7 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d034      	beq.n	8008b8a <_printf_float+0x276>
 8008b20:	4a37      	ldr	r2, [pc, #220]	; (8008c00 <_printf_float+0x2ec>)
 8008b22:	2301      	movs	r3, #1
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af51 	beq.w	80089d2 <_printf_float+0xbe>
 8008b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b34:	429a      	cmp	r2, r3
 8008b36:	db02      	blt.n	8008b3e <_printf_float+0x22a>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	07d8      	lsls	r0, r3, #31
 8008b3c:	d510      	bpl.n	8008b60 <_printf_float+0x24c>
 8008b3e:	ee18 3a10 	vmov	r3, s16
 8008b42:	4652      	mov	r2, sl
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af41 	beq.w	80089d2 <_printf_float+0xbe>
 8008b50:	f04f 0800 	mov.w	r8, #0
 8008b54:	f104 091a 	add.w	r9, r4, #26
 8008b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	4543      	cmp	r3, r8
 8008b5e:	dc09      	bgt.n	8008b74 <_printf_float+0x260>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	079b      	lsls	r3, r3, #30
 8008b64:	f100 8107 	bmi.w	8008d76 <_printf_float+0x462>
 8008b68:	68e0      	ldr	r0, [r4, #12]
 8008b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b6c:	4298      	cmp	r0, r3
 8008b6e:	bfb8      	it	lt
 8008b70:	4618      	movlt	r0, r3
 8008b72:	e730      	b.n	80089d6 <_printf_float+0xc2>
 8008b74:	2301      	movs	r3, #1
 8008b76:	464a      	mov	r2, r9
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f af27 	beq.w	80089d2 <_printf_float+0xbe>
 8008b84:	f108 0801 	add.w	r8, r8, #1
 8008b88:	e7e6      	b.n	8008b58 <_printf_float+0x244>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc39      	bgt.n	8008c04 <_printf_float+0x2f0>
 8008b90:	4a1b      	ldr	r2, [pc, #108]	; (8008c00 <_printf_float+0x2ec>)
 8008b92:	2301      	movs	r3, #1
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af19 	beq.w	80089d2 <_printf_float+0xbe>
 8008ba0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	d102      	bne.n	8008bae <_printf_float+0x29a>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07d9      	lsls	r1, r3, #31
 8008bac:	d5d8      	bpl.n	8008b60 <_printf_float+0x24c>
 8008bae:	ee18 3a10 	vmov	r3, s16
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f43f af09 	beq.w	80089d2 <_printf_float+0xbe>
 8008bc0:	f04f 0900 	mov.w	r9, #0
 8008bc4:	f104 0a1a 	add.w	sl, r4, #26
 8008bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bca:	425b      	negs	r3, r3
 8008bcc:	454b      	cmp	r3, r9
 8008bce:	dc01      	bgt.n	8008bd4 <_printf_float+0x2c0>
 8008bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd2:	e792      	b.n	8008afa <_printf_float+0x1e6>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	4652      	mov	r2, sl
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f aef7 	beq.w	80089d2 <_printf_float+0xbe>
 8008be4:	f109 0901 	add.w	r9, r9, #1
 8008be8:	e7ee      	b.n	8008bc8 <_printf_float+0x2b4>
 8008bea:	bf00      	nop
 8008bec:	7fefffff 	.word	0x7fefffff
 8008bf0:	0800cfd4 	.word	0x0800cfd4
 8008bf4:	0800cfd8 	.word	0x0800cfd8
 8008bf8:	0800cfdc 	.word	0x0800cfdc
 8008bfc:	0800cfe0 	.word	0x0800cfe0
 8008c00:	0800cfe4 	.word	0x0800cfe4
 8008c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	bfa8      	it	ge
 8008c0c:	461a      	movge	r2, r3
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	4691      	mov	r9, r2
 8008c12:	dc37      	bgt.n	8008c84 <_printf_float+0x370>
 8008c14:	f04f 0b00 	mov.w	fp, #0
 8008c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c1c:	f104 021a 	add.w	r2, r4, #26
 8008c20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	eba3 0309 	sub.w	r3, r3, r9
 8008c28:	455b      	cmp	r3, fp
 8008c2a:	dc33      	bgt.n	8008c94 <_printf_float+0x380>
 8008c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c30:	429a      	cmp	r2, r3
 8008c32:	db3b      	blt.n	8008cac <_printf_float+0x398>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	07da      	lsls	r2, r3, #31
 8008c38:	d438      	bmi.n	8008cac <_printf_float+0x398>
 8008c3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c3e:	eba2 0903 	sub.w	r9, r2, r3
 8008c42:	9b05      	ldr	r3, [sp, #20]
 8008c44:	1ad2      	subs	r2, r2, r3
 8008c46:	4591      	cmp	r9, r2
 8008c48:	bfa8      	it	ge
 8008c4a:	4691      	movge	r9, r2
 8008c4c:	f1b9 0f00 	cmp.w	r9, #0
 8008c50:	dc35      	bgt.n	8008cbe <_printf_float+0x3aa>
 8008c52:	f04f 0800 	mov.w	r8, #0
 8008c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c5a:	f104 0a1a 	add.w	sl, r4, #26
 8008c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	eba3 0309 	sub.w	r3, r3, r9
 8008c68:	4543      	cmp	r3, r8
 8008c6a:	f77f af79 	ble.w	8008b60 <_printf_float+0x24c>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4652      	mov	r2, sl
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f aeaa 	beq.w	80089d2 <_printf_float+0xbe>
 8008c7e:	f108 0801 	add.w	r8, r8, #1
 8008c82:	e7ec      	b.n	8008c5e <_printf_float+0x34a>
 8008c84:	4613      	mov	r3, r2
 8008c86:	4631      	mov	r1, r6
 8008c88:	4642      	mov	r2, r8
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d1c0      	bne.n	8008c14 <_printf_float+0x300>
 8008c92:	e69e      	b.n	80089d2 <_printf_float+0xbe>
 8008c94:	2301      	movs	r3, #1
 8008c96:	4631      	mov	r1, r6
 8008c98:	4628      	mov	r0, r5
 8008c9a:	9205      	str	r2, [sp, #20]
 8008c9c:	47b8      	blx	r7
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f43f ae97 	beq.w	80089d2 <_printf_float+0xbe>
 8008ca4:	9a05      	ldr	r2, [sp, #20]
 8008ca6:	f10b 0b01 	add.w	fp, fp, #1
 8008caa:	e7b9      	b.n	8008c20 <_printf_float+0x30c>
 8008cac:	ee18 3a10 	vmov	r3, s16
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d1be      	bne.n	8008c3a <_printf_float+0x326>
 8008cbc:	e689      	b.n	80089d2 <_printf_float+0xbe>
 8008cbe:	9a05      	ldr	r2, [sp, #20]
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	4442      	add	r2, r8
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d1c1      	bne.n	8008c52 <_printf_float+0x33e>
 8008cce:	e680      	b.n	80089d2 <_printf_float+0xbe>
 8008cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd2:	2a01      	cmp	r2, #1
 8008cd4:	dc01      	bgt.n	8008cda <_printf_float+0x3c6>
 8008cd6:	07db      	lsls	r3, r3, #31
 8008cd8:	d53a      	bpl.n	8008d50 <_printf_float+0x43c>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4642      	mov	r2, r8
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f ae74 	beq.w	80089d2 <_printf_float+0xbe>
 8008cea:	ee18 3a10 	vmov	r3, s16
 8008cee:	4652      	mov	r2, sl
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b8      	blx	r7
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	f43f ae6b 	beq.w	80089d2 <_printf_float+0xbe>
 8008cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d00:	2200      	movs	r2, #0
 8008d02:	2300      	movs	r3, #0
 8008d04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008d08:	f7f7 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d0c:	b9d8      	cbnz	r0, 8008d46 <_printf_float+0x432>
 8008d0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d12:	f108 0201 	add.w	r2, r8, #1
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d10e      	bne.n	8008d3e <_printf_float+0x42a>
 8008d20:	e657      	b.n	80089d2 <_printf_float+0xbe>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4652      	mov	r2, sl
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f ae50 	beq.w	80089d2 <_printf_float+0xbe>
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4543      	cmp	r3, r8
 8008d3c:	dcf1      	bgt.n	8008d22 <_printf_float+0x40e>
 8008d3e:	464b      	mov	r3, r9
 8008d40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d44:	e6da      	b.n	8008afc <_printf_float+0x1e8>
 8008d46:	f04f 0800 	mov.w	r8, #0
 8008d4a:	f104 0a1a 	add.w	sl, r4, #26
 8008d4e:	e7f2      	b.n	8008d36 <_printf_float+0x422>
 8008d50:	2301      	movs	r3, #1
 8008d52:	4642      	mov	r2, r8
 8008d54:	e7df      	b.n	8008d16 <_printf_float+0x402>
 8008d56:	2301      	movs	r3, #1
 8008d58:	464a      	mov	r2, r9
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b8      	blx	r7
 8008d60:	3001      	adds	r0, #1
 8008d62:	f43f ae36 	beq.w	80089d2 <_printf_float+0xbe>
 8008d66:	f108 0801 	add.w	r8, r8, #1
 8008d6a:	68e3      	ldr	r3, [r4, #12]
 8008d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d6e:	1a5b      	subs	r3, r3, r1
 8008d70:	4543      	cmp	r3, r8
 8008d72:	dcf0      	bgt.n	8008d56 <_printf_float+0x442>
 8008d74:	e6f8      	b.n	8008b68 <_printf_float+0x254>
 8008d76:	f04f 0800 	mov.w	r8, #0
 8008d7a:	f104 0919 	add.w	r9, r4, #25
 8008d7e:	e7f4      	b.n	8008d6a <_printf_float+0x456>

08008d80 <_printf_common>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	4616      	mov	r6, r2
 8008d86:	4699      	mov	r9, r3
 8008d88:	688a      	ldr	r2, [r1, #8]
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfb8      	it	lt
 8008d94:	4613      	movlt	r3, r2
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	b10a      	cbz	r2, 8008da6 <_printf_common+0x26>
 8008da2:	3301      	adds	r3, #1
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	0699      	lsls	r1, r3, #26
 8008daa:	bf42      	ittt	mi
 8008dac:	6833      	ldrmi	r3, [r6, #0]
 8008dae:	3302      	addmi	r3, #2
 8008db0:	6033      	strmi	r3, [r6, #0]
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	f015 0506 	ands.w	r5, r5, #6
 8008db8:	d106      	bne.n	8008dc8 <_printf_common+0x48>
 8008dba:	f104 0a19 	add.w	sl, r4, #25
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	6832      	ldr	r2, [r6, #0]
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	dc26      	bgt.n	8008e16 <_printf_common+0x96>
 8008dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dcc:	1e13      	subs	r3, r2, #0
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	bf18      	it	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	0692      	lsls	r2, r2, #26
 8008dd6:	d42b      	bmi.n	8008e30 <_printf_common+0xb0>
 8008dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ddc:	4649      	mov	r1, r9
 8008dde:	4638      	mov	r0, r7
 8008de0:	47c0      	blx	r8
 8008de2:	3001      	adds	r0, #1
 8008de4:	d01e      	beq.n	8008e24 <_printf_common+0xa4>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	f003 0306 	and.w	r3, r3, #6
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	bf02      	ittt	eq
 8008df2:	68e5      	ldreq	r5, [r4, #12]
 8008df4:	6833      	ldreq	r3, [r6, #0]
 8008df6:	1aed      	subeq	r5, r5, r3
 8008df8:	68a3      	ldr	r3, [r4, #8]
 8008dfa:	bf0c      	ite	eq
 8008dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e00:	2500      	movne	r5, #0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bfc4      	itt	gt
 8008e06:	1a9b      	subgt	r3, r3, r2
 8008e08:	18ed      	addgt	r5, r5, r3
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	341a      	adds	r4, #26
 8008e0e:	42b5      	cmp	r5, r6
 8008e10:	d11a      	bne.n	8008e48 <_printf_common+0xc8>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e008      	b.n	8008e28 <_printf_common+0xa8>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4652      	mov	r2, sl
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	47c0      	blx	r8
 8008e20:	3001      	adds	r0, #1
 8008e22:	d103      	bne.n	8008e2c <_printf_common+0xac>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	e7c6      	b.n	8008dbe <_printf_common+0x3e>
 8008e30:	18e1      	adds	r1, r4, r3
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	2030      	movs	r0, #48	; 0x30
 8008e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e3a:	4422      	add	r2, r4
 8008e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e44:	3302      	adds	r3, #2
 8008e46:	e7c7      	b.n	8008dd8 <_printf_common+0x58>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4638      	mov	r0, r7
 8008e50:	47c0      	blx	r8
 8008e52:	3001      	adds	r0, #1
 8008e54:	d0e6      	beq.n	8008e24 <_printf_common+0xa4>
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7d9      	b.n	8008e0e <_printf_common+0x8e>
	...

08008e5c <_printf_i>:
 8008e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	7e0f      	ldrb	r7, [r1, #24]
 8008e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e64:	2f78      	cmp	r7, #120	; 0x78
 8008e66:	4691      	mov	r9, r2
 8008e68:	4680      	mov	r8, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	469a      	mov	sl, r3
 8008e6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e72:	d807      	bhi.n	8008e84 <_printf_i+0x28>
 8008e74:	2f62      	cmp	r7, #98	; 0x62
 8008e76:	d80a      	bhi.n	8008e8e <_printf_i+0x32>
 8008e78:	2f00      	cmp	r7, #0
 8008e7a:	f000 80d4 	beq.w	8009026 <_printf_i+0x1ca>
 8008e7e:	2f58      	cmp	r7, #88	; 0x58
 8008e80:	f000 80c0 	beq.w	8009004 <_printf_i+0x1a8>
 8008e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e8c:	e03a      	b.n	8008f04 <_printf_i+0xa8>
 8008e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e92:	2b15      	cmp	r3, #21
 8008e94:	d8f6      	bhi.n	8008e84 <_printf_i+0x28>
 8008e96:	a101      	add	r1, pc, #4	; (adr r1, 8008e9c <_printf_i+0x40>)
 8008e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e9c:	08008ef5 	.word	0x08008ef5
 8008ea0:	08008f09 	.word	0x08008f09
 8008ea4:	08008e85 	.word	0x08008e85
 8008ea8:	08008e85 	.word	0x08008e85
 8008eac:	08008e85 	.word	0x08008e85
 8008eb0:	08008e85 	.word	0x08008e85
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008e85 	.word	0x08008e85
 8008ebc:	08008e85 	.word	0x08008e85
 8008ec0:	08008e85 	.word	0x08008e85
 8008ec4:	08008e85 	.word	0x08008e85
 8008ec8:	0800900d 	.word	0x0800900d
 8008ecc:	08008f35 	.word	0x08008f35
 8008ed0:	08008fc7 	.word	0x08008fc7
 8008ed4:	08008e85 	.word	0x08008e85
 8008ed8:	08008e85 	.word	0x08008e85
 8008edc:	0800902f 	.word	0x0800902f
 8008ee0:	08008e85 	.word	0x08008e85
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008e85 	.word	0x08008e85
 8008eec:	08008e85 	.word	0x08008e85
 8008ef0:	08008fcf 	.word	0x08008fcf
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	1d1a      	adds	r2, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	602a      	str	r2, [r5, #0]
 8008efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f04:	2301      	movs	r3, #1
 8008f06:	e09f      	b.n	8009048 <_printf_i+0x1ec>
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	0607      	lsls	r7, r0, #24
 8008f0e:	f103 0104 	add.w	r1, r3, #4
 8008f12:	6029      	str	r1, [r5, #0]
 8008f14:	d501      	bpl.n	8008f1a <_printf_i+0xbe>
 8008f16:	681e      	ldr	r6, [r3, #0]
 8008f18:	e003      	b.n	8008f22 <_printf_i+0xc6>
 8008f1a:	0646      	lsls	r6, r0, #25
 8008f1c:	d5fb      	bpl.n	8008f16 <_printf_i+0xba>
 8008f1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	da03      	bge.n	8008f2e <_printf_i+0xd2>
 8008f26:	232d      	movs	r3, #45	; 0x2d
 8008f28:	4276      	negs	r6, r6
 8008f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f2e:	485a      	ldr	r0, [pc, #360]	; (8009098 <_printf_i+0x23c>)
 8008f30:	230a      	movs	r3, #10
 8008f32:	e012      	b.n	8008f5a <_printf_i+0xfe>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	6820      	ldr	r0, [r4, #0]
 8008f38:	1d19      	adds	r1, r3, #4
 8008f3a:	6029      	str	r1, [r5, #0]
 8008f3c:	0605      	lsls	r5, r0, #24
 8008f3e:	d501      	bpl.n	8008f44 <_printf_i+0xe8>
 8008f40:	681e      	ldr	r6, [r3, #0]
 8008f42:	e002      	b.n	8008f4a <_printf_i+0xee>
 8008f44:	0641      	lsls	r1, r0, #25
 8008f46:	d5fb      	bpl.n	8008f40 <_printf_i+0xe4>
 8008f48:	881e      	ldrh	r6, [r3, #0]
 8008f4a:	4853      	ldr	r0, [pc, #332]	; (8009098 <_printf_i+0x23c>)
 8008f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008f4e:	bf0c      	ite	eq
 8008f50:	2308      	moveq	r3, #8
 8008f52:	230a      	movne	r3, #10
 8008f54:	2100      	movs	r1, #0
 8008f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f5a:	6865      	ldr	r5, [r4, #4]
 8008f5c:	60a5      	str	r5, [r4, #8]
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	bfa2      	ittt	ge
 8008f62:	6821      	ldrge	r1, [r4, #0]
 8008f64:	f021 0104 	bicge.w	r1, r1, #4
 8008f68:	6021      	strge	r1, [r4, #0]
 8008f6a:	b90e      	cbnz	r6, 8008f70 <_printf_i+0x114>
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	d04b      	beq.n	8009008 <_printf_i+0x1ac>
 8008f70:	4615      	mov	r5, r2
 8008f72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f76:	fb03 6711 	mls	r7, r3, r1, r6
 8008f7a:	5dc7      	ldrb	r7, [r0, r7]
 8008f7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f80:	4637      	mov	r7, r6
 8008f82:	42bb      	cmp	r3, r7
 8008f84:	460e      	mov	r6, r1
 8008f86:	d9f4      	bls.n	8008f72 <_printf_i+0x116>
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d10b      	bne.n	8008fa4 <_printf_i+0x148>
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	07de      	lsls	r6, r3, #31
 8008f90:	d508      	bpl.n	8008fa4 <_printf_i+0x148>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	6861      	ldr	r1, [r4, #4]
 8008f96:	4299      	cmp	r1, r3
 8008f98:	bfde      	ittt	le
 8008f9a:	2330      	movle	r3, #48	; 0x30
 8008f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fa4:	1b52      	subs	r2, r2, r5
 8008fa6:	6122      	str	r2, [r4, #16]
 8008fa8:	f8cd a000 	str.w	sl, [sp]
 8008fac:	464b      	mov	r3, r9
 8008fae:	aa03      	add	r2, sp, #12
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f7ff fee4 	bl	8008d80 <_printf_common>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d14a      	bne.n	8009052 <_printf_i+0x1f6>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b004      	add	sp, #16
 8008fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	f043 0320 	orr.w	r3, r3, #32
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	4833      	ldr	r0, [pc, #204]	; (800909c <_printf_i+0x240>)
 8008fd0:	2778      	movs	r7, #120	; 0x78
 8008fd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	6829      	ldr	r1, [r5, #0]
 8008fda:	061f      	lsls	r7, r3, #24
 8008fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fe0:	d402      	bmi.n	8008fe8 <_printf_i+0x18c>
 8008fe2:	065f      	lsls	r7, r3, #25
 8008fe4:	bf48      	it	mi
 8008fe6:	b2b6      	uxthmi	r6, r6
 8008fe8:	07df      	lsls	r7, r3, #31
 8008fea:	bf48      	it	mi
 8008fec:	f043 0320 	orrmi.w	r3, r3, #32
 8008ff0:	6029      	str	r1, [r5, #0]
 8008ff2:	bf48      	it	mi
 8008ff4:	6023      	strmi	r3, [r4, #0]
 8008ff6:	b91e      	cbnz	r6, 8009000 <_printf_i+0x1a4>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	f023 0320 	bic.w	r3, r3, #32
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	2310      	movs	r3, #16
 8009002:	e7a7      	b.n	8008f54 <_printf_i+0xf8>
 8009004:	4824      	ldr	r0, [pc, #144]	; (8009098 <_printf_i+0x23c>)
 8009006:	e7e4      	b.n	8008fd2 <_printf_i+0x176>
 8009008:	4615      	mov	r5, r2
 800900a:	e7bd      	b.n	8008f88 <_printf_i+0x12c>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	6826      	ldr	r6, [r4, #0]
 8009010:	6961      	ldr	r1, [r4, #20]
 8009012:	1d18      	adds	r0, r3, #4
 8009014:	6028      	str	r0, [r5, #0]
 8009016:	0635      	lsls	r5, r6, #24
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	d501      	bpl.n	8009020 <_printf_i+0x1c4>
 800901c:	6019      	str	r1, [r3, #0]
 800901e:	e002      	b.n	8009026 <_printf_i+0x1ca>
 8009020:	0670      	lsls	r0, r6, #25
 8009022:	d5fb      	bpl.n	800901c <_printf_i+0x1c0>
 8009024:	8019      	strh	r1, [r3, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	6123      	str	r3, [r4, #16]
 800902a:	4615      	mov	r5, r2
 800902c:	e7bc      	b.n	8008fa8 <_printf_i+0x14c>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	602a      	str	r2, [r5, #0]
 8009034:	681d      	ldr	r5, [r3, #0]
 8009036:	6862      	ldr	r2, [r4, #4]
 8009038:	2100      	movs	r1, #0
 800903a:	4628      	mov	r0, r5
 800903c:	f7f7 f8c8 	bl	80001d0 <memchr>
 8009040:	b108      	cbz	r0, 8009046 <_printf_i+0x1ea>
 8009042:	1b40      	subs	r0, r0, r5
 8009044:	6060      	str	r0, [r4, #4]
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	2300      	movs	r3, #0
 800904c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009050:	e7aa      	b.n	8008fa8 <_printf_i+0x14c>
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	462a      	mov	r2, r5
 8009056:	4649      	mov	r1, r9
 8009058:	4640      	mov	r0, r8
 800905a:	47d0      	blx	sl
 800905c:	3001      	adds	r0, #1
 800905e:	d0ad      	beq.n	8008fbc <_printf_i+0x160>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	079b      	lsls	r3, r3, #30
 8009064:	d413      	bmi.n	800908e <_printf_i+0x232>
 8009066:	68e0      	ldr	r0, [r4, #12]
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	4298      	cmp	r0, r3
 800906c:	bfb8      	it	lt
 800906e:	4618      	movlt	r0, r3
 8009070:	e7a6      	b.n	8008fc0 <_printf_i+0x164>
 8009072:	2301      	movs	r3, #1
 8009074:	4632      	mov	r2, r6
 8009076:	4649      	mov	r1, r9
 8009078:	4640      	mov	r0, r8
 800907a:	47d0      	blx	sl
 800907c:	3001      	adds	r0, #1
 800907e:	d09d      	beq.n	8008fbc <_printf_i+0x160>
 8009080:	3501      	adds	r5, #1
 8009082:	68e3      	ldr	r3, [r4, #12]
 8009084:	9903      	ldr	r1, [sp, #12]
 8009086:	1a5b      	subs	r3, r3, r1
 8009088:	42ab      	cmp	r3, r5
 800908a:	dcf2      	bgt.n	8009072 <_printf_i+0x216>
 800908c:	e7eb      	b.n	8009066 <_printf_i+0x20a>
 800908e:	2500      	movs	r5, #0
 8009090:	f104 0619 	add.w	r6, r4, #25
 8009094:	e7f5      	b.n	8009082 <_printf_i+0x226>
 8009096:	bf00      	nop
 8009098:	0800cfe6 	.word	0x0800cfe6
 800909c:	0800cff7 	.word	0x0800cff7

080090a0 <std>:
 80090a0:	2300      	movs	r3, #0
 80090a2:	b510      	push	{r4, lr}
 80090a4:	4604      	mov	r4, r0
 80090a6:	e9c0 3300 	strd	r3, r3, [r0]
 80090aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ae:	6083      	str	r3, [r0, #8]
 80090b0:	8181      	strh	r1, [r0, #12]
 80090b2:	6643      	str	r3, [r0, #100]	; 0x64
 80090b4:	81c2      	strh	r2, [r0, #14]
 80090b6:	6183      	str	r3, [r0, #24]
 80090b8:	4619      	mov	r1, r3
 80090ba:	2208      	movs	r2, #8
 80090bc:	305c      	adds	r0, #92	; 0x5c
 80090be:	f000 fa05 	bl	80094cc <memset>
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <std+0x38>)
 80090c4:	6263      	str	r3, [r4, #36]	; 0x24
 80090c6:	4b05      	ldr	r3, [pc, #20]	; (80090dc <std+0x3c>)
 80090c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <std+0x40>)
 80090cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <std+0x44>)
 80090d0:	6224      	str	r4, [r4, #32]
 80090d2:	6323      	str	r3, [r4, #48]	; 0x30
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	0800931d 	.word	0x0800931d
 80090dc:	0800933f 	.word	0x0800933f
 80090e0:	08009377 	.word	0x08009377
 80090e4:	0800939b 	.word	0x0800939b

080090e8 <stdio_exit_handler>:
 80090e8:	4a02      	ldr	r2, [pc, #8]	; (80090f4 <stdio_exit_handler+0xc>)
 80090ea:	4903      	ldr	r1, [pc, #12]	; (80090f8 <stdio_exit_handler+0x10>)
 80090ec:	4803      	ldr	r0, [pc, #12]	; (80090fc <stdio_exit_handler+0x14>)
 80090ee:	f000 b869 	b.w	80091c4 <_fwalk_sglue>
 80090f2:	bf00      	nop
 80090f4:	200000e8 	.word	0x200000e8
 80090f8:	0800b361 	.word	0x0800b361
 80090fc:	200000f4 	.word	0x200000f4

08009100 <cleanup_stdio>:
 8009100:	6841      	ldr	r1, [r0, #4]
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <cleanup_stdio+0x34>)
 8009104:	4299      	cmp	r1, r3
 8009106:	b510      	push	{r4, lr}
 8009108:	4604      	mov	r4, r0
 800910a:	d001      	beq.n	8009110 <cleanup_stdio+0x10>
 800910c:	f002 f928 	bl	800b360 <_fflush_r>
 8009110:	68a1      	ldr	r1, [r4, #8]
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <cleanup_stdio+0x38>)
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <cleanup_stdio+0x1e>
 8009118:	4620      	mov	r0, r4
 800911a:	f002 f921 	bl	800b360 <_fflush_r>
 800911e:	68e1      	ldr	r1, [r4, #12]
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <cleanup_stdio+0x3c>)
 8009122:	4299      	cmp	r1, r3
 8009124:	d004      	beq.n	8009130 <cleanup_stdio+0x30>
 8009126:	4620      	mov	r0, r4
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	f002 b918 	b.w	800b360 <_fflush_r>
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop
 8009134:	20000f68 	.word	0x20000f68
 8009138:	20000fd0 	.word	0x20000fd0
 800913c:	20001038 	.word	0x20001038

08009140 <global_stdio_init.part.0>:
 8009140:	b510      	push	{r4, lr}
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <global_stdio_init.part.0+0x30>)
 8009144:	4c0b      	ldr	r4, [pc, #44]	; (8009174 <global_stdio_init.part.0+0x34>)
 8009146:	4a0c      	ldr	r2, [pc, #48]	; (8009178 <global_stdio_init.part.0+0x38>)
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	4620      	mov	r0, r4
 800914c:	2200      	movs	r2, #0
 800914e:	2104      	movs	r1, #4
 8009150:	f7ff ffa6 	bl	80090a0 <std>
 8009154:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009158:	2201      	movs	r2, #1
 800915a:	2109      	movs	r1, #9
 800915c:	f7ff ffa0 	bl	80090a0 <std>
 8009160:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009164:	2202      	movs	r2, #2
 8009166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800916a:	2112      	movs	r1, #18
 800916c:	f7ff bf98 	b.w	80090a0 <std>
 8009170:	200010a0 	.word	0x200010a0
 8009174:	20000f68 	.word	0x20000f68
 8009178:	080090e9 	.word	0x080090e9

0800917c <__sfp_lock_acquire>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__sfp_lock_acquire+0x8>)
 800917e:	f000 baa7 	b.w	80096d0 <__retarget_lock_acquire_recursive>
 8009182:	bf00      	nop
 8009184:	200010a9 	.word	0x200010a9

08009188 <__sfp_lock_release>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_release+0x8>)
 800918a:	f000 baa2 	b.w	80096d2 <__retarget_lock_release_recursive>
 800918e:	bf00      	nop
 8009190:	200010a9 	.word	0x200010a9

08009194 <__sinit>:
 8009194:	b510      	push	{r4, lr}
 8009196:	4604      	mov	r4, r0
 8009198:	f7ff fff0 	bl	800917c <__sfp_lock_acquire>
 800919c:	6a23      	ldr	r3, [r4, #32]
 800919e:	b11b      	cbz	r3, 80091a8 <__sinit+0x14>
 80091a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a4:	f7ff bff0 	b.w	8009188 <__sfp_lock_release>
 80091a8:	4b04      	ldr	r3, [pc, #16]	; (80091bc <__sinit+0x28>)
 80091aa:	6223      	str	r3, [r4, #32]
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <__sinit+0x2c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1f5      	bne.n	80091a0 <__sinit+0xc>
 80091b4:	f7ff ffc4 	bl	8009140 <global_stdio_init.part.0>
 80091b8:	e7f2      	b.n	80091a0 <__sinit+0xc>
 80091ba:	bf00      	nop
 80091bc:	08009101 	.word	0x08009101
 80091c0:	200010a0 	.word	0x200010a0

080091c4 <_fwalk_sglue>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	4607      	mov	r7, r0
 80091ca:	4688      	mov	r8, r1
 80091cc:	4614      	mov	r4, r2
 80091ce:	2600      	movs	r6, #0
 80091d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d4:	f1b9 0901 	subs.w	r9, r9, #1
 80091d8:	d505      	bpl.n	80091e6 <_fwalk_sglue+0x22>
 80091da:	6824      	ldr	r4, [r4, #0]
 80091dc:	2c00      	cmp	r4, #0
 80091de:	d1f7      	bne.n	80091d0 <_fwalk_sglue+0xc>
 80091e0:	4630      	mov	r0, r6
 80091e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d907      	bls.n	80091fc <_fwalk_sglue+0x38>
 80091ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091f0:	3301      	adds	r3, #1
 80091f2:	d003      	beq.n	80091fc <_fwalk_sglue+0x38>
 80091f4:	4629      	mov	r1, r5
 80091f6:	4638      	mov	r0, r7
 80091f8:	47c0      	blx	r8
 80091fa:	4306      	orrs	r6, r0
 80091fc:	3568      	adds	r5, #104	; 0x68
 80091fe:	e7e9      	b.n	80091d4 <_fwalk_sglue+0x10>

08009200 <iprintf>:
 8009200:	b40f      	push	{r0, r1, r2, r3}
 8009202:	b507      	push	{r0, r1, r2, lr}
 8009204:	4906      	ldr	r1, [pc, #24]	; (8009220 <iprintf+0x20>)
 8009206:	ab04      	add	r3, sp, #16
 8009208:	6808      	ldr	r0, [r1, #0]
 800920a:	f853 2b04 	ldr.w	r2, [r3], #4
 800920e:	6881      	ldr	r1, [r0, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	f001 ff05 	bl	800b020 <_vfiprintf_r>
 8009216:	b003      	add	sp, #12
 8009218:	f85d eb04 	ldr.w	lr, [sp], #4
 800921c:	b004      	add	sp, #16
 800921e:	4770      	bx	lr
 8009220:	20000140 	.word	0x20000140

08009224 <_puts_r>:
 8009224:	6a03      	ldr	r3, [r0, #32]
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	6884      	ldr	r4, [r0, #8]
 800922a:	4605      	mov	r5, r0
 800922c:	460e      	mov	r6, r1
 800922e:	b90b      	cbnz	r3, 8009234 <_puts_r+0x10>
 8009230:	f7ff ffb0 	bl	8009194 <__sinit>
 8009234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009236:	07db      	lsls	r3, r3, #31
 8009238:	d405      	bmi.n	8009246 <_puts_r+0x22>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	0598      	lsls	r0, r3, #22
 800923e:	d402      	bmi.n	8009246 <_puts_r+0x22>
 8009240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009242:	f000 fa45 	bl	80096d0 <__retarget_lock_acquire_recursive>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	0719      	lsls	r1, r3, #28
 800924a:	d513      	bpl.n	8009274 <_puts_r+0x50>
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	b18b      	cbz	r3, 8009274 <_puts_r+0x50>
 8009250:	3e01      	subs	r6, #1
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009258:	3b01      	subs	r3, #1
 800925a:	60a3      	str	r3, [r4, #8]
 800925c:	b9e9      	cbnz	r1, 800929a <_puts_r+0x76>
 800925e:	2b00      	cmp	r3, #0
 8009260:	da2e      	bge.n	80092c0 <_puts_r+0x9c>
 8009262:	4622      	mov	r2, r4
 8009264:	210a      	movs	r1, #10
 8009266:	4628      	mov	r0, r5
 8009268:	f000 f89b 	bl	80093a2 <__swbuf_r>
 800926c:	3001      	adds	r0, #1
 800926e:	d007      	beq.n	8009280 <_puts_r+0x5c>
 8009270:	250a      	movs	r5, #10
 8009272:	e007      	b.n	8009284 <_puts_r+0x60>
 8009274:	4621      	mov	r1, r4
 8009276:	4628      	mov	r0, r5
 8009278:	f000 f8d0 	bl	800941c <__swsetup_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	d0e7      	beq.n	8009250 <_puts_r+0x2c>
 8009280:	f04f 35ff 	mov.w	r5, #4294967295
 8009284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009286:	07da      	lsls	r2, r3, #31
 8009288:	d405      	bmi.n	8009296 <_puts_r+0x72>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	d402      	bmi.n	8009296 <_puts_r+0x72>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f000 fa1e 	bl	80096d2 <__retarget_lock_release_recursive>
 8009296:	4628      	mov	r0, r5
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	2b00      	cmp	r3, #0
 800929c:	da04      	bge.n	80092a8 <_puts_r+0x84>
 800929e:	69a2      	ldr	r2, [r4, #24]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	dc06      	bgt.n	80092b2 <_puts_r+0x8e>
 80092a4:	290a      	cmp	r1, #10
 80092a6:	d004      	beq.n	80092b2 <_puts_r+0x8e>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	6022      	str	r2, [r4, #0]
 80092ae:	7019      	strb	r1, [r3, #0]
 80092b0:	e7cf      	b.n	8009252 <_puts_r+0x2e>
 80092b2:	4622      	mov	r2, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	f000 f874 	bl	80093a2 <__swbuf_r>
 80092ba:	3001      	adds	r0, #1
 80092bc:	d1c9      	bne.n	8009252 <_puts_r+0x2e>
 80092be:	e7df      	b.n	8009280 <_puts_r+0x5c>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	250a      	movs	r5, #10
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	6022      	str	r2, [r4, #0]
 80092c8:	701d      	strb	r5, [r3, #0]
 80092ca:	e7db      	b.n	8009284 <_puts_r+0x60>

080092cc <puts>:
 80092cc:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <puts+0xc>)
 80092ce:	4601      	mov	r1, r0
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f7ff bfa7 	b.w	8009224 <_puts_r>
 80092d6:	bf00      	nop
 80092d8:	20000140 	.word	0x20000140

080092dc <siprintf>:
 80092dc:	b40e      	push	{r1, r2, r3}
 80092de:	b500      	push	{lr}
 80092e0:	b09c      	sub	sp, #112	; 0x70
 80092e2:	ab1d      	add	r3, sp, #116	; 0x74
 80092e4:	9002      	str	r0, [sp, #8]
 80092e6:	9006      	str	r0, [sp, #24]
 80092e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092ec:	4809      	ldr	r0, [pc, #36]	; (8009314 <siprintf+0x38>)
 80092ee:	9107      	str	r1, [sp, #28]
 80092f0:	9104      	str	r1, [sp, #16]
 80092f2:	4909      	ldr	r1, [pc, #36]	; (8009318 <siprintf+0x3c>)
 80092f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f8:	9105      	str	r1, [sp, #20]
 80092fa:	6800      	ldr	r0, [r0, #0]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	a902      	add	r1, sp, #8
 8009300:	f001 fd66 	bl	800add0 <_svfiprintf_r>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
 800930a:	b01c      	add	sp, #112	; 0x70
 800930c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009310:	b003      	add	sp, #12
 8009312:	4770      	bx	lr
 8009314:	20000140 	.word	0x20000140
 8009318:	ffff0208 	.word	0xffff0208

0800931c <__sread>:
 800931c:	b510      	push	{r4, lr}
 800931e:	460c      	mov	r4, r1
 8009320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009324:	f000 f986 	bl	8009634 <_read_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	bfab      	itete	ge
 800932c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800932e:	89a3      	ldrhlt	r3, [r4, #12]
 8009330:	181b      	addge	r3, r3, r0
 8009332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009336:	bfac      	ite	ge
 8009338:	6563      	strge	r3, [r4, #84]	; 0x54
 800933a:	81a3      	strhlt	r3, [r4, #12]
 800933c:	bd10      	pop	{r4, pc}

0800933e <__swrite>:
 800933e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009342:	461f      	mov	r7, r3
 8009344:	898b      	ldrh	r3, [r1, #12]
 8009346:	05db      	lsls	r3, r3, #23
 8009348:	4605      	mov	r5, r0
 800934a:	460c      	mov	r4, r1
 800934c:	4616      	mov	r6, r2
 800934e:	d505      	bpl.n	800935c <__swrite+0x1e>
 8009350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009354:	2302      	movs	r3, #2
 8009356:	2200      	movs	r2, #0
 8009358:	f000 f95a 	bl	8009610 <_lseek_r>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	4632      	mov	r2, r6
 800936a:	463b      	mov	r3, r7
 800936c:	4628      	mov	r0, r5
 800936e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009372:	f000 b971 	b.w	8009658 <_write_r>

08009376 <__sseek>:
 8009376:	b510      	push	{r4, lr}
 8009378:	460c      	mov	r4, r1
 800937a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937e:	f000 f947 	bl	8009610 <_lseek_r>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	bf15      	itete	ne
 8009388:	6560      	strne	r0, [r4, #84]	; 0x54
 800938a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800938e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009392:	81a3      	strheq	r3, [r4, #12]
 8009394:	bf18      	it	ne
 8009396:	81a3      	strhne	r3, [r4, #12]
 8009398:	bd10      	pop	{r4, pc}

0800939a <__sclose>:
 800939a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939e:	f000 b927 	b.w	80095f0 <_close_r>

080093a2 <__swbuf_r>:
 80093a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a4:	460e      	mov	r6, r1
 80093a6:	4614      	mov	r4, r2
 80093a8:	4605      	mov	r5, r0
 80093aa:	b118      	cbz	r0, 80093b4 <__swbuf_r+0x12>
 80093ac:	6a03      	ldr	r3, [r0, #32]
 80093ae:	b90b      	cbnz	r3, 80093b4 <__swbuf_r+0x12>
 80093b0:	f7ff fef0 	bl	8009194 <__sinit>
 80093b4:	69a3      	ldr	r3, [r4, #24]
 80093b6:	60a3      	str	r3, [r4, #8]
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	071a      	lsls	r2, r3, #28
 80093bc:	d525      	bpl.n	800940a <__swbuf_r+0x68>
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	b31b      	cbz	r3, 800940a <__swbuf_r+0x68>
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	6922      	ldr	r2, [r4, #16]
 80093c6:	1a98      	subs	r0, r3, r2
 80093c8:	6963      	ldr	r3, [r4, #20]
 80093ca:	b2f6      	uxtb	r6, r6
 80093cc:	4283      	cmp	r3, r0
 80093ce:	4637      	mov	r7, r6
 80093d0:	dc04      	bgt.n	80093dc <__swbuf_r+0x3a>
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f001 ffc3 	bl	800b360 <_fflush_r>
 80093da:	b9e0      	cbnz	r0, 8009416 <__swbuf_r+0x74>
 80093dc:	68a3      	ldr	r3, [r4, #8]
 80093de:	3b01      	subs	r3, #1
 80093e0:	60a3      	str	r3, [r4, #8]
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	6022      	str	r2, [r4, #0]
 80093e8:	701e      	strb	r6, [r3, #0]
 80093ea:	6962      	ldr	r2, [r4, #20]
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d004      	beq.n	80093fc <__swbuf_r+0x5a>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	07db      	lsls	r3, r3, #31
 80093f6:	d506      	bpl.n	8009406 <__swbuf_r+0x64>
 80093f8:	2e0a      	cmp	r6, #10
 80093fa:	d104      	bne.n	8009406 <__swbuf_r+0x64>
 80093fc:	4621      	mov	r1, r4
 80093fe:	4628      	mov	r0, r5
 8009400:	f001 ffae 	bl	800b360 <_fflush_r>
 8009404:	b938      	cbnz	r0, 8009416 <__swbuf_r+0x74>
 8009406:	4638      	mov	r0, r7
 8009408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940a:	4621      	mov	r1, r4
 800940c:	4628      	mov	r0, r5
 800940e:	f000 f805 	bl	800941c <__swsetup_r>
 8009412:	2800      	cmp	r0, #0
 8009414:	d0d5      	beq.n	80093c2 <__swbuf_r+0x20>
 8009416:	f04f 37ff 	mov.w	r7, #4294967295
 800941a:	e7f4      	b.n	8009406 <__swbuf_r+0x64>

0800941c <__swsetup_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4b2a      	ldr	r3, [pc, #168]	; (80094c8 <__swsetup_r+0xac>)
 8009420:	4605      	mov	r5, r0
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	460c      	mov	r4, r1
 8009426:	b118      	cbz	r0, 8009430 <__swsetup_r+0x14>
 8009428:	6a03      	ldr	r3, [r0, #32]
 800942a:	b90b      	cbnz	r3, 8009430 <__swsetup_r+0x14>
 800942c:	f7ff feb2 	bl	8009194 <__sinit>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009436:	0718      	lsls	r0, r3, #28
 8009438:	d422      	bmi.n	8009480 <__swsetup_r+0x64>
 800943a:	06d9      	lsls	r1, r3, #27
 800943c:	d407      	bmi.n	800944e <__swsetup_r+0x32>
 800943e:	2309      	movs	r3, #9
 8009440:	602b      	str	r3, [r5, #0]
 8009442:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e034      	b.n	80094b8 <__swsetup_r+0x9c>
 800944e:	0758      	lsls	r0, r3, #29
 8009450:	d512      	bpl.n	8009478 <__swsetup_r+0x5c>
 8009452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009454:	b141      	cbz	r1, 8009468 <__swsetup_r+0x4c>
 8009456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800945a:	4299      	cmp	r1, r3
 800945c:	d002      	beq.n	8009464 <__swsetup_r+0x48>
 800945e:	4628      	mov	r0, r5
 8009460:	f000 ffe0 	bl	800a424 <_free_r>
 8009464:	2300      	movs	r3, #0
 8009466:	6363      	str	r3, [r4, #52]	; 0x34
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	2300      	movs	r3, #0
 8009472:	6063      	str	r3, [r4, #4]
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f043 0308 	orr.w	r3, r3, #8
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	b94b      	cbnz	r3, 8009498 <__swsetup_r+0x7c>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800948a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800948e:	d003      	beq.n	8009498 <__swsetup_r+0x7c>
 8009490:	4621      	mov	r1, r4
 8009492:	4628      	mov	r0, r5
 8009494:	f001 ffc4 	bl	800b420 <__smakebuf_r>
 8009498:	89a0      	ldrh	r0, [r4, #12]
 800949a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800949e:	f010 0301 	ands.w	r3, r0, #1
 80094a2:	d00a      	beq.n	80094ba <__swsetup_r+0x9e>
 80094a4:	2300      	movs	r3, #0
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	6963      	ldr	r3, [r4, #20]
 80094aa:	425b      	negs	r3, r3
 80094ac:	61a3      	str	r3, [r4, #24]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	b943      	cbnz	r3, 80094c4 <__swsetup_r+0xa8>
 80094b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094b6:	d1c4      	bne.n	8009442 <__swsetup_r+0x26>
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	0781      	lsls	r1, r0, #30
 80094bc:	bf58      	it	pl
 80094be:	6963      	ldrpl	r3, [r4, #20]
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	e7f4      	b.n	80094ae <__swsetup_r+0x92>
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7f7      	b.n	80094b8 <__swsetup_r+0x9c>
 80094c8:	20000140 	.word	0x20000140

080094cc <memset>:
 80094cc:	4402      	add	r2, r0
 80094ce:	4603      	mov	r3, r0
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d100      	bne.n	80094d6 <memset+0xa>
 80094d4:	4770      	bx	lr
 80094d6:	f803 1b01 	strb.w	r1, [r3], #1
 80094da:	e7f9      	b.n	80094d0 <memset+0x4>

080094dc <strncpy>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	3901      	subs	r1, #1
 80094e0:	4603      	mov	r3, r0
 80094e2:	b132      	cbz	r2, 80094f2 <strncpy+0x16>
 80094e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80094e8:	f803 4b01 	strb.w	r4, [r3], #1
 80094ec:	3a01      	subs	r2, #1
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	d1f7      	bne.n	80094e2 <strncpy+0x6>
 80094f2:	441a      	add	r2, r3
 80094f4:	2100      	movs	r1, #0
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d100      	bne.n	80094fc <strncpy+0x20>
 80094fa:	bd10      	pop	{r4, pc}
 80094fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009500:	e7f9      	b.n	80094f6 <strncpy+0x1a>
	...

08009504 <strtok>:
 8009504:	4b16      	ldr	r3, [pc, #88]	; (8009560 <strtok+0x5c>)
 8009506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009508:	681e      	ldr	r6, [r3, #0]
 800950a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800950c:	4605      	mov	r5, r0
 800950e:	b9fc      	cbnz	r4, 8009550 <strtok+0x4c>
 8009510:	2050      	movs	r0, #80	; 0x50
 8009512:	9101      	str	r1, [sp, #4]
 8009514:	f000 ffd2 	bl	800a4bc <malloc>
 8009518:	9901      	ldr	r1, [sp, #4]
 800951a:	6470      	str	r0, [r6, #68]	; 0x44
 800951c:	4602      	mov	r2, r0
 800951e:	b920      	cbnz	r0, 800952a <strtok+0x26>
 8009520:	4b10      	ldr	r3, [pc, #64]	; (8009564 <strtok+0x60>)
 8009522:	4811      	ldr	r0, [pc, #68]	; (8009568 <strtok+0x64>)
 8009524:	215b      	movs	r1, #91	; 0x5b
 8009526:	f000 f8e3 	bl	80096f0 <__assert_func>
 800952a:	e9c0 4400 	strd	r4, r4, [r0]
 800952e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009532:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009536:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800953a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800953e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009542:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009546:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800954a:	6184      	str	r4, [r0, #24]
 800954c:	7704      	strb	r4, [r0, #28]
 800954e:	6244      	str	r4, [r0, #36]	; 0x24
 8009550:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009552:	2301      	movs	r3, #1
 8009554:	4628      	mov	r0, r5
 8009556:	b002      	add	sp, #8
 8009558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800955c:	f000 b806 	b.w	800956c <__strtok_r>
 8009560:	20000140 	.word	0x20000140
 8009564:	0800d008 	.word	0x0800d008
 8009568:	0800d01f 	.word	0x0800d01f

0800956c <__strtok_r>:
 800956c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956e:	b908      	cbnz	r0, 8009574 <__strtok_r+0x8>
 8009570:	6810      	ldr	r0, [r2, #0]
 8009572:	b188      	cbz	r0, 8009598 <__strtok_r+0x2c>
 8009574:	4604      	mov	r4, r0
 8009576:	4620      	mov	r0, r4
 8009578:	f814 5b01 	ldrb.w	r5, [r4], #1
 800957c:	460f      	mov	r7, r1
 800957e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009582:	b91e      	cbnz	r6, 800958c <__strtok_r+0x20>
 8009584:	b965      	cbnz	r5, 80095a0 <__strtok_r+0x34>
 8009586:	6015      	str	r5, [r2, #0]
 8009588:	4628      	mov	r0, r5
 800958a:	e005      	b.n	8009598 <__strtok_r+0x2c>
 800958c:	42b5      	cmp	r5, r6
 800958e:	d1f6      	bne.n	800957e <__strtok_r+0x12>
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f0      	bne.n	8009576 <__strtok_r+0xa>
 8009594:	6014      	str	r4, [r2, #0]
 8009596:	7003      	strb	r3, [r0, #0]
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	461c      	mov	r4, r3
 800959c:	e00c      	b.n	80095b8 <__strtok_r+0x4c>
 800959e:	b915      	cbnz	r5, 80095a6 <__strtok_r+0x3a>
 80095a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095a4:	460e      	mov	r6, r1
 80095a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80095aa:	42ab      	cmp	r3, r5
 80095ac:	d1f7      	bne.n	800959e <__strtok_r+0x32>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f3      	beq.n	800959a <__strtok_r+0x2e>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80095b8:	6014      	str	r4, [r2, #0]
 80095ba:	e7ed      	b.n	8009598 <__strtok_r+0x2c>

080095bc <strstr>:
 80095bc:	780a      	ldrb	r2, [r1, #0]
 80095be:	b570      	push	{r4, r5, r6, lr}
 80095c0:	b96a      	cbnz	r2, 80095de <strstr+0x22>
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d109      	bne.n	80095dc <strstr+0x20>
 80095c8:	460c      	mov	r4, r1
 80095ca:	4605      	mov	r5, r0
 80095cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0f6      	beq.n	80095c2 <strstr+0x6>
 80095d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80095d8:	429e      	cmp	r6, r3
 80095da:	d0f7      	beq.n	80095cc <strstr+0x10>
 80095dc:	3001      	adds	r0, #1
 80095de:	7803      	ldrb	r3, [r0, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1ef      	bne.n	80095c4 <strstr+0x8>
 80095e4:	4618      	mov	r0, r3
 80095e6:	e7ec      	b.n	80095c2 <strstr+0x6>

080095e8 <_localeconv_r>:
 80095e8:	4800      	ldr	r0, [pc, #0]	; (80095ec <_localeconv_r+0x4>)
 80095ea:	4770      	bx	lr
 80095ec:	20000234 	.word	0x20000234

080095f0 <_close_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d06      	ldr	r5, [pc, #24]	; (800960c <_close_r+0x1c>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7ff f864 	bl	80086c8 <_close>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_close_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_close_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200010a4 	.word	0x200010a4

08009610 <_lseek_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_lseek_r+0x20>)
 8009614:	4604      	mov	r4, r0
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	2200      	movs	r2, #0
 800961c:	602a      	str	r2, [r5, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	f7ff f80f 	bl	8008642 <_lseek>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_lseek_r+0x1e>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_lseek_r+0x1e>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	200010a4 	.word	0x200010a4

08009634 <_read_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d07      	ldr	r5, [pc, #28]	; (8009654 <_read_r+0x20>)
 8009638:	4604      	mov	r4, r0
 800963a:	4608      	mov	r0, r1
 800963c:	4611      	mov	r1, r2
 800963e:	2200      	movs	r2, #0
 8009640:	602a      	str	r2, [r5, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	f7fe ffa5 	bl	8008592 <_read>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_read_r+0x1e>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_read_r+0x1e>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	200010a4 	.word	0x200010a4

08009658 <_write_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d07      	ldr	r5, [pc, #28]	; (8009678 <_write_r+0x20>)
 800965c:	4604      	mov	r4, r0
 800965e:	4608      	mov	r0, r1
 8009660:	4611      	mov	r1, r2
 8009662:	2200      	movs	r2, #0
 8009664:	602a      	str	r2, [r5, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	f7fe fffd 	bl	8008666 <_write>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_write_r+0x1e>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_write_r+0x1e>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	200010a4 	.word	0x200010a4

0800967c <__errno>:
 800967c:	4b01      	ldr	r3, [pc, #4]	; (8009684 <__errno+0x8>)
 800967e:	6818      	ldr	r0, [r3, #0]
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20000140 	.word	0x20000140

08009688 <__libc_init_array>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	4d0d      	ldr	r5, [pc, #52]	; (80096c0 <__libc_init_array+0x38>)
 800968c:	4c0d      	ldr	r4, [pc, #52]	; (80096c4 <__libc_init_array+0x3c>)
 800968e:	1b64      	subs	r4, r4, r5
 8009690:	10a4      	asrs	r4, r4, #2
 8009692:	2600      	movs	r6, #0
 8009694:	42a6      	cmp	r6, r4
 8009696:	d109      	bne.n	80096ac <__libc_init_array+0x24>
 8009698:	4d0b      	ldr	r5, [pc, #44]	; (80096c8 <__libc_init_array+0x40>)
 800969a:	4c0c      	ldr	r4, [pc, #48]	; (80096cc <__libc_init_array+0x44>)
 800969c:	f002 ff70 	bl	800c580 <_init>
 80096a0:	1b64      	subs	r4, r4, r5
 80096a2:	10a4      	asrs	r4, r4, #2
 80096a4:	2600      	movs	r6, #0
 80096a6:	42a6      	cmp	r6, r4
 80096a8:	d105      	bne.n	80096b6 <__libc_init_array+0x2e>
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b0:	4798      	blx	r3
 80096b2:	3601      	adds	r6, #1
 80096b4:	e7ee      	b.n	8009694 <__libc_init_array+0xc>
 80096b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ba:	4798      	blx	r3
 80096bc:	3601      	adds	r6, #1
 80096be:	e7f2      	b.n	80096a6 <__libc_init_array+0x1e>
 80096c0:	0800d3d8 	.word	0x0800d3d8
 80096c4:	0800d3d8 	.word	0x0800d3d8
 80096c8:	0800d3d8 	.word	0x0800d3d8
 80096cc:	0800d3dc 	.word	0x0800d3dc

080096d0 <__retarget_lock_acquire_recursive>:
 80096d0:	4770      	bx	lr

080096d2 <__retarget_lock_release_recursive>:
 80096d2:	4770      	bx	lr

080096d4 <memcpy>:
 80096d4:	440a      	add	r2, r1
 80096d6:	4291      	cmp	r1, r2
 80096d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096dc:	d100      	bne.n	80096e0 <memcpy+0xc>
 80096de:	4770      	bx	lr
 80096e0:	b510      	push	{r4, lr}
 80096e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ea:	4291      	cmp	r1, r2
 80096ec:	d1f9      	bne.n	80096e2 <memcpy+0xe>
 80096ee:	bd10      	pop	{r4, pc}

080096f0 <__assert_func>:
 80096f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096f2:	4614      	mov	r4, r2
 80096f4:	461a      	mov	r2, r3
 80096f6:	4b09      	ldr	r3, [pc, #36]	; (800971c <__assert_func+0x2c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4605      	mov	r5, r0
 80096fc:	68d8      	ldr	r0, [r3, #12]
 80096fe:	b14c      	cbz	r4, 8009714 <__assert_func+0x24>
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <__assert_func+0x30>)
 8009702:	9100      	str	r1, [sp, #0]
 8009704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009708:	4906      	ldr	r1, [pc, #24]	; (8009724 <__assert_func+0x34>)
 800970a:	462b      	mov	r3, r5
 800970c:	f001 fe50 	bl	800b3b0 <fiprintf>
 8009710:	f001 ff0e 	bl	800b530 <abort>
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <__assert_func+0x38>)
 8009716:	461c      	mov	r4, r3
 8009718:	e7f3      	b.n	8009702 <__assert_func+0x12>
 800971a:	bf00      	nop
 800971c:	20000140 	.word	0x20000140
 8009720:	0800d079 	.word	0x0800d079
 8009724:	0800d086 	.word	0x0800d086
 8009728:	0800d0b4 	.word	0x0800d0b4

0800972c <quorem>:
 800972c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	6903      	ldr	r3, [r0, #16]
 8009732:	690c      	ldr	r4, [r1, #16]
 8009734:	42a3      	cmp	r3, r4
 8009736:	4607      	mov	r7, r0
 8009738:	db7e      	blt.n	8009838 <quorem+0x10c>
 800973a:	3c01      	subs	r4, #1
 800973c:	f101 0814 	add.w	r8, r1, #20
 8009740:	f100 0514 	add.w	r5, r0, #20
 8009744:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800974e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009752:	3301      	adds	r3, #1
 8009754:	429a      	cmp	r2, r3
 8009756:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800975a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800975e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009762:	d331      	bcc.n	80097c8 <quorem+0x9c>
 8009764:	f04f 0e00 	mov.w	lr, #0
 8009768:	4640      	mov	r0, r8
 800976a:	46ac      	mov	ip, r5
 800976c:	46f2      	mov	sl, lr
 800976e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009772:	b293      	uxth	r3, r2
 8009774:	fb06 e303 	mla	r3, r6, r3, lr
 8009778:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800977c:	0c1a      	lsrs	r2, r3, #16
 800977e:	b29b      	uxth	r3, r3
 8009780:	ebaa 0303 	sub.w	r3, sl, r3
 8009784:	f8dc a000 	ldr.w	sl, [ip]
 8009788:	fa13 f38a 	uxtah	r3, r3, sl
 800978c:	fb06 220e 	mla	r2, r6, lr, r2
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	9b00      	ldr	r3, [sp, #0]
 8009794:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009798:	b292      	uxth	r2, r2
 800979a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800979e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80097a6:	4581      	cmp	r9, r0
 80097a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ac:	f84c 3b04 	str.w	r3, [ip], #4
 80097b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097b4:	d2db      	bcs.n	800976e <quorem+0x42>
 80097b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80097ba:	b92b      	cbnz	r3, 80097c8 <quorem+0x9c>
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	3b04      	subs	r3, #4
 80097c0:	429d      	cmp	r5, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	d32c      	bcc.n	8009820 <quorem+0xf4>
 80097c6:	613c      	str	r4, [r7, #16]
 80097c8:	4638      	mov	r0, r7
 80097ca:	f001 f9a7 	bl	800ab1c <__mcmp>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	db22      	blt.n	8009818 <quorem+0xec>
 80097d2:	3601      	adds	r6, #1
 80097d4:	4629      	mov	r1, r5
 80097d6:	2000      	movs	r0, #0
 80097d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097dc:	f8d1 c000 	ldr.w	ip, [r1]
 80097e0:	b293      	uxth	r3, r2
 80097e2:	1ac3      	subs	r3, r0, r3
 80097e4:	0c12      	lsrs	r2, r2, #16
 80097e6:	fa13 f38c 	uxtah	r3, r3, ip
 80097ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097f8:	45c1      	cmp	r9, r8
 80097fa:	f841 3b04 	str.w	r3, [r1], #4
 80097fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009802:	d2e9      	bcs.n	80097d8 <quorem+0xac>
 8009804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800980c:	b922      	cbnz	r2, 8009818 <quorem+0xec>
 800980e:	3b04      	subs	r3, #4
 8009810:	429d      	cmp	r5, r3
 8009812:	461a      	mov	r2, r3
 8009814:	d30a      	bcc.n	800982c <quorem+0x100>
 8009816:	613c      	str	r4, [r7, #16]
 8009818:	4630      	mov	r0, r6
 800981a:	b003      	add	sp, #12
 800981c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	3b04      	subs	r3, #4
 8009824:	2a00      	cmp	r2, #0
 8009826:	d1ce      	bne.n	80097c6 <quorem+0x9a>
 8009828:	3c01      	subs	r4, #1
 800982a:	e7c9      	b.n	80097c0 <quorem+0x94>
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	3b04      	subs	r3, #4
 8009830:	2a00      	cmp	r2, #0
 8009832:	d1f0      	bne.n	8009816 <quorem+0xea>
 8009834:	3c01      	subs	r4, #1
 8009836:	e7eb      	b.n	8009810 <quorem+0xe4>
 8009838:	2000      	movs	r0, #0
 800983a:	e7ee      	b.n	800981a <quorem+0xee>
 800983c:	0000      	movs	r0, r0
	...

08009840 <_dtoa_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	ed2d 8b04 	vpush	{d8-d9}
 8009848:	69c5      	ldr	r5, [r0, #28]
 800984a:	b093      	sub	sp, #76	; 0x4c
 800984c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009850:	ec57 6b10 	vmov	r6, r7, d0
 8009854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009858:	9107      	str	r1, [sp, #28]
 800985a:	4604      	mov	r4, r0
 800985c:	920a      	str	r2, [sp, #40]	; 0x28
 800985e:	930d      	str	r3, [sp, #52]	; 0x34
 8009860:	b975      	cbnz	r5, 8009880 <_dtoa_r+0x40>
 8009862:	2010      	movs	r0, #16
 8009864:	f000 fe2a 	bl	800a4bc <malloc>
 8009868:	4602      	mov	r2, r0
 800986a:	61e0      	str	r0, [r4, #28]
 800986c:	b920      	cbnz	r0, 8009878 <_dtoa_r+0x38>
 800986e:	4bae      	ldr	r3, [pc, #696]	; (8009b28 <_dtoa_r+0x2e8>)
 8009870:	21ef      	movs	r1, #239	; 0xef
 8009872:	48ae      	ldr	r0, [pc, #696]	; (8009b2c <_dtoa_r+0x2ec>)
 8009874:	f7ff ff3c 	bl	80096f0 <__assert_func>
 8009878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800987c:	6005      	str	r5, [r0, #0]
 800987e:	60c5      	str	r5, [r0, #12]
 8009880:	69e3      	ldr	r3, [r4, #28]
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	b151      	cbz	r1, 800989c <_dtoa_r+0x5c>
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	604a      	str	r2, [r1, #4]
 800988a:	2301      	movs	r3, #1
 800988c:	4093      	lsls	r3, r2
 800988e:	608b      	str	r3, [r1, #8]
 8009890:	4620      	mov	r0, r4
 8009892:	f000 ff07 	bl	800a6a4 <_Bfree>
 8009896:	69e3      	ldr	r3, [r4, #28]
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	1e3b      	subs	r3, r7, #0
 800989e:	bfbb      	ittet	lt
 80098a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	9303      	strlt	r3, [sp, #12]
 80098a6:	2300      	movge	r3, #0
 80098a8:	2201      	movlt	r2, #1
 80098aa:	bfac      	ite	ge
 80098ac:	f8c8 3000 	strge.w	r3, [r8]
 80098b0:	f8c8 2000 	strlt.w	r2, [r8]
 80098b4:	4b9e      	ldr	r3, [pc, #632]	; (8009b30 <_dtoa_r+0x2f0>)
 80098b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80098ba:	ea33 0308 	bics.w	r3, r3, r8
 80098be:	d11b      	bne.n	80098f8 <_dtoa_r+0xb8>
 80098c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098cc:	4333      	orrs	r3, r6
 80098ce:	f000 8593 	beq.w	800a3f8 <_dtoa_r+0xbb8>
 80098d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d4:	b963      	cbnz	r3, 80098f0 <_dtoa_r+0xb0>
 80098d6:	4b97      	ldr	r3, [pc, #604]	; (8009b34 <_dtoa_r+0x2f4>)
 80098d8:	e027      	b.n	800992a <_dtoa_r+0xea>
 80098da:	4b97      	ldr	r3, [pc, #604]	; (8009b38 <_dtoa_r+0x2f8>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	9800      	ldr	r0, [sp, #0]
 80098e6:	b013      	add	sp, #76	; 0x4c
 80098e8:	ecbd 8b04 	vpop	{d8-d9}
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	4b90      	ldr	r3, [pc, #576]	; (8009b34 <_dtoa_r+0x2f4>)
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	3303      	adds	r3, #3
 80098f6:	e7f3      	b.n	80098e0 <_dtoa_r+0xa0>
 80098f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098fc:	2200      	movs	r2, #0
 80098fe:	ec51 0b17 	vmov	r0, r1, d7
 8009902:	eeb0 8a47 	vmov.f32	s16, s14
 8009906:	eef0 8a67 	vmov.f32	s17, s15
 800990a:	2300      	movs	r3, #0
 800990c:	f7f7 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009910:	4681      	mov	r9, r0
 8009912:	b160      	cbz	r0, 800992e <_dtoa_r+0xee>
 8009914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009916:	2301      	movs	r3, #1
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8568 	beq.w	800a3f2 <_dtoa_r+0xbb2>
 8009922:	4b86      	ldr	r3, [pc, #536]	; (8009b3c <_dtoa_r+0x2fc>)
 8009924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	3b01      	subs	r3, #1
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	e7da      	b.n	80098e4 <_dtoa_r+0xa4>
 800992e:	aa10      	add	r2, sp, #64	; 0x40
 8009930:	a911      	add	r1, sp, #68	; 0x44
 8009932:	4620      	mov	r0, r4
 8009934:	eeb0 0a48 	vmov.f32	s0, s16
 8009938:	eef0 0a68 	vmov.f32	s1, s17
 800993c:	f001 f994 	bl	800ac68 <__d2b>
 8009940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009944:	4682      	mov	sl, r0
 8009946:	2d00      	cmp	r5, #0
 8009948:	d07f      	beq.n	8009a4a <_dtoa_r+0x20a>
 800994a:	ee18 3a90 	vmov	r3, s17
 800994e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009952:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009956:	ec51 0b18 	vmov	r0, r1, d8
 800995a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800995e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009962:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009966:	4619      	mov	r1, r3
 8009968:	2200      	movs	r2, #0
 800996a:	4b75      	ldr	r3, [pc, #468]	; (8009b40 <_dtoa_r+0x300>)
 800996c:	f7f6 fc8c 	bl	8000288 <__aeabi_dsub>
 8009970:	a367      	add	r3, pc, #412	; (adr r3, 8009b10 <_dtoa_r+0x2d0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe3f 	bl	80005f8 <__aeabi_dmul>
 800997a:	a367      	add	r3, pc, #412	; (adr r3, 8009b18 <_dtoa_r+0x2d8>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fc84 	bl	800028c <__adddf3>
 8009984:	4606      	mov	r6, r0
 8009986:	4628      	mov	r0, r5
 8009988:	460f      	mov	r7, r1
 800998a:	f7f6 fdcb 	bl	8000524 <__aeabi_i2d>
 800998e:	a364      	add	r3, pc, #400	; (adr r3, 8009b20 <_dtoa_r+0x2e0>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fe30 	bl	80005f8 <__aeabi_dmul>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4630      	mov	r0, r6
 800999e:	4639      	mov	r1, r7
 80099a0:	f7f6 fc74 	bl	800028c <__adddf3>
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	f7f7 f8d6 	bl	8000b58 <__aeabi_d2iz>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4683      	mov	fp, r0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f7 f891 	bl	8000adc <__aeabi_dcmplt>
 80099ba:	b148      	cbz	r0, 80099d0 <_dtoa_r+0x190>
 80099bc:	4658      	mov	r0, fp
 80099be:	f7f6 fdb1 	bl	8000524 <__aeabi_i2d>
 80099c2:	4632      	mov	r2, r6
 80099c4:	463b      	mov	r3, r7
 80099c6:	f7f7 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ca:	b908      	cbnz	r0, 80099d0 <_dtoa_r+0x190>
 80099cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099d0:	f1bb 0f16 	cmp.w	fp, #22
 80099d4:	d857      	bhi.n	8009a86 <_dtoa_r+0x246>
 80099d6:	4b5b      	ldr	r3, [pc, #364]	; (8009b44 <_dtoa_r+0x304>)
 80099d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	ec51 0b18 	vmov	r0, r1, d8
 80099e4:	f7f7 f87a 	bl	8000adc <__aeabi_dcmplt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d04e      	beq.n	8009a8a <_dtoa_r+0x24a>
 80099ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099f0:	2300      	movs	r3, #0
 80099f2:	930c      	str	r3, [sp, #48]	; 0x30
 80099f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099f6:	1b5b      	subs	r3, r3, r5
 80099f8:	1e5a      	subs	r2, r3, #1
 80099fa:	bf45      	ittet	mi
 80099fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a00:	9305      	strmi	r3, [sp, #20]
 8009a02:	2300      	movpl	r3, #0
 8009a04:	2300      	movmi	r3, #0
 8009a06:	9206      	str	r2, [sp, #24]
 8009a08:	bf54      	ite	pl
 8009a0a:	9305      	strpl	r3, [sp, #20]
 8009a0c:	9306      	strmi	r3, [sp, #24]
 8009a0e:	f1bb 0f00 	cmp.w	fp, #0
 8009a12:	db3c      	blt.n	8009a8e <_dtoa_r+0x24e>
 8009a14:	9b06      	ldr	r3, [sp, #24]
 8009a16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009a1a:	445b      	add	r3, fp
 8009a1c:	9306      	str	r3, [sp, #24]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9308      	str	r3, [sp, #32]
 8009a22:	9b07      	ldr	r3, [sp, #28]
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d868      	bhi.n	8009afa <_dtoa_r+0x2ba>
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	bfc4      	itt	gt
 8009a2c:	3b04      	subgt	r3, #4
 8009a2e:	9307      	strgt	r3, [sp, #28]
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	f1a3 0302 	sub.w	r3, r3, #2
 8009a36:	bfcc      	ite	gt
 8009a38:	2500      	movgt	r5, #0
 8009a3a:	2501      	movle	r5, #1
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	f200 8085 	bhi.w	8009b4c <_dtoa_r+0x30c>
 8009a42:	e8df f003 	tbb	[pc, r3]
 8009a46:	3b2e      	.short	0x3b2e
 8009a48:	5839      	.short	0x5839
 8009a4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a4e:	441d      	add	r5, r3
 8009a50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	bfc1      	itttt	gt
 8009a58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a68:	bfd6      	itet	le
 8009a6a:	f1c3 0320 	rsble	r3, r3, #32
 8009a6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a72:	fa06 f003 	lslle.w	r0, r6, r3
 8009a76:	f7f6 fd45 	bl	8000504 <__aeabi_ui2d>
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a80:	3d01      	subs	r5, #1
 8009a82:	920e      	str	r2, [sp, #56]	; 0x38
 8009a84:	e76f      	b.n	8009966 <_dtoa_r+0x126>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7b3      	b.n	80099f2 <_dtoa_r+0x1b2>
 8009a8a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a8c:	e7b2      	b.n	80099f4 <_dtoa_r+0x1b4>
 8009a8e:	9b05      	ldr	r3, [sp, #20]
 8009a90:	eba3 030b 	sub.w	r3, r3, fp
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f1cb 0300 	rsb	r3, fp, #0
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa0:	e7bf      	b.n	8009a22 <_dtoa_r+0x1e2>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	dc52      	bgt.n	8009b52 <_dtoa_r+0x312>
 8009aac:	2301      	movs	r3, #1
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab6:	e00b      	b.n	8009ad0 <_dtoa_r+0x290>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e7f3      	b.n	8009aa4 <_dtoa_r+0x264>
 8009abc:	2300      	movs	r3, #0
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	445b      	add	r3, fp
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	bfb8      	it	lt
 8009ace:	2301      	movlt	r3, #1
 8009ad0:	69e0      	ldr	r0, [r4, #28]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	f102 0614 	add.w	r6, r2, #20
 8009ada:	429e      	cmp	r6, r3
 8009adc:	d93d      	bls.n	8009b5a <_dtoa_r+0x31a>
 8009ade:	6041      	str	r1, [r0, #4]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fd9f 	bl	800a624 <_Balloc>
 8009ae6:	9000      	str	r0, [sp, #0]
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d139      	bne.n	8009b60 <_dtoa_r+0x320>
 8009aec:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <_dtoa_r+0x308>)
 8009aee:	4602      	mov	r2, r0
 8009af0:	f240 11af 	movw	r1, #431	; 0x1af
 8009af4:	e6bd      	b.n	8009872 <_dtoa_r+0x32>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e7e1      	b.n	8009abe <_dtoa_r+0x27e>
 8009afa:	2501      	movs	r5, #1
 8009afc:	2300      	movs	r3, #0
 8009afe:	9307      	str	r3, [sp, #28]
 8009b00:	9509      	str	r5, [sp, #36]	; 0x24
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2312      	movs	r3, #18
 8009b0e:	e7d1      	b.n	8009ab4 <_dtoa_r+0x274>
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	0800d008 	.word	0x0800d008
 8009b2c:	0800d0c2 	.word	0x0800d0c2
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	0800d0be 	.word	0x0800d0be
 8009b38:	0800d0b5 	.word	0x0800d0b5
 8009b3c:	0800cfe5 	.word	0x0800cfe5
 8009b40:	3ff80000 	.word	0x3ff80000
 8009b44:	0800d1b0 	.word	0x0800d1b0
 8009b48:	0800d11a 	.word	0x0800d11a
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b50:	e7d7      	b.n	8009b02 <_dtoa_r+0x2c2>
 8009b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	e7ba      	b.n	8009ad0 <_dtoa_r+0x290>
 8009b5a:	3101      	adds	r1, #1
 8009b5c:	0052      	lsls	r2, r2, #1
 8009b5e:	e7ba      	b.n	8009ad6 <_dtoa_r+0x296>
 8009b60:	69e3      	ldr	r3, [r4, #28]
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	2b0e      	cmp	r3, #14
 8009b6a:	f200 80a8 	bhi.w	8009cbe <_dtoa_r+0x47e>
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	f000 80a5 	beq.w	8009cbe <_dtoa_r+0x47e>
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	dd38      	ble.n	8009bec <_dtoa_r+0x3ac>
 8009b7a:	4bc0      	ldr	r3, [pc, #768]	; (8009e7c <_dtoa_r+0x63c>)
 8009b7c:	f00b 020f 	and.w	r2, fp, #15
 8009b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009b90:	d019      	beq.n	8009bc6 <_dtoa_r+0x386>
 8009b92:	4bbb      	ldr	r3, [pc, #748]	; (8009e80 <_dtoa_r+0x640>)
 8009b94:	ec51 0b18 	vmov	r0, r1, d8
 8009b98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b9c:	f7f6 fe56 	bl	800084c <__aeabi_ddiv>
 8009ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba4:	f008 080f 	and.w	r8, r8, #15
 8009ba8:	2503      	movs	r5, #3
 8009baa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009e80 <_dtoa_r+0x640>
 8009bae:	f1b8 0f00 	cmp.w	r8, #0
 8009bb2:	d10a      	bne.n	8009bca <_dtoa_r+0x38a>
 8009bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	f7f6 fe46 	bl	800084c <__aeabi_ddiv>
 8009bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc4:	e02b      	b.n	8009c1e <_dtoa_r+0x3de>
 8009bc6:	2502      	movs	r5, #2
 8009bc8:	e7ef      	b.n	8009baa <_dtoa_r+0x36a>
 8009bca:	f018 0f01 	tst.w	r8, #1
 8009bce:	d008      	beq.n	8009be2 <_dtoa_r+0x3a2>
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	3501      	adds	r5, #1
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009be6:	f109 0908 	add.w	r9, r9, #8
 8009bea:	e7e0      	b.n	8009bae <_dtoa_r+0x36e>
 8009bec:	f000 809f 	beq.w	8009d2e <_dtoa_r+0x4ee>
 8009bf0:	f1cb 0600 	rsb	r6, fp, #0
 8009bf4:	4ba1      	ldr	r3, [pc, #644]	; (8009e7c <_dtoa_r+0x63c>)
 8009bf6:	4fa2      	ldr	r7, [pc, #648]	; (8009e80 <_dtoa_r+0x640>)
 8009bf8:	f006 020f 	and.w	r2, r6, #15
 8009bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	ec51 0b18 	vmov	r0, r1, d8
 8009c08:	f7f6 fcf6 	bl	80005f8 <__aeabi_dmul>
 8009c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c10:	1136      	asrs	r6, r6, #4
 8009c12:	2300      	movs	r3, #0
 8009c14:	2502      	movs	r5, #2
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d17e      	bne.n	8009d18 <_dtoa_r+0x4d8>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d0      	bne.n	8009bc0 <_dtoa_r+0x380>
 8009c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8084 	beq.w	8009d32 <_dtoa_r+0x4f2>
 8009c2a:	4b96      	ldr	r3, [pc, #600]	; (8009e84 <_dtoa_r+0x644>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 ff53 	bl	8000adc <__aeabi_dcmplt>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d07b      	beq.n	8009d32 <_dtoa_r+0x4f2>
 8009c3a:	9b04      	ldr	r3, [sp, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d078      	beq.n	8009d32 <_dtoa_r+0x4f2>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dd39      	ble.n	8009cba <_dtoa_r+0x47a>
 8009c46:	4b90      	ldr	r3, [pc, #576]	; (8009e88 <_dtoa_r+0x648>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fcd3 	bl	80005f8 <__aeabi_dmul>
 8009c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c56:	9e01      	ldr	r6, [sp, #4]
 8009c58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c62:	4628      	mov	r0, r5
 8009c64:	f7f6 fc5e 	bl	8000524 <__aeabi_i2d>
 8009c68:	4642      	mov	r2, r8
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	4b86      	ldr	r3, [pc, #536]	; (8009e8c <_dtoa_r+0x64c>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fb0a 	bl	800028c <__adddf3>
 8009c78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	2e00      	cmp	r6, #0
 8009c84:	d158      	bne.n	8009d38 <_dtoa_r+0x4f8>
 8009c86:	4b82      	ldr	r3, [pc, #520]	; (8009e90 <_dtoa_r+0x650>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fafb 	bl	8000288 <__aeabi_dsub>
 8009c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c96:	4680      	mov	r8, r0
 8009c98:	4689      	mov	r9, r1
 8009c9a:	f7f6 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8296 	bne.w	800a1d0 <_dtoa_r+0x990>
 8009ca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ca8:	4640      	mov	r0, r8
 8009caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 ff14 	bl	8000adc <__aeabi_dcmplt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f040 8289 	bne.w	800a1cc <_dtoa_r+0x98c>
 8009cba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f2c0 814e 	blt.w	8009f62 <_dtoa_r+0x722>
 8009cc6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cca:	f300 814a 	bgt.w	8009f62 <_dtoa_r+0x722>
 8009cce:	4b6b      	ldr	r3, [pc, #428]	; (8009e7c <_dtoa_r+0x63c>)
 8009cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f280 80dc 	bge.w	8009e98 <_dtoa_r+0x658>
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f300 80d8 	bgt.w	8009e98 <_dtoa_r+0x658>
 8009ce8:	f040 826f 	bne.w	800a1ca <_dtoa_r+0x98a>
 8009cec:	4b68      	ldr	r3, [pc, #416]	; (8009e90 <_dtoa_r+0x650>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fc80 	bl	80005f8 <__aeabi_dmul>
 8009cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cfc:	f7f6 ff02 	bl	8000b04 <__aeabi_dcmpge>
 8009d00:	9e04      	ldr	r6, [sp, #16]
 8009d02:	4637      	mov	r7, r6
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f040 8245 	bne.w	800a194 <_dtoa_r+0x954>
 8009d0a:	9d00      	ldr	r5, [sp, #0]
 8009d0c:	2331      	movs	r3, #49	; 0x31
 8009d0e:	f805 3b01 	strb.w	r3, [r5], #1
 8009d12:	f10b 0b01 	add.w	fp, fp, #1
 8009d16:	e241      	b.n	800a19c <_dtoa_r+0x95c>
 8009d18:	07f2      	lsls	r2, r6, #31
 8009d1a:	d505      	bpl.n	8009d28 <_dtoa_r+0x4e8>
 8009d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d20:	f7f6 fc6a 	bl	80005f8 <__aeabi_dmul>
 8009d24:	3501      	adds	r5, #1
 8009d26:	2301      	movs	r3, #1
 8009d28:	1076      	asrs	r6, r6, #1
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	e773      	b.n	8009c16 <_dtoa_r+0x3d6>
 8009d2e:	2502      	movs	r5, #2
 8009d30:	e775      	b.n	8009c1e <_dtoa_r+0x3de>
 8009d32:	9e04      	ldr	r6, [sp, #16]
 8009d34:	465f      	mov	r7, fp
 8009d36:	e792      	b.n	8009c5e <_dtoa_r+0x41e>
 8009d38:	9900      	ldr	r1, [sp, #0]
 8009d3a:	4b50      	ldr	r3, [pc, #320]	; (8009e7c <_dtoa_r+0x63c>)
 8009d3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d40:	4431      	add	r1, r6
 8009d42:	9102      	str	r1, [sp, #8]
 8009d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d46:	eeb0 9a47 	vmov.f32	s18, s14
 8009d4a:	eef0 9a67 	vmov.f32	s19, s15
 8009d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d56:	2900      	cmp	r1, #0
 8009d58:	d044      	beq.n	8009de4 <_dtoa_r+0x5a4>
 8009d5a:	494e      	ldr	r1, [pc, #312]	; (8009e94 <_dtoa_r+0x654>)
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f6 fd75 	bl	800084c <__aeabi_ddiv>
 8009d62:	ec53 2b19 	vmov	r2, r3, d9
 8009d66:	f7f6 fa8f 	bl	8000288 <__aeabi_dsub>
 8009d6a:	9d00      	ldr	r5, [sp, #0]
 8009d6c:	ec41 0b19 	vmov	d9, r0, r1
 8009d70:	4649      	mov	r1, r9
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7f6 fef0 	bl	8000b58 <__aeabi_d2iz>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f7f6 fbd3 	bl	8000524 <__aeabi_i2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fa7f 	bl	8000288 <__aeabi_dsub>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d90:	ec53 2b19 	vmov	r2, r3, d9
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	f7f6 fea0 	bl	8000adc <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d164      	bne.n	8009e6a <_dtoa_r+0x62a>
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	4937      	ldr	r1, [pc, #220]	; (8009e84 <_dtoa_r+0x644>)
 8009da6:	2000      	movs	r0, #0
 8009da8:	f7f6 fa6e 	bl	8000288 <__aeabi_dsub>
 8009dac:	ec53 2b19 	vmov	r2, r3, d9
 8009db0:	f7f6 fe94 	bl	8000adc <__aeabi_dcmplt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 80b6 	bne.w	8009f26 <_dtoa_r+0x6e6>
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	f43f af7c 	beq.w	8009cba <_dtoa_r+0x47a>
 8009dc2:	4b31      	ldr	r3, [pc, #196]	; (8009e88 <_dtoa_r+0x648>)
 8009dc4:	ec51 0b19 	vmov	r0, r1, d9
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f7f6 fc15 	bl	80005f8 <__aeabi_dmul>
 8009dce:	4b2e      	ldr	r3, [pc, #184]	; (8009e88 <_dtoa_r+0x648>)
 8009dd0:	ec41 0b19 	vmov	d9, r0, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	e7c5      	b.n	8009d70 <_dtoa_r+0x530>
 8009de4:	ec51 0b17 	vmov	r0, r1, d7
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	9d00      	ldr	r5, [sp, #0]
 8009df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df2:	ec41 0b19 	vmov	d9, r0, r1
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f7f6 fead 	bl	8000b58 <__aeabi_d2iz>
 8009dfe:	4606      	mov	r6, r0
 8009e00:	f7f6 fb90 	bl	8000524 <__aeabi_i2d>
 8009e04:	3630      	adds	r6, #48	; 0x30
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa3b 	bl	8000288 <__aeabi_dsub>
 8009e12:	f805 6b01 	strb.w	r6, [r5], #1
 8009e16:	9b02      	ldr	r3, [sp, #8]
 8009e18:	429d      	cmp	r5, r3
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	d124      	bne.n	8009e6e <_dtoa_r+0x62e>
 8009e24:	4b1b      	ldr	r3, [pc, #108]	; (8009e94 <_dtoa_r+0x654>)
 8009e26:	ec51 0b19 	vmov	r0, r1, d9
 8009e2a:	f7f6 fa2f 	bl	800028c <__adddf3>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4640      	mov	r0, r8
 8009e34:	4649      	mov	r1, r9
 8009e36:	f7f6 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d173      	bne.n	8009f26 <_dtoa_r+0x6e6>
 8009e3e:	ec53 2b19 	vmov	r2, r3, d9
 8009e42:	4914      	ldr	r1, [pc, #80]	; (8009e94 <_dtoa_r+0x654>)
 8009e44:	2000      	movs	r0, #0
 8009e46:	f7f6 fa1f 	bl	8000288 <__aeabi_dsub>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fe43 	bl	8000adc <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f af2f 	beq.w	8009cba <_dtoa_r+0x47a>
 8009e5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e5e:	1e6b      	subs	r3, r5, #1
 8009e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e66:	2b30      	cmp	r3, #48	; 0x30
 8009e68:	d0f8      	beq.n	8009e5c <_dtoa_r+0x61c>
 8009e6a:	46bb      	mov	fp, r7
 8009e6c:	e04a      	b.n	8009f04 <_dtoa_r+0x6c4>
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <_dtoa_r+0x648>)
 8009e70:	f7f6 fbc2 	bl	80005f8 <__aeabi_dmul>
 8009e74:	4680      	mov	r8, r0
 8009e76:	4689      	mov	r9, r1
 8009e78:	e7bd      	b.n	8009df6 <_dtoa_r+0x5b6>
 8009e7a:	bf00      	nop
 8009e7c:	0800d1b0 	.word	0x0800d1b0
 8009e80:	0800d188 	.word	0x0800d188
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	40240000 	.word	0x40240000
 8009e8c:	401c0000 	.word	0x401c0000
 8009e90:	40140000 	.word	0x40140000
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e9c:	9d00      	ldr	r5, [sp, #0]
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 fcd1 	bl	800084c <__aeabi_ddiv>
 8009eaa:	f7f6 fe55 	bl	8000b58 <__aeabi_d2iz>
 8009eae:	9001      	str	r0, [sp, #4]
 8009eb0:	f7f6 fb38 	bl	8000524 <__aeabi_i2d>
 8009eb4:	4642      	mov	r2, r8
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 f9e0 	bl	8000288 <__aeabi_dsub>
 8009ec8:	9e01      	ldr	r6, [sp, #4]
 8009eca:	9f04      	ldr	r7, [sp, #16]
 8009ecc:	3630      	adds	r6, #48	; 0x30
 8009ece:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed2:	9e00      	ldr	r6, [sp, #0]
 8009ed4:	1bae      	subs	r6, r5, r6
 8009ed6:	42b7      	cmp	r7, r6
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	d134      	bne.n	8009f48 <_dtoa_r+0x708>
 8009ede:	f7f6 f9d5 	bl	800028c <__adddf3>
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	f7f6 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8009eee:	b9c8      	cbnz	r0, 8009f24 <_dtoa_r+0x6e4>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009efc:	b110      	cbz	r0, 8009f04 <_dtoa_r+0x6c4>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	07db      	lsls	r3, r3, #31
 8009f02:	d40f      	bmi.n	8009f24 <_dtoa_r+0x6e4>
 8009f04:	4651      	mov	r1, sl
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 fbcc 	bl	800a6a4 <_Bfree>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f10:	702b      	strb	r3, [r5, #0]
 8009f12:	f10b 0301 	add.w	r3, fp, #1
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f43f ace2 	beq.w	80098e4 <_dtoa_r+0xa4>
 8009f20:	601d      	str	r5, [r3, #0]
 8009f22:	e4df      	b.n	80098e4 <_dtoa_r+0xa4>
 8009f24:	465f      	mov	r7, fp
 8009f26:	462b      	mov	r3, r5
 8009f28:	461d      	mov	r5, r3
 8009f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f2e:	2a39      	cmp	r2, #57	; 0x39
 8009f30:	d106      	bne.n	8009f40 <_dtoa_r+0x700>
 8009f32:	9a00      	ldr	r2, [sp, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d1f7      	bne.n	8009f28 <_dtoa_r+0x6e8>
 8009f38:	9900      	ldr	r1, [sp, #0]
 8009f3a:	2230      	movs	r2, #48	; 0x30
 8009f3c:	3701      	adds	r7, #1
 8009f3e:	700a      	strb	r2, [r1, #0]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	3201      	adds	r2, #1
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e790      	b.n	8009e6a <_dtoa_r+0x62a>
 8009f48:	4ba3      	ldr	r3, [pc, #652]	; (800a1d8 <_dtoa_r+0x998>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f7f6 fb54 	bl	80005f8 <__aeabi_dmul>
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	4606      	mov	r6, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	f7f6 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d09e      	beq.n	8009e9e <_dtoa_r+0x65e>
 8009f60:	e7d0      	b.n	8009f04 <_dtoa_r+0x6c4>
 8009f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	f000 80ca 	beq.w	800a0fe <_dtoa_r+0x8be>
 8009f6a:	9a07      	ldr	r2, [sp, #28]
 8009f6c:	2a01      	cmp	r2, #1
 8009f6e:	f300 80ad 	bgt.w	800a0cc <_dtoa_r+0x88c>
 8009f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f000 80a5 	beq.w	800a0c4 <_dtoa_r+0x884>
 8009f7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f7e:	9e08      	ldr	r6, [sp, #32]
 8009f80:	9d05      	ldr	r5, [sp, #20]
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	441a      	add	r2, r3
 8009f86:	9205      	str	r2, [sp, #20]
 8009f88:	9a06      	ldr	r2, [sp, #24]
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	441a      	add	r2, r3
 8009f8e:	4620      	mov	r0, r4
 8009f90:	9206      	str	r2, [sp, #24]
 8009f92:	f000 fc3d 	bl	800a810 <__i2b>
 8009f96:	4607      	mov	r7, r0
 8009f98:	b165      	cbz	r5, 8009fb4 <_dtoa_r+0x774>
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dd09      	ble.n	8009fb4 <_dtoa_r+0x774>
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	9a05      	ldr	r2, [sp, #20]
 8009fa4:	bfa8      	it	ge
 8009fa6:	462b      	movge	r3, r5
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	9205      	str	r2, [sp, #20]
 8009fac:	9a06      	ldr	r2, [sp, #24]
 8009fae:	1aed      	subs	r5, r5, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	9306      	str	r3, [sp, #24]
 8009fb4:	9b08      	ldr	r3, [sp, #32]
 8009fb6:	b1f3      	cbz	r3, 8009ff6 <_dtoa_r+0x7b6>
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80a3 	beq.w	800a106 <_dtoa_r+0x8c6>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd10      	ble.n	8009fe6 <_dtoa_r+0x7a6>
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fce1 	bl	800a990 <__pow5mult>
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fc31 	bl	800a83c <__multiply>
 8009fda:	4651      	mov	r1, sl
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fb60 	bl	800a6a4 <_Bfree>
 8009fe4:	46c2      	mov	sl, r8
 8009fe6:	9b08      	ldr	r3, [sp, #32]
 8009fe8:	1b9a      	subs	r2, r3, r6
 8009fea:	d004      	beq.n	8009ff6 <_dtoa_r+0x7b6>
 8009fec:	4651      	mov	r1, sl
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fcce 	bl	800a990 <__pow5mult>
 8009ff4:	4682      	mov	sl, r0
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fc09 	bl	800a810 <__i2b>
 8009ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a000:	2b00      	cmp	r3, #0
 800a002:	4606      	mov	r6, r0
 800a004:	f340 8081 	ble.w	800a10a <_dtoa_r+0x8ca>
 800a008:	461a      	mov	r2, r3
 800a00a:	4601      	mov	r1, r0
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fcbf 	bl	800a990 <__pow5mult>
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	2b01      	cmp	r3, #1
 800a016:	4606      	mov	r6, r0
 800a018:	dd7a      	ble.n	800a110 <_dtoa_r+0x8d0>
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	6933      	ldr	r3, [r6, #16]
 800a020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a024:	6918      	ldr	r0, [r3, #16]
 800a026:	f000 fba5 	bl	800a774 <__hi0bits>
 800a02a:	f1c0 0020 	rsb	r0, r0, #32
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	4418      	add	r0, r3
 800a032:	f010 001f 	ands.w	r0, r0, #31
 800a036:	f000 8094 	beq.w	800a162 <_dtoa_r+0x922>
 800a03a:	f1c0 0320 	rsb	r3, r0, #32
 800a03e:	2b04      	cmp	r3, #4
 800a040:	f340 8085 	ble.w	800a14e <_dtoa_r+0x90e>
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	f1c0 001c 	rsb	r0, r0, #28
 800a04a:	4403      	add	r3, r0
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	9b06      	ldr	r3, [sp, #24]
 800a050:	4403      	add	r3, r0
 800a052:	4405      	add	r5, r0
 800a054:	9306      	str	r3, [sp, #24]
 800a056:	9b05      	ldr	r3, [sp, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd05      	ble.n	800a068 <_dtoa_r+0x828>
 800a05c:	4651      	mov	r1, sl
 800a05e:	461a      	mov	r2, r3
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fcef 	bl	800aa44 <__lshift>
 800a066:	4682      	mov	sl, r0
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd05      	ble.n	800a07a <_dtoa_r+0x83a>
 800a06e:	4631      	mov	r1, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fce6 	bl	800aa44 <__lshift>
 800a078:	4606      	mov	r6, r0
 800a07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d072      	beq.n	800a166 <_dtoa_r+0x926>
 800a080:	4631      	mov	r1, r6
 800a082:	4650      	mov	r0, sl
 800a084:	f000 fd4a 	bl	800ab1c <__mcmp>
 800a088:	2800      	cmp	r0, #0
 800a08a:	da6c      	bge.n	800a166 <_dtoa_r+0x926>
 800a08c:	2300      	movs	r3, #0
 800a08e:	4651      	mov	r1, sl
 800a090:	220a      	movs	r2, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f000 fb28 	bl	800a6e8 <__multadd>
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a09e:	4682      	mov	sl, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 81b0 	beq.w	800a406 <_dtoa_r+0xbc6>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fb1b 	bl	800a6e8 <__multadd>
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	f300 8096 	bgt.w	800a1e8 <_dtoa_r+0x9a8>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	dc59      	bgt.n	800a176 <_dtoa_r+0x936>
 800a0c2:	e091      	b.n	800a1e8 <_dtoa_r+0x9a8>
 800a0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ca:	e758      	b.n	8009f7e <_dtoa_r+0x73e>
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	1e5e      	subs	r6, r3, #1
 800a0d0:	9b08      	ldr	r3, [sp, #32]
 800a0d2:	42b3      	cmp	r3, r6
 800a0d4:	bfbf      	itttt	lt
 800a0d6:	9b08      	ldrlt	r3, [sp, #32]
 800a0d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a0da:	9608      	strlt	r6, [sp, #32]
 800a0dc:	1af3      	sublt	r3, r6, r3
 800a0de:	bfb4      	ite	lt
 800a0e0:	18d2      	addlt	r2, r2, r3
 800a0e2:	1b9e      	subge	r6, r3, r6
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	bfbc      	itt	lt
 800a0e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a0ea:	2600      	movlt	r6, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bfb7      	itett	lt
 800a0f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a0f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a0f8:	1a9d      	sublt	r5, r3, r2
 800a0fa:	2300      	movlt	r3, #0
 800a0fc:	e741      	b.n	8009f82 <_dtoa_r+0x742>
 800a0fe:	9e08      	ldr	r6, [sp, #32]
 800a100:	9d05      	ldr	r5, [sp, #20]
 800a102:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a104:	e748      	b.n	8009f98 <_dtoa_r+0x758>
 800a106:	9a08      	ldr	r2, [sp, #32]
 800a108:	e770      	b.n	8009fec <_dtoa_r+0x7ac>
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	dc19      	bgt.n	800a144 <_dtoa_r+0x904>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	b9bb      	cbnz	r3, 800a144 <_dtoa_r+0x904>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a11a:	b99b      	cbnz	r3, 800a144 <_dtoa_r+0x904>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a122:	0d1b      	lsrs	r3, r3, #20
 800a124:	051b      	lsls	r3, r3, #20
 800a126:	b183      	cbz	r3, 800a14a <_dtoa_r+0x90a>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	3301      	adds	r3, #1
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	f04f 0801 	mov.w	r8, #1
 800a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f47f af6f 	bne.w	800a01e <_dtoa_r+0x7de>
 800a140:	2001      	movs	r0, #1
 800a142:	e774      	b.n	800a02e <_dtoa_r+0x7ee>
 800a144:	f04f 0800 	mov.w	r8, #0
 800a148:	e7f6      	b.n	800a138 <_dtoa_r+0x8f8>
 800a14a:	4698      	mov	r8, r3
 800a14c:	e7f4      	b.n	800a138 <_dtoa_r+0x8f8>
 800a14e:	d082      	beq.n	800a056 <_dtoa_r+0x816>
 800a150:	9a05      	ldr	r2, [sp, #20]
 800a152:	331c      	adds	r3, #28
 800a154:	441a      	add	r2, r3
 800a156:	9205      	str	r2, [sp, #20]
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	441a      	add	r2, r3
 800a15c:	441d      	add	r5, r3
 800a15e:	9206      	str	r2, [sp, #24]
 800a160:	e779      	b.n	800a056 <_dtoa_r+0x816>
 800a162:	4603      	mov	r3, r0
 800a164:	e7f4      	b.n	800a150 <_dtoa_r+0x910>
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc37      	bgt.n	800a1dc <_dtoa_r+0x99c>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	dd34      	ble.n	800a1dc <_dtoa_r+0x99c>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	b963      	cbnz	r3, 800a194 <_dtoa_r+0x954>
 800a17a:	4631      	mov	r1, r6
 800a17c:	2205      	movs	r2, #5
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fab2 	bl	800a6e8 <__multadd>
 800a184:	4601      	mov	r1, r0
 800a186:	4606      	mov	r6, r0
 800a188:	4650      	mov	r0, sl
 800a18a:	f000 fcc7 	bl	800ab1c <__mcmp>
 800a18e:	2800      	cmp	r0, #0
 800a190:	f73f adbb 	bgt.w	8009d0a <_dtoa_r+0x4ca>
 800a194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a196:	9d00      	ldr	r5, [sp, #0]
 800a198:	ea6f 0b03 	mvn.w	fp, r3
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fa7e 	bl	800a6a4 <_Bfree>
 800a1a8:	2f00      	cmp	r7, #0
 800a1aa:	f43f aeab 	beq.w	8009f04 <_dtoa_r+0x6c4>
 800a1ae:	f1b8 0f00 	cmp.w	r8, #0
 800a1b2:	d005      	beq.n	800a1c0 <_dtoa_r+0x980>
 800a1b4:	45b8      	cmp	r8, r7
 800a1b6:	d003      	beq.n	800a1c0 <_dtoa_r+0x980>
 800a1b8:	4641      	mov	r1, r8
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fa72 	bl	800a6a4 <_Bfree>
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fa6e 	bl	800a6a4 <_Bfree>
 800a1c8:	e69c      	b.n	8009f04 <_dtoa_r+0x6c4>
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	4637      	mov	r7, r6
 800a1ce:	e7e1      	b.n	800a194 <_dtoa_r+0x954>
 800a1d0:	46bb      	mov	fp, r7
 800a1d2:	4637      	mov	r7, r6
 800a1d4:	e599      	b.n	8009d0a <_dtoa_r+0x4ca>
 800a1d6:	bf00      	nop
 800a1d8:	40240000 	.word	0x40240000
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80c8 	beq.w	800a374 <_dtoa_r+0xb34>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	2d00      	cmp	r5, #0
 800a1ea:	dd05      	ble.n	800a1f8 <_dtoa_r+0x9b8>
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fc27 	bl	800aa44 <__lshift>
 800a1f6:	4607      	mov	r7, r0
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	d05b      	beq.n	800a2b6 <_dtoa_r+0xa76>
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fa0f 	bl	800a624 <_Balloc>
 800a206:	4605      	mov	r5, r0
 800a208:	b928      	cbnz	r0, 800a216 <_dtoa_r+0x9d6>
 800a20a:	4b83      	ldr	r3, [pc, #524]	; (800a418 <_dtoa_r+0xbd8>)
 800a20c:	4602      	mov	r2, r0
 800a20e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a212:	f7ff bb2e 	b.w	8009872 <_dtoa_r+0x32>
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	3202      	adds	r2, #2
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	f107 010c 	add.w	r1, r7, #12
 800a220:	300c      	adds	r0, #12
 800a222:	f7ff fa57 	bl	80096d4 <memcpy>
 800a226:	2201      	movs	r2, #1
 800a228:	4629      	mov	r1, r5
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fc0a 	bl	800aa44 <__lshift>
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a23a:	4413      	add	r3, r2
 800a23c:	9308      	str	r3, [sp, #32]
 800a23e:	9b02      	ldr	r3, [sp, #8]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	46b8      	mov	r8, r7
 800a246:	9306      	str	r3, [sp, #24]
 800a248:	4607      	mov	r7, r0
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	4631      	mov	r1, r6
 800a24e:	3b01      	subs	r3, #1
 800a250:	4650      	mov	r0, sl
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	f7ff fa6a 	bl	800972c <quorem>
 800a258:	4641      	mov	r1, r8
 800a25a:	9002      	str	r0, [sp, #8]
 800a25c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a260:	4650      	mov	r0, sl
 800a262:	f000 fc5b 	bl	800ab1c <__mcmp>
 800a266:	463a      	mov	r2, r7
 800a268:	9005      	str	r0, [sp, #20]
 800a26a:	4631      	mov	r1, r6
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fc71 	bl	800ab54 <__mdiff>
 800a272:	68c2      	ldr	r2, [r0, #12]
 800a274:	4605      	mov	r5, r0
 800a276:	bb02      	cbnz	r2, 800a2ba <_dtoa_r+0xa7a>
 800a278:	4601      	mov	r1, r0
 800a27a:	4650      	mov	r0, sl
 800a27c:	f000 fc4e 	bl	800ab1c <__mcmp>
 800a280:	4602      	mov	r2, r0
 800a282:	4629      	mov	r1, r5
 800a284:	4620      	mov	r0, r4
 800a286:	9209      	str	r2, [sp, #36]	; 0x24
 800a288:	f000 fa0c 	bl	800a6a4 <_Bfree>
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a290:	9d04      	ldr	r5, [sp, #16]
 800a292:	ea43 0102 	orr.w	r1, r3, r2
 800a296:	9b06      	ldr	r3, [sp, #24]
 800a298:	4319      	orrs	r1, r3
 800a29a:	d110      	bne.n	800a2be <_dtoa_r+0xa7e>
 800a29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2a0:	d029      	beq.n	800a2f6 <_dtoa_r+0xab6>
 800a2a2:	9b05      	ldr	r3, [sp, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd02      	ble.n	800a2ae <_dtoa_r+0xa6e>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	f883 9000 	strb.w	r9, [r3]
 800a2b4:	e774      	b.n	800a1a0 <_dtoa_r+0x960>
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	e7ba      	b.n	800a230 <_dtoa_r+0x9f0>
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	e7e1      	b.n	800a282 <_dtoa_r+0xa42>
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	db04      	blt.n	800a2ce <_dtoa_r+0xa8e>
 800a2c4:	9907      	ldr	r1, [sp, #28]
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	9906      	ldr	r1, [sp, #24]
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	d120      	bne.n	800a310 <_dtoa_r+0xad0>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dded      	ble.n	800a2ae <_dtoa_r+0xa6e>
 800a2d2:	4651      	mov	r1, sl
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fbb4 	bl	800aa44 <__lshift>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4682      	mov	sl, r0
 800a2e0:	f000 fc1c 	bl	800ab1c <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	dc03      	bgt.n	800a2f0 <_dtoa_r+0xab0>
 800a2e8:	d1e1      	bne.n	800a2ae <_dtoa_r+0xa6e>
 800a2ea:	f019 0f01 	tst.w	r9, #1
 800a2ee:	d0de      	beq.n	800a2ae <_dtoa_r+0xa6e>
 800a2f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2f4:	d1d8      	bne.n	800a2a8 <_dtoa_r+0xa68>
 800a2f6:	9a01      	ldr	r2, [sp, #4]
 800a2f8:	2339      	movs	r3, #57	; 0x39
 800a2fa:	7013      	strb	r3, [r2, #0]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	461d      	mov	r5, r3
 800a300:	3b01      	subs	r3, #1
 800a302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a306:	2a39      	cmp	r2, #57	; 0x39
 800a308:	d06c      	beq.n	800a3e4 <_dtoa_r+0xba4>
 800a30a:	3201      	adds	r2, #1
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	e747      	b.n	800a1a0 <_dtoa_r+0x960>
 800a310:	2a00      	cmp	r2, #0
 800a312:	dd07      	ble.n	800a324 <_dtoa_r+0xae4>
 800a314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a318:	d0ed      	beq.n	800a2f6 <_dtoa_r+0xab6>
 800a31a:	9a01      	ldr	r2, [sp, #4]
 800a31c:	f109 0301 	add.w	r3, r9, #1
 800a320:	7013      	strb	r3, [r2, #0]
 800a322:	e73d      	b.n	800a1a0 <_dtoa_r+0x960>
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	9a08      	ldr	r2, [sp, #32]
 800a328:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d043      	beq.n	800a3b8 <_dtoa_r+0xb78>
 800a330:	4651      	mov	r1, sl
 800a332:	2300      	movs	r3, #0
 800a334:	220a      	movs	r2, #10
 800a336:	4620      	mov	r0, r4
 800a338:	f000 f9d6 	bl	800a6e8 <__multadd>
 800a33c:	45b8      	cmp	r8, r7
 800a33e:	4682      	mov	sl, r0
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	f04f 020a 	mov.w	r2, #10
 800a348:	4641      	mov	r1, r8
 800a34a:	4620      	mov	r0, r4
 800a34c:	d107      	bne.n	800a35e <_dtoa_r+0xb1e>
 800a34e:	f000 f9cb 	bl	800a6e8 <__multadd>
 800a352:	4680      	mov	r8, r0
 800a354:	4607      	mov	r7, r0
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	3301      	adds	r3, #1
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	e775      	b.n	800a24a <_dtoa_r+0xa0a>
 800a35e:	f000 f9c3 	bl	800a6e8 <__multadd>
 800a362:	4639      	mov	r1, r7
 800a364:	4680      	mov	r8, r0
 800a366:	2300      	movs	r3, #0
 800a368:	220a      	movs	r2, #10
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f9bc 	bl	800a6e8 <__multadd>
 800a370:	4607      	mov	r7, r0
 800a372:	e7f0      	b.n	800a356 <_dtoa_r+0xb16>
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	9d00      	ldr	r5, [sp, #0]
 800a37a:	4631      	mov	r1, r6
 800a37c:	4650      	mov	r0, sl
 800a37e:	f7ff f9d5 	bl	800972c <quorem>
 800a382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	f805 9b01 	strb.w	r9, [r5], #1
 800a38c:	1aea      	subs	r2, r5, r3
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	4293      	cmp	r3, r2
 800a392:	dd07      	ble.n	800a3a4 <_dtoa_r+0xb64>
 800a394:	4651      	mov	r1, sl
 800a396:	2300      	movs	r3, #0
 800a398:	220a      	movs	r2, #10
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f9a4 	bl	800a6e8 <__multadd>
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	e7ea      	b.n	800a37a <_dtoa_r+0xb3a>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfc8      	it	gt
 800a3aa:	461d      	movgt	r5, r3
 800a3ac:	9b00      	ldr	r3, [sp, #0]
 800a3ae:	bfd8      	it	le
 800a3b0:	2501      	movle	r5, #1
 800a3b2:	441d      	add	r5, r3
 800a3b4:	f04f 0800 	mov.w	r8, #0
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 fb41 	bl	800aa44 <__lshift>
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	f000 fba9 	bl	800ab1c <__mcmp>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	dc96      	bgt.n	800a2fc <_dtoa_r+0xabc>
 800a3ce:	d102      	bne.n	800a3d6 <_dtoa_r+0xb96>
 800a3d0:	f019 0f01 	tst.w	r9, #1
 800a3d4:	d192      	bne.n	800a2fc <_dtoa_r+0xabc>
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	461d      	mov	r5, r3
 800a3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3de:	2a30      	cmp	r2, #48	; 0x30
 800a3e0:	d0fa      	beq.n	800a3d8 <_dtoa_r+0xb98>
 800a3e2:	e6dd      	b.n	800a1a0 <_dtoa_r+0x960>
 800a3e4:	9a00      	ldr	r2, [sp, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d189      	bne.n	800a2fe <_dtoa_r+0xabe>
 800a3ea:	f10b 0b01 	add.w	fp, fp, #1
 800a3ee:	2331      	movs	r3, #49	; 0x31
 800a3f0:	e796      	b.n	800a320 <_dtoa_r+0xae0>
 800a3f2:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <_dtoa_r+0xbdc>)
 800a3f4:	f7ff ba99 	b.w	800992a <_dtoa_r+0xea>
 800a3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f aa6d 	bne.w	80098da <_dtoa_r+0x9a>
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <_dtoa_r+0xbe0>)
 800a402:	f7ff ba92 	b.w	800992a <_dtoa_r+0xea>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dcb5      	bgt.n	800a378 <_dtoa_r+0xb38>
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	f73f aeb1 	bgt.w	800a176 <_dtoa_r+0x936>
 800a414:	e7b0      	b.n	800a378 <_dtoa_r+0xb38>
 800a416:	bf00      	nop
 800a418:	0800d11a 	.word	0x0800d11a
 800a41c:	0800cfe4 	.word	0x0800cfe4
 800a420:	0800d0b5 	.word	0x0800d0b5

0800a424 <_free_r>:
 800a424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a426:	2900      	cmp	r1, #0
 800a428:	d044      	beq.n	800a4b4 <_free_r+0x90>
 800a42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a42e:	9001      	str	r0, [sp, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f1a1 0404 	sub.w	r4, r1, #4
 800a436:	bfb8      	it	lt
 800a438:	18e4      	addlt	r4, r4, r3
 800a43a:	f000 f8e7 	bl	800a60c <__malloc_lock>
 800a43e:	4a1e      	ldr	r2, [pc, #120]	; (800a4b8 <_free_r+0x94>)
 800a440:	9801      	ldr	r0, [sp, #4]
 800a442:	6813      	ldr	r3, [r2, #0]
 800a444:	b933      	cbnz	r3, 800a454 <_free_r+0x30>
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	6014      	str	r4, [r2, #0]
 800a44a:	b003      	add	sp, #12
 800a44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a450:	f000 b8e2 	b.w	800a618 <__malloc_unlock>
 800a454:	42a3      	cmp	r3, r4
 800a456:	d908      	bls.n	800a46a <_free_r+0x46>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf01      	itttt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	1949      	addeq	r1, r1, r5
 800a466:	6021      	streq	r1, [r4, #0]
 800a468:	e7ed      	b.n	800a446 <_free_r+0x22>
 800a46a:	461a      	mov	r2, r3
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	b10b      	cbz	r3, 800a474 <_free_r+0x50>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d9fa      	bls.n	800a46a <_free_r+0x46>
 800a474:	6811      	ldr	r1, [r2, #0]
 800a476:	1855      	adds	r5, r2, r1
 800a478:	42a5      	cmp	r5, r4
 800a47a:	d10b      	bne.n	800a494 <_free_r+0x70>
 800a47c:	6824      	ldr	r4, [r4, #0]
 800a47e:	4421      	add	r1, r4
 800a480:	1854      	adds	r4, r2, r1
 800a482:	42a3      	cmp	r3, r4
 800a484:	6011      	str	r1, [r2, #0]
 800a486:	d1e0      	bne.n	800a44a <_free_r+0x26>
 800a488:	681c      	ldr	r4, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	6053      	str	r3, [r2, #4]
 800a48e:	440c      	add	r4, r1
 800a490:	6014      	str	r4, [r2, #0]
 800a492:	e7da      	b.n	800a44a <_free_r+0x26>
 800a494:	d902      	bls.n	800a49c <_free_r+0x78>
 800a496:	230c      	movs	r3, #12
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	e7d6      	b.n	800a44a <_free_r+0x26>
 800a49c:	6825      	ldr	r5, [r4, #0]
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	bf04      	itt	eq
 800a4a4:	6819      	ldreq	r1, [r3, #0]
 800a4a6:	685b      	ldreq	r3, [r3, #4]
 800a4a8:	6063      	str	r3, [r4, #4]
 800a4aa:	bf04      	itt	eq
 800a4ac:	1949      	addeq	r1, r1, r5
 800a4ae:	6021      	streq	r1, [r4, #0]
 800a4b0:	6054      	str	r4, [r2, #4]
 800a4b2:	e7ca      	b.n	800a44a <_free_r+0x26>
 800a4b4:	b003      	add	sp, #12
 800a4b6:	bd30      	pop	{r4, r5, pc}
 800a4b8:	200010ac 	.word	0x200010ac

0800a4bc <malloc>:
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <malloc+0xc>)
 800a4be:	4601      	mov	r1, r0
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	f000 b823 	b.w	800a50c <_malloc_r>
 800a4c6:	bf00      	nop
 800a4c8:	20000140 	.word	0x20000140

0800a4cc <sbrk_aligned>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4e0e      	ldr	r6, [pc, #56]	; (800a508 <sbrk_aligned+0x3c>)
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	6831      	ldr	r1, [r6, #0]
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	b911      	cbnz	r1, 800a4de <sbrk_aligned+0x12>
 800a4d8:	f001 f81a 	bl	800b510 <_sbrk_r>
 800a4dc:	6030      	str	r0, [r6, #0]
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f001 f815 	bl	800b510 <_sbrk_r>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	d00a      	beq.n	800a500 <sbrk_aligned+0x34>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d007      	beq.n	800a504 <sbrk_aligned+0x38>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f001 f80a 	bl	800b510 <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d101      	bne.n	800a504 <sbrk_aligned+0x38>
 800a500:	f04f 34ff 	mov.w	r4, #4294967295
 800a504:	4620      	mov	r0, r4
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	200010b0 	.word	0x200010b0

0800a50c <_malloc_r>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	1ccd      	adds	r5, r1, #3
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	2d00      	cmp	r5, #0
 800a520:	4607      	mov	r7, r0
 800a522:	db01      	blt.n	800a528 <_malloc_r+0x1c>
 800a524:	42a9      	cmp	r1, r5
 800a526:	d905      	bls.n	800a534 <_malloc_r+0x28>
 800a528:	230c      	movs	r3, #12
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	2600      	movs	r6, #0
 800a52e:	4630      	mov	r0, r6
 800a530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a608 <_malloc_r+0xfc>
 800a538:	f000 f868 	bl	800a60c <__malloc_lock>
 800a53c:	f8d8 3000 	ldr.w	r3, [r8]
 800a540:	461c      	mov	r4, r3
 800a542:	bb5c      	cbnz	r4, 800a59c <_malloc_r+0x90>
 800a544:	4629      	mov	r1, r5
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ffc0 	bl	800a4cc <sbrk_aligned>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	4604      	mov	r4, r0
 800a550:	d155      	bne.n	800a5fe <_malloc_r+0xf2>
 800a552:	f8d8 4000 	ldr.w	r4, [r8]
 800a556:	4626      	mov	r6, r4
 800a558:	2e00      	cmp	r6, #0
 800a55a:	d145      	bne.n	800a5e8 <_malloc_r+0xdc>
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	d048      	beq.n	800a5f2 <_malloc_r+0xe6>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	4631      	mov	r1, r6
 800a564:	4638      	mov	r0, r7
 800a566:	eb04 0903 	add.w	r9, r4, r3
 800a56a:	f000 ffd1 	bl	800b510 <_sbrk_r>
 800a56e:	4581      	cmp	r9, r0
 800a570:	d13f      	bne.n	800a5f2 <_malloc_r+0xe6>
 800a572:	6821      	ldr	r1, [r4, #0]
 800a574:	1a6d      	subs	r5, r5, r1
 800a576:	4629      	mov	r1, r5
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff ffa7 	bl	800a4cc <sbrk_aligned>
 800a57e:	3001      	adds	r0, #1
 800a580:	d037      	beq.n	800a5f2 <_malloc_r+0xe6>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	442b      	add	r3, r5
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	f8d8 3000 	ldr.w	r3, [r8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d038      	beq.n	800a602 <_malloc_r+0xf6>
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	42a2      	cmp	r2, r4
 800a594:	d12b      	bne.n	800a5ee <_malloc_r+0xe2>
 800a596:	2200      	movs	r2, #0
 800a598:	605a      	str	r2, [r3, #4]
 800a59a:	e00f      	b.n	800a5bc <_malloc_r+0xb0>
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	1b52      	subs	r2, r2, r5
 800a5a0:	d41f      	bmi.n	800a5e2 <_malloc_r+0xd6>
 800a5a2:	2a0b      	cmp	r2, #11
 800a5a4:	d917      	bls.n	800a5d6 <_malloc_r+0xca>
 800a5a6:	1961      	adds	r1, r4, r5
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	6025      	str	r5, [r4, #0]
 800a5ac:	bf18      	it	ne
 800a5ae:	6059      	strne	r1, [r3, #4]
 800a5b0:	6863      	ldr	r3, [r4, #4]
 800a5b2:	bf08      	it	eq
 800a5b4:	f8c8 1000 	streq.w	r1, [r8]
 800a5b8:	5162      	str	r2, [r4, r5]
 800a5ba:	604b      	str	r3, [r1, #4]
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f104 060b 	add.w	r6, r4, #11
 800a5c2:	f000 f829 	bl	800a618 <__malloc_unlock>
 800a5c6:	f026 0607 	bic.w	r6, r6, #7
 800a5ca:	1d23      	adds	r3, r4, #4
 800a5cc:	1af2      	subs	r2, r6, r3
 800a5ce:	d0ae      	beq.n	800a52e <_malloc_r+0x22>
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	50a3      	str	r3, [r4, r2]
 800a5d4:	e7ab      	b.n	800a52e <_malloc_r+0x22>
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	6862      	ldr	r2, [r4, #4]
 800a5da:	d1dd      	bne.n	800a598 <_malloc_r+0x8c>
 800a5dc:	f8c8 2000 	str.w	r2, [r8]
 800a5e0:	e7ec      	b.n	800a5bc <_malloc_r+0xb0>
 800a5e2:	4623      	mov	r3, r4
 800a5e4:	6864      	ldr	r4, [r4, #4]
 800a5e6:	e7ac      	b.n	800a542 <_malloc_r+0x36>
 800a5e8:	4634      	mov	r4, r6
 800a5ea:	6876      	ldr	r6, [r6, #4]
 800a5ec:	e7b4      	b.n	800a558 <_malloc_r+0x4c>
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	e7cc      	b.n	800a58c <_malloc_r+0x80>
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f000 f80e 	bl	800a618 <__malloc_unlock>
 800a5fc:	e797      	b.n	800a52e <_malloc_r+0x22>
 800a5fe:	6025      	str	r5, [r4, #0]
 800a600:	e7dc      	b.n	800a5bc <_malloc_r+0xb0>
 800a602:	605b      	str	r3, [r3, #4]
 800a604:	deff      	udf	#255	; 0xff
 800a606:	bf00      	nop
 800a608:	200010ac 	.word	0x200010ac

0800a60c <__malloc_lock>:
 800a60c:	4801      	ldr	r0, [pc, #4]	; (800a614 <__malloc_lock+0x8>)
 800a60e:	f7ff b85f 	b.w	80096d0 <__retarget_lock_acquire_recursive>
 800a612:	bf00      	nop
 800a614:	200010a8 	.word	0x200010a8

0800a618 <__malloc_unlock>:
 800a618:	4801      	ldr	r0, [pc, #4]	; (800a620 <__malloc_unlock+0x8>)
 800a61a:	f7ff b85a 	b.w	80096d2 <__retarget_lock_release_recursive>
 800a61e:	bf00      	nop
 800a620:	200010a8 	.word	0x200010a8

0800a624 <_Balloc>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	69c6      	ldr	r6, [r0, #28]
 800a628:	4604      	mov	r4, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	b976      	cbnz	r6, 800a64c <_Balloc+0x28>
 800a62e:	2010      	movs	r0, #16
 800a630:	f7ff ff44 	bl	800a4bc <malloc>
 800a634:	4602      	mov	r2, r0
 800a636:	61e0      	str	r0, [r4, #28]
 800a638:	b920      	cbnz	r0, 800a644 <_Balloc+0x20>
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <_Balloc+0x78>)
 800a63c:	4818      	ldr	r0, [pc, #96]	; (800a6a0 <_Balloc+0x7c>)
 800a63e:	216b      	movs	r1, #107	; 0x6b
 800a640:	f7ff f856 	bl	80096f0 <__assert_func>
 800a644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a648:	6006      	str	r6, [r0, #0]
 800a64a:	60c6      	str	r6, [r0, #12]
 800a64c:	69e6      	ldr	r6, [r4, #28]
 800a64e:	68f3      	ldr	r3, [r6, #12]
 800a650:	b183      	cbz	r3, 800a674 <_Balloc+0x50>
 800a652:	69e3      	ldr	r3, [r4, #28]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a65a:	b9b8      	cbnz	r0, 800a68c <_Balloc+0x68>
 800a65c:	2101      	movs	r1, #1
 800a65e:	fa01 f605 	lsl.w	r6, r1, r5
 800a662:	1d72      	adds	r2, r6, #5
 800a664:	0092      	lsls	r2, r2, #2
 800a666:	4620      	mov	r0, r4
 800a668:	f000 ff69 	bl	800b53e <_calloc_r>
 800a66c:	b160      	cbz	r0, 800a688 <_Balloc+0x64>
 800a66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a672:	e00e      	b.n	800a692 <_Balloc+0x6e>
 800a674:	2221      	movs	r2, #33	; 0x21
 800a676:	2104      	movs	r1, #4
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 ff60 	bl	800b53e <_calloc_r>
 800a67e:	69e3      	ldr	r3, [r4, #28]
 800a680:	60f0      	str	r0, [r6, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e4      	bne.n	800a652 <_Balloc+0x2e>
 800a688:	2000      	movs	r0, #0
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	6802      	ldr	r2, [r0, #0]
 800a68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a692:	2300      	movs	r3, #0
 800a694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a698:	e7f7      	b.n	800a68a <_Balloc+0x66>
 800a69a:	bf00      	nop
 800a69c:	0800d008 	.word	0x0800d008
 800a6a0:	0800d12b 	.word	0x0800d12b

0800a6a4 <_Bfree>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	69c6      	ldr	r6, [r0, #28]
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	b976      	cbnz	r6, 800a6cc <_Bfree+0x28>
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	f7ff ff04 	bl	800a4bc <malloc>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	61e8      	str	r0, [r5, #28]
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_Bfree+0x20>
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <_Bfree+0x3c>)
 800a6bc:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <_Bfree+0x40>)
 800a6be:	218f      	movs	r1, #143	; 0x8f
 800a6c0:	f7ff f816 	bl	80096f0 <__assert_func>
 800a6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c8:	6006      	str	r6, [r0, #0]
 800a6ca:	60c6      	str	r6, [r0, #12]
 800a6cc:	b13c      	cbz	r4, 800a6de <_Bfree+0x3a>
 800a6ce:	69eb      	ldr	r3, [r5, #28]
 800a6d0:	6862      	ldr	r2, [r4, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d8:	6021      	str	r1, [r4, #0]
 800a6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	0800d008 	.word	0x0800d008
 800a6e4:	0800d12b 	.word	0x0800d12b

0800a6e8 <__multadd>:
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	690d      	ldr	r5, [r1, #16]
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	461e      	mov	r6, r3
 800a6f4:	f101 0c14 	add.w	ip, r1, #20
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f8dc 3000 	ldr.w	r3, [ip]
 800a6fe:	b299      	uxth	r1, r3
 800a700:	fb02 6101 	mla	r1, r2, r1, r6
 800a704:	0c1e      	lsrs	r6, r3, #16
 800a706:	0c0b      	lsrs	r3, r1, #16
 800a708:	fb02 3306 	mla	r3, r2, r6, r3
 800a70c:	b289      	uxth	r1, r1
 800a70e:	3001      	adds	r0, #1
 800a710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a714:	4285      	cmp	r5, r0
 800a716:	f84c 1b04 	str.w	r1, [ip], #4
 800a71a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a71e:	dcec      	bgt.n	800a6fa <__multadd+0x12>
 800a720:	b30e      	cbz	r6, 800a766 <__multadd+0x7e>
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	42ab      	cmp	r3, r5
 800a726:	dc19      	bgt.n	800a75c <__multadd+0x74>
 800a728:	6861      	ldr	r1, [r4, #4]
 800a72a:	4638      	mov	r0, r7
 800a72c:	3101      	adds	r1, #1
 800a72e:	f7ff ff79 	bl	800a624 <_Balloc>
 800a732:	4680      	mov	r8, r0
 800a734:	b928      	cbnz	r0, 800a742 <__multadd+0x5a>
 800a736:	4602      	mov	r2, r0
 800a738:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <__multadd+0x84>)
 800a73a:	480d      	ldr	r0, [pc, #52]	; (800a770 <__multadd+0x88>)
 800a73c:	21ba      	movs	r1, #186	; 0xba
 800a73e:	f7fe ffd7 	bl	80096f0 <__assert_func>
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	3202      	adds	r2, #2
 800a746:	f104 010c 	add.w	r1, r4, #12
 800a74a:	0092      	lsls	r2, r2, #2
 800a74c:	300c      	adds	r0, #12
 800a74e:	f7fe ffc1 	bl	80096d4 <memcpy>
 800a752:	4621      	mov	r1, r4
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ffa5 	bl	800a6a4 <_Bfree>
 800a75a:	4644      	mov	r4, r8
 800a75c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a760:	3501      	adds	r5, #1
 800a762:	615e      	str	r6, [r3, #20]
 800a764:	6125      	str	r5, [r4, #16]
 800a766:	4620      	mov	r0, r4
 800a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76c:	0800d11a 	.word	0x0800d11a
 800a770:	0800d12b 	.word	0x0800d12b

0800a774 <__hi0bits>:
 800a774:	0c03      	lsrs	r3, r0, #16
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	b9d3      	cbnz	r3, 800a7b0 <__hi0bits+0x3c>
 800a77a:	0400      	lsls	r0, r0, #16
 800a77c:	2310      	movs	r3, #16
 800a77e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a782:	bf04      	itt	eq
 800a784:	0200      	lsleq	r0, r0, #8
 800a786:	3308      	addeq	r3, #8
 800a788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a78c:	bf04      	itt	eq
 800a78e:	0100      	lsleq	r0, r0, #4
 800a790:	3304      	addeq	r3, #4
 800a792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a796:	bf04      	itt	eq
 800a798:	0080      	lsleq	r0, r0, #2
 800a79a:	3302      	addeq	r3, #2
 800a79c:	2800      	cmp	r0, #0
 800a79e:	db05      	blt.n	800a7ac <__hi0bits+0x38>
 800a7a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7a4:	f103 0301 	add.w	r3, r3, #1
 800a7a8:	bf08      	it	eq
 800a7aa:	2320      	moveq	r3, #32
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	4770      	bx	lr
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e7e4      	b.n	800a77e <__hi0bits+0xa>

0800a7b4 <__lo0bits>:
 800a7b4:	6803      	ldr	r3, [r0, #0]
 800a7b6:	f013 0207 	ands.w	r2, r3, #7
 800a7ba:	d00c      	beq.n	800a7d6 <__lo0bits+0x22>
 800a7bc:	07d9      	lsls	r1, r3, #31
 800a7be:	d422      	bmi.n	800a806 <__lo0bits+0x52>
 800a7c0:	079a      	lsls	r2, r3, #30
 800a7c2:	bf49      	itett	mi
 800a7c4:	085b      	lsrmi	r3, r3, #1
 800a7c6:	089b      	lsrpl	r3, r3, #2
 800a7c8:	6003      	strmi	r3, [r0, #0]
 800a7ca:	2201      	movmi	r2, #1
 800a7cc:	bf5c      	itt	pl
 800a7ce:	6003      	strpl	r3, [r0, #0]
 800a7d0:	2202      	movpl	r2, #2
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	4770      	bx	lr
 800a7d6:	b299      	uxth	r1, r3
 800a7d8:	b909      	cbnz	r1, 800a7de <__lo0bits+0x2a>
 800a7da:	0c1b      	lsrs	r3, r3, #16
 800a7dc:	2210      	movs	r2, #16
 800a7de:	b2d9      	uxtb	r1, r3
 800a7e0:	b909      	cbnz	r1, 800a7e6 <__lo0bits+0x32>
 800a7e2:	3208      	adds	r2, #8
 800a7e4:	0a1b      	lsrs	r3, r3, #8
 800a7e6:	0719      	lsls	r1, r3, #28
 800a7e8:	bf04      	itt	eq
 800a7ea:	091b      	lsreq	r3, r3, #4
 800a7ec:	3204      	addeq	r2, #4
 800a7ee:	0799      	lsls	r1, r3, #30
 800a7f0:	bf04      	itt	eq
 800a7f2:	089b      	lsreq	r3, r3, #2
 800a7f4:	3202      	addeq	r2, #2
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	d403      	bmi.n	800a802 <__lo0bits+0x4e>
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	f102 0201 	add.w	r2, r2, #1
 800a800:	d003      	beq.n	800a80a <__lo0bits+0x56>
 800a802:	6003      	str	r3, [r0, #0]
 800a804:	e7e5      	b.n	800a7d2 <__lo0bits+0x1e>
 800a806:	2200      	movs	r2, #0
 800a808:	e7e3      	b.n	800a7d2 <__lo0bits+0x1e>
 800a80a:	2220      	movs	r2, #32
 800a80c:	e7e1      	b.n	800a7d2 <__lo0bits+0x1e>
	...

0800a810 <__i2b>:
 800a810:	b510      	push	{r4, lr}
 800a812:	460c      	mov	r4, r1
 800a814:	2101      	movs	r1, #1
 800a816:	f7ff ff05 	bl	800a624 <_Balloc>
 800a81a:	4602      	mov	r2, r0
 800a81c:	b928      	cbnz	r0, 800a82a <__i2b+0x1a>
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <__i2b+0x24>)
 800a820:	4805      	ldr	r0, [pc, #20]	; (800a838 <__i2b+0x28>)
 800a822:	f240 1145 	movw	r1, #325	; 0x145
 800a826:	f7fe ff63 	bl	80096f0 <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	6144      	str	r4, [r0, #20]
 800a82e:	6103      	str	r3, [r0, #16]
 800a830:	bd10      	pop	{r4, pc}
 800a832:	bf00      	nop
 800a834:	0800d11a 	.word	0x0800d11a
 800a838:	0800d12b 	.word	0x0800d12b

0800a83c <__multiply>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	4691      	mov	r9, r2
 800a842:	690a      	ldr	r2, [r1, #16]
 800a844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a848:	429a      	cmp	r2, r3
 800a84a:	bfb8      	it	lt
 800a84c:	460b      	movlt	r3, r1
 800a84e:	460c      	mov	r4, r1
 800a850:	bfbc      	itt	lt
 800a852:	464c      	movlt	r4, r9
 800a854:	4699      	movlt	r9, r3
 800a856:	6927      	ldr	r7, [r4, #16]
 800a858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	6861      	ldr	r1, [r4, #4]
 800a860:	eb07 060a 	add.w	r6, r7, sl
 800a864:	42b3      	cmp	r3, r6
 800a866:	b085      	sub	sp, #20
 800a868:	bfb8      	it	lt
 800a86a:	3101      	addlt	r1, #1
 800a86c:	f7ff feda 	bl	800a624 <_Balloc>
 800a870:	b930      	cbnz	r0, 800a880 <__multiply+0x44>
 800a872:	4602      	mov	r2, r0
 800a874:	4b44      	ldr	r3, [pc, #272]	; (800a988 <__multiply+0x14c>)
 800a876:	4845      	ldr	r0, [pc, #276]	; (800a98c <__multiply+0x150>)
 800a878:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a87c:	f7fe ff38 	bl	80096f0 <__assert_func>
 800a880:	f100 0514 	add.w	r5, r0, #20
 800a884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a888:	462b      	mov	r3, r5
 800a88a:	2200      	movs	r2, #0
 800a88c:	4543      	cmp	r3, r8
 800a88e:	d321      	bcc.n	800a8d4 <__multiply+0x98>
 800a890:	f104 0314 	add.w	r3, r4, #20
 800a894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a898:	f109 0314 	add.w	r3, r9, #20
 800a89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8a0:	9202      	str	r2, [sp, #8]
 800a8a2:	1b3a      	subs	r2, r7, r4
 800a8a4:	3a15      	subs	r2, #21
 800a8a6:	f022 0203 	bic.w	r2, r2, #3
 800a8aa:	3204      	adds	r2, #4
 800a8ac:	f104 0115 	add.w	r1, r4, #21
 800a8b0:	428f      	cmp	r7, r1
 800a8b2:	bf38      	it	cc
 800a8b4:	2204      	movcc	r2, #4
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d80c      	bhi.n	800a8da <__multiply+0x9e>
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	dd03      	ble.n	800a8cc <__multiply+0x90>
 800a8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d05b      	beq.n	800a984 <__multiply+0x148>
 800a8cc:	6106      	str	r6, [r0, #16]
 800a8ce:	b005      	add	sp, #20
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	f843 2b04 	str.w	r2, [r3], #4
 800a8d8:	e7d8      	b.n	800a88c <__multiply+0x50>
 800a8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	d024      	beq.n	800a92e <__multiply+0xf2>
 800a8e4:	f104 0e14 	add.w	lr, r4, #20
 800a8e8:	46a9      	mov	r9, r5
 800a8ea:	f04f 0c00 	mov.w	ip, #0
 800a8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800a8f6:	fa1f fb82 	uxth.w	fp, r2
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a904:	f8d9 2000 	ldr.w	r2, [r9]
 800a908:	4461      	add	r1, ip
 800a90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a916:	b289      	uxth	r1, r1
 800a918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a91c:	4577      	cmp	r7, lr
 800a91e:	f849 1b04 	str.w	r1, [r9], #4
 800a922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a926:	d8e2      	bhi.n	800a8ee <__multiply+0xb2>
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	f845 c002 	str.w	ip, [r5, r2]
 800a92e:	9a03      	ldr	r2, [sp, #12]
 800a930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a934:	3304      	adds	r3, #4
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	d021      	beq.n	800a980 <__multiply+0x144>
 800a93c:	6829      	ldr	r1, [r5, #0]
 800a93e:	f104 0c14 	add.w	ip, r4, #20
 800a942:	46ae      	mov	lr, r5
 800a944:	f04f 0a00 	mov.w	sl, #0
 800a948:	f8bc b000 	ldrh.w	fp, [ip]
 800a94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a950:	fb09 220b 	mla	r2, r9, fp, r2
 800a954:	4452      	add	r2, sl
 800a956:	b289      	uxth	r1, r1
 800a958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a95c:	f84e 1b04 	str.w	r1, [lr], #4
 800a960:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a964:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a968:	f8be 1000 	ldrh.w	r1, [lr]
 800a96c:	fb09 110a 	mla	r1, r9, sl, r1
 800a970:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a974:	4567      	cmp	r7, ip
 800a976:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a97a:	d8e5      	bhi.n	800a948 <__multiply+0x10c>
 800a97c:	9a01      	ldr	r2, [sp, #4]
 800a97e:	50a9      	str	r1, [r5, r2]
 800a980:	3504      	adds	r5, #4
 800a982:	e799      	b.n	800a8b8 <__multiply+0x7c>
 800a984:	3e01      	subs	r6, #1
 800a986:	e79b      	b.n	800a8c0 <__multiply+0x84>
 800a988:	0800d11a 	.word	0x0800d11a
 800a98c:	0800d12b 	.word	0x0800d12b

0800a990 <__pow5mult>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	4615      	mov	r5, r2
 800a996:	f012 0203 	ands.w	r2, r2, #3
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	d007      	beq.n	800a9b0 <__pow5mult+0x20>
 800a9a0:	4c25      	ldr	r4, [pc, #148]	; (800aa38 <__pow5mult+0xa8>)
 800a9a2:	3a01      	subs	r2, #1
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9aa:	f7ff fe9d 	bl	800a6e8 <__multadd>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	10ad      	asrs	r5, r5, #2
 800a9b2:	d03d      	beq.n	800aa30 <__pow5mult+0xa0>
 800a9b4:	69f4      	ldr	r4, [r6, #28]
 800a9b6:	b97c      	cbnz	r4, 800a9d8 <__pow5mult+0x48>
 800a9b8:	2010      	movs	r0, #16
 800a9ba:	f7ff fd7f 	bl	800a4bc <malloc>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	61f0      	str	r0, [r6, #28]
 800a9c2:	b928      	cbnz	r0, 800a9d0 <__pow5mult+0x40>
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <__pow5mult+0xac>)
 800a9c6:	481e      	ldr	r0, [pc, #120]	; (800aa40 <__pow5mult+0xb0>)
 800a9c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a9cc:	f7fe fe90 	bl	80096f0 <__assert_func>
 800a9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9d4:	6004      	str	r4, [r0, #0]
 800a9d6:	60c4      	str	r4, [r0, #12]
 800a9d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9e0:	b94c      	cbnz	r4, 800a9f6 <__pow5mult+0x66>
 800a9e2:	f240 2171 	movw	r1, #625	; 0x271
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ff12 	bl	800a810 <__i2b>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	f04f 0900 	mov.w	r9, #0
 800a9fa:	07eb      	lsls	r3, r5, #31
 800a9fc:	d50a      	bpl.n	800aa14 <__pow5mult+0x84>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	4622      	mov	r2, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ff1a 	bl	800a83c <__multiply>
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff fe49 	bl	800a6a4 <_Bfree>
 800aa12:	4647      	mov	r7, r8
 800aa14:	106d      	asrs	r5, r5, #1
 800aa16:	d00b      	beq.n	800aa30 <__pow5mult+0xa0>
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	b938      	cbnz	r0, 800aa2c <__pow5mult+0x9c>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff ff0b 	bl	800a83c <__multiply>
 800aa26:	6020      	str	r0, [r4, #0]
 800aa28:	f8c0 9000 	str.w	r9, [r0]
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	e7e4      	b.n	800a9fa <__pow5mult+0x6a>
 800aa30:	4638      	mov	r0, r7
 800aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa36:	bf00      	nop
 800aa38:	0800d278 	.word	0x0800d278
 800aa3c:	0800d008 	.word	0x0800d008
 800aa40:	0800d12b 	.word	0x0800d12b

0800aa44 <__lshift>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	460c      	mov	r4, r1
 800aa4a:	6849      	ldr	r1, [r1, #4]
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	4607      	mov	r7, r0
 800aa56:	4691      	mov	r9, r2
 800aa58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa5c:	f108 0601 	add.w	r6, r8, #1
 800aa60:	42b3      	cmp	r3, r6
 800aa62:	db0b      	blt.n	800aa7c <__lshift+0x38>
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff fddd 	bl	800a624 <_Balloc>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	b948      	cbnz	r0, 800aa82 <__lshift+0x3e>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b28      	ldr	r3, [pc, #160]	; (800ab14 <__lshift+0xd0>)
 800aa72:	4829      	ldr	r0, [pc, #164]	; (800ab18 <__lshift+0xd4>)
 800aa74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aa78:	f7fe fe3a 	bl	80096f0 <__assert_func>
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	e7ee      	b.n	800aa60 <__lshift+0x1c>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f100 0114 	add.w	r1, r0, #20
 800aa88:	f100 0210 	add.w	r2, r0, #16
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	4553      	cmp	r3, sl
 800aa90:	db33      	blt.n	800aafa <__lshift+0xb6>
 800aa92:	6920      	ldr	r0, [r4, #16]
 800aa94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa98:	f104 0314 	add.w	r3, r4, #20
 800aa9c:	f019 091f 	ands.w	r9, r9, #31
 800aaa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaa8:	d02b      	beq.n	800ab02 <__lshift+0xbe>
 800aaaa:	f1c9 0e20 	rsb	lr, r9, #32
 800aaae:	468a      	mov	sl, r1
 800aab0:	2200      	movs	r2, #0
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	fa00 f009 	lsl.w	r0, r0, r9
 800aab8:	4310      	orrs	r0, r2
 800aaba:	f84a 0b04 	str.w	r0, [sl], #4
 800aabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac2:	459c      	cmp	ip, r3
 800aac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aac8:	d8f3      	bhi.n	800aab2 <__lshift+0x6e>
 800aaca:	ebac 0304 	sub.w	r3, ip, r4
 800aace:	3b15      	subs	r3, #21
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3304      	adds	r3, #4
 800aad6:	f104 0015 	add.w	r0, r4, #21
 800aada:	4584      	cmp	ip, r0
 800aadc:	bf38      	it	cc
 800aade:	2304      	movcc	r3, #4
 800aae0:	50ca      	str	r2, [r1, r3]
 800aae2:	b10a      	cbz	r2, 800aae8 <__lshift+0xa4>
 800aae4:	f108 0602 	add.w	r6, r8, #2
 800aae8:	3e01      	subs	r6, #1
 800aaea:	4638      	mov	r0, r7
 800aaec:	612e      	str	r6, [r5, #16]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7ff fdd8 	bl	800a6a4 <_Bfree>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aafe:	3301      	adds	r3, #1
 800ab00:	e7c5      	b.n	800aa8e <__lshift+0x4a>
 800ab02:	3904      	subs	r1, #4
 800ab04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab0c:	459c      	cmp	ip, r3
 800ab0e:	d8f9      	bhi.n	800ab04 <__lshift+0xc0>
 800ab10:	e7ea      	b.n	800aae8 <__lshift+0xa4>
 800ab12:	bf00      	nop
 800ab14:	0800d11a 	.word	0x0800d11a
 800ab18:	0800d12b 	.word	0x0800d12b

0800ab1c <__mcmp>:
 800ab1c:	b530      	push	{r4, r5, lr}
 800ab1e:	6902      	ldr	r2, [r0, #16]
 800ab20:	690c      	ldr	r4, [r1, #16]
 800ab22:	1b12      	subs	r2, r2, r4
 800ab24:	d10e      	bne.n	800ab44 <__mcmp+0x28>
 800ab26:	f100 0314 	add.w	r3, r0, #20
 800ab2a:	3114      	adds	r1, #20
 800ab2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab3c:	42a5      	cmp	r5, r4
 800ab3e:	d003      	beq.n	800ab48 <__mcmp+0x2c>
 800ab40:	d305      	bcc.n	800ab4e <__mcmp+0x32>
 800ab42:	2201      	movs	r2, #1
 800ab44:	4610      	mov	r0, r2
 800ab46:	bd30      	pop	{r4, r5, pc}
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	d3f3      	bcc.n	800ab34 <__mcmp+0x18>
 800ab4c:	e7fa      	b.n	800ab44 <__mcmp+0x28>
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab52:	e7f7      	b.n	800ab44 <__mcmp+0x28>

0800ab54 <__mdiff>:
 800ab54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4690      	mov	r8, r2
 800ab62:	f7ff ffdb 	bl	800ab1c <__mcmp>
 800ab66:	1e05      	subs	r5, r0, #0
 800ab68:	d110      	bne.n	800ab8c <__mdiff+0x38>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fd59 	bl	800a624 <_Balloc>
 800ab72:	b930      	cbnz	r0, 800ab82 <__mdiff+0x2e>
 800ab74:	4b3a      	ldr	r3, [pc, #232]	; (800ac60 <__mdiff+0x10c>)
 800ab76:	4602      	mov	r2, r0
 800ab78:	f240 2137 	movw	r1, #567	; 0x237
 800ab7c:	4839      	ldr	r0, [pc, #228]	; (800ac64 <__mdiff+0x110>)
 800ab7e:	f7fe fdb7 	bl	80096f0 <__assert_func>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	bfa4      	itt	ge
 800ab8e:	4643      	movge	r3, r8
 800ab90:	46a0      	movge	r8, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab98:	bfa6      	itte	ge
 800ab9a:	461c      	movge	r4, r3
 800ab9c:	2500      	movge	r5, #0
 800ab9e:	2501      	movlt	r5, #1
 800aba0:	f7ff fd40 	bl	800a624 <_Balloc>
 800aba4:	b920      	cbnz	r0, 800abb0 <__mdiff+0x5c>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__mdiff+0x10c>)
 800aba8:	4602      	mov	r2, r0
 800abaa:	f240 2145 	movw	r1, #581	; 0x245
 800abae:	e7e5      	b.n	800ab7c <__mdiff+0x28>
 800abb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abb4:	6926      	ldr	r6, [r4, #16]
 800abb6:	60c5      	str	r5, [r0, #12]
 800abb8:	f104 0914 	add.w	r9, r4, #20
 800abbc:	f108 0514 	add.w	r5, r8, #20
 800abc0:	f100 0e14 	add.w	lr, r0, #20
 800abc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abcc:	f108 0210 	add.w	r2, r8, #16
 800abd0:	46f2      	mov	sl, lr
 800abd2:	2100      	movs	r1, #0
 800abd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abdc:	fa11 f88b 	uxtah	r8, r1, fp
 800abe0:	b299      	uxth	r1, r3
 800abe2:	0c1b      	lsrs	r3, r3, #16
 800abe4:	eba8 0801 	sub.w	r8, r8, r1
 800abe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abf0:	fa1f f888 	uxth.w	r8, r8
 800abf4:	1419      	asrs	r1, r3, #16
 800abf6:	454e      	cmp	r6, r9
 800abf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abfc:	f84a 3b04 	str.w	r3, [sl], #4
 800ac00:	d8e8      	bhi.n	800abd4 <__mdiff+0x80>
 800ac02:	1b33      	subs	r3, r6, r4
 800ac04:	3b15      	subs	r3, #21
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	3415      	adds	r4, #21
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	bf38      	it	cc
 800ac12:	2304      	movcc	r3, #4
 800ac14:	441d      	add	r5, r3
 800ac16:	4473      	add	r3, lr
 800ac18:	469e      	mov	lr, r3
 800ac1a:	462e      	mov	r6, r5
 800ac1c:	4566      	cmp	r6, ip
 800ac1e:	d30e      	bcc.n	800ac3e <__mdiff+0xea>
 800ac20:	f10c 0203 	add.w	r2, ip, #3
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	f022 0203 	bic.w	r2, r2, #3
 800ac2a:	3d03      	subs	r5, #3
 800ac2c:	45ac      	cmp	ip, r5
 800ac2e:	bf38      	it	cc
 800ac30:	2200      	movcc	r2, #0
 800ac32:	4413      	add	r3, r2
 800ac34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac38:	b17a      	cbz	r2, 800ac5a <__mdiff+0x106>
 800ac3a:	6107      	str	r7, [r0, #16]
 800ac3c:	e7a4      	b.n	800ab88 <__mdiff+0x34>
 800ac3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac42:	fa11 f288 	uxtah	r2, r1, r8
 800ac46:	1414      	asrs	r4, r2, #16
 800ac48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac4c:	b292      	uxth	r2, r2
 800ac4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac52:	f84e 2b04 	str.w	r2, [lr], #4
 800ac56:	1421      	asrs	r1, r4, #16
 800ac58:	e7e0      	b.n	800ac1c <__mdiff+0xc8>
 800ac5a:	3f01      	subs	r7, #1
 800ac5c:	e7ea      	b.n	800ac34 <__mdiff+0xe0>
 800ac5e:	bf00      	nop
 800ac60:	0800d11a 	.word	0x0800d11a
 800ac64:	0800d12b 	.word	0x0800d12b

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec59 8b10 	vmov	r8, r9, d0
 800ac74:	4616      	mov	r6, r2
 800ac76:	f7ff fcd5 	bl	800a624 <_Balloc>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <__d2b+0x24>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b24      	ldr	r3, [pc, #144]	; (800ad14 <__d2b+0xac>)
 800ac82:	4825      	ldr	r0, [pc, #148]	; (800ad18 <__d2b+0xb0>)
 800ac84:	f240 310f 	movw	r1, #783	; 0x30f
 800ac88:	f7fe fd32 	bl	80096f0 <__assert_func>
 800ac8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac94:	bb2d      	cbnz	r5, 800ace2 <__d2b+0x7a>
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	f1b8 0300 	subs.w	r3, r8, #0
 800ac9c:	d026      	beq.n	800acec <__d2b+0x84>
 800ac9e:	4668      	mov	r0, sp
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	f7ff fd87 	bl	800a7b4 <__lo0bits>
 800aca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acaa:	b1e8      	cbz	r0, 800ace8 <__d2b+0x80>
 800acac:	f1c0 0320 	rsb	r3, r0, #32
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	430b      	orrs	r3, r1
 800acb6:	40c2      	lsrs	r2, r0
 800acb8:	6163      	str	r3, [r4, #20]
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	61a3      	str	r3, [r4, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf14      	ite	ne
 800acc4:	2202      	movne	r2, #2
 800acc6:	2201      	moveq	r2, #1
 800acc8:	6122      	str	r2, [r4, #16]
 800acca:	b1bd      	cbz	r5, 800acfc <__d2b+0x94>
 800accc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acd0:	4405      	add	r5, r0
 800acd2:	603d      	str	r5, [r7, #0]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acd8:	6030      	str	r0, [r6, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	b003      	add	sp, #12
 800acde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace6:	e7d6      	b.n	800ac96 <__d2b+0x2e>
 800ace8:	6161      	str	r1, [r4, #20]
 800acea:	e7e7      	b.n	800acbc <__d2b+0x54>
 800acec:	a801      	add	r0, sp, #4
 800acee:	f7ff fd61 	bl	800a7b4 <__lo0bits>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	3020      	adds	r0, #32
 800acf8:	2201      	movs	r2, #1
 800acfa:	e7e5      	b.n	800acc8 <__d2b+0x60>
 800acfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad04:	6038      	str	r0, [r7, #0]
 800ad06:	6918      	ldr	r0, [r3, #16]
 800ad08:	f7ff fd34 	bl	800a774 <__hi0bits>
 800ad0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad10:	e7e2      	b.n	800acd8 <__d2b+0x70>
 800ad12:	bf00      	nop
 800ad14:	0800d11a 	.word	0x0800d11a
 800ad18:	0800d12b 	.word	0x0800d12b

0800ad1c <__ssputs_r>:
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	688e      	ldr	r6, [r1, #8]
 800ad22:	461f      	mov	r7, r3
 800ad24:	42be      	cmp	r6, r7
 800ad26:	680b      	ldr	r3, [r1, #0]
 800ad28:	4682      	mov	sl, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	4690      	mov	r8, r2
 800ad2e:	d82c      	bhi.n	800ad8a <__ssputs_r+0x6e>
 800ad30:	898a      	ldrh	r2, [r1, #12]
 800ad32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad36:	d026      	beq.n	800ad86 <__ssputs_r+0x6a>
 800ad38:	6965      	ldr	r5, [r4, #20]
 800ad3a:	6909      	ldr	r1, [r1, #16]
 800ad3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad40:	eba3 0901 	sub.w	r9, r3, r1
 800ad44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad48:	1c7b      	adds	r3, r7, #1
 800ad4a:	444b      	add	r3, r9
 800ad4c:	106d      	asrs	r5, r5, #1
 800ad4e:	429d      	cmp	r5, r3
 800ad50:	bf38      	it	cc
 800ad52:	461d      	movcc	r5, r3
 800ad54:	0553      	lsls	r3, r2, #21
 800ad56:	d527      	bpl.n	800ada8 <__ssputs_r+0x8c>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7ff fbd7 	bl	800a50c <_malloc_r>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	b360      	cbz	r0, 800adbc <__ssputs_r+0xa0>
 800ad62:	6921      	ldr	r1, [r4, #16]
 800ad64:	464a      	mov	r2, r9
 800ad66:	f7fe fcb5 	bl	80096d4 <memcpy>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	6126      	str	r6, [r4, #16]
 800ad78:	6165      	str	r5, [r4, #20]
 800ad7a:	444e      	add	r6, r9
 800ad7c:	eba5 0509 	sub.w	r5, r5, r9
 800ad80:	6026      	str	r6, [r4, #0]
 800ad82:	60a5      	str	r5, [r4, #8]
 800ad84:	463e      	mov	r6, r7
 800ad86:	42be      	cmp	r6, r7
 800ad88:	d900      	bls.n	800ad8c <__ssputs_r+0x70>
 800ad8a:	463e      	mov	r6, r7
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	4632      	mov	r2, r6
 800ad90:	4641      	mov	r1, r8
 800ad92:	f000 fb81 	bl	800b498 <memmove>
 800ad96:	68a3      	ldr	r3, [r4, #8]
 800ad98:	1b9b      	subs	r3, r3, r6
 800ad9a:	60a3      	str	r3, [r4, #8]
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	4433      	add	r3, r6
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada8:	462a      	mov	r2, r5
 800adaa:	f000 fbf0 	bl	800b58e <_realloc_r>
 800adae:	4606      	mov	r6, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1e0      	bne.n	800ad76 <__ssputs_r+0x5a>
 800adb4:	6921      	ldr	r1, [r4, #16]
 800adb6:	4650      	mov	r0, sl
 800adb8:	f7ff fb34 	bl	800a424 <_free_r>
 800adbc:	230c      	movs	r3, #12
 800adbe:	f8ca 3000 	str.w	r3, [sl]
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	e7e9      	b.n	800ada4 <__ssputs_r+0x88>

0800add0 <_svfiprintf_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	4698      	mov	r8, r3
 800add6:	898b      	ldrh	r3, [r1, #12]
 800add8:	061b      	lsls	r3, r3, #24
 800adda:	b09d      	sub	sp, #116	; 0x74
 800addc:	4607      	mov	r7, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	d50e      	bpl.n	800ae02 <_svfiprintf_r+0x32>
 800ade4:	690b      	ldr	r3, [r1, #16]
 800ade6:	b963      	cbnz	r3, 800ae02 <_svfiprintf_r+0x32>
 800ade8:	2140      	movs	r1, #64	; 0x40
 800adea:	f7ff fb8f 	bl	800a50c <_malloc_r>
 800adee:	6028      	str	r0, [r5, #0]
 800adf0:	6128      	str	r0, [r5, #16]
 800adf2:	b920      	cbnz	r0, 800adfe <_svfiprintf_r+0x2e>
 800adf4:	230c      	movs	r3, #12
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e0d0      	b.n	800afa0 <_svfiprintf_r+0x1d0>
 800adfe:	2340      	movs	r3, #64	; 0x40
 800ae00:	616b      	str	r3, [r5, #20]
 800ae02:	2300      	movs	r3, #0
 800ae04:	9309      	str	r3, [sp, #36]	; 0x24
 800ae06:	2320      	movs	r3, #32
 800ae08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae10:	2330      	movs	r3, #48	; 0x30
 800ae12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800afb8 <_svfiprintf_r+0x1e8>
 800ae16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae1a:	f04f 0901 	mov.w	r9, #1
 800ae1e:	4623      	mov	r3, r4
 800ae20:	469a      	mov	sl, r3
 800ae22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae26:	b10a      	cbz	r2, 800ae2c <_svfiprintf_r+0x5c>
 800ae28:	2a25      	cmp	r2, #37	; 0x25
 800ae2a:	d1f9      	bne.n	800ae20 <_svfiprintf_r+0x50>
 800ae2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae30:	d00b      	beq.n	800ae4a <_svfiprintf_r+0x7a>
 800ae32:	465b      	mov	r3, fp
 800ae34:	4622      	mov	r2, r4
 800ae36:	4629      	mov	r1, r5
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7ff ff6f 	bl	800ad1c <__ssputs_r>
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f000 80a9 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae46:	445a      	add	r2, fp
 800ae48:	9209      	str	r2, [sp, #36]	; 0x24
 800ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 80a1 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae54:	2300      	movs	r3, #0
 800ae56:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae5e:	f10a 0a01 	add.w	sl, sl, #1
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	9307      	str	r3, [sp, #28]
 800ae66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae6c:	4654      	mov	r4, sl
 800ae6e:	2205      	movs	r2, #5
 800ae70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae74:	4850      	ldr	r0, [pc, #320]	; (800afb8 <_svfiprintf_r+0x1e8>)
 800ae76:	f7f5 f9ab 	bl	80001d0 <memchr>
 800ae7a:	9a04      	ldr	r2, [sp, #16]
 800ae7c:	b9d8      	cbnz	r0, 800aeb6 <_svfiprintf_r+0xe6>
 800ae7e:	06d0      	lsls	r0, r2, #27
 800ae80:	bf44      	itt	mi
 800ae82:	2320      	movmi	r3, #32
 800ae84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae88:	0711      	lsls	r1, r2, #28
 800ae8a:	bf44      	itt	mi
 800ae8c:	232b      	movmi	r3, #43	; 0x2b
 800ae8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae92:	f89a 3000 	ldrb.w	r3, [sl]
 800ae96:	2b2a      	cmp	r3, #42	; 0x2a
 800ae98:	d015      	beq.n	800aec6 <_svfiprintf_r+0xf6>
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	4654      	mov	r4, sl
 800ae9e:	2000      	movs	r0, #0
 800aea0:	f04f 0c0a 	mov.w	ip, #10
 800aea4:	4621      	mov	r1, r4
 800aea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeaa:	3b30      	subs	r3, #48	; 0x30
 800aeac:	2b09      	cmp	r3, #9
 800aeae:	d94d      	bls.n	800af4c <_svfiprintf_r+0x17c>
 800aeb0:	b1b0      	cbz	r0, 800aee0 <_svfiprintf_r+0x110>
 800aeb2:	9207      	str	r2, [sp, #28]
 800aeb4:	e014      	b.n	800aee0 <_svfiprintf_r+0x110>
 800aeb6:	eba0 0308 	sub.w	r3, r0, r8
 800aeba:	fa09 f303 	lsl.w	r3, r9, r3
 800aebe:	4313      	orrs	r3, r2
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	46a2      	mov	sl, r4
 800aec4:	e7d2      	b.n	800ae6c <_svfiprintf_r+0x9c>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	1d19      	adds	r1, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9103      	str	r1, [sp, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfbb      	ittet	lt
 800aed2:	425b      	neglt	r3, r3
 800aed4:	f042 0202 	orrlt.w	r2, r2, #2
 800aed8:	9307      	strge	r3, [sp, #28]
 800aeda:	9307      	strlt	r3, [sp, #28]
 800aedc:	bfb8      	it	lt
 800aede:	9204      	strlt	r2, [sp, #16]
 800aee0:	7823      	ldrb	r3, [r4, #0]
 800aee2:	2b2e      	cmp	r3, #46	; 0x2e
 800aee4:	d10c      	bne.n	800af00 <_svfiprintf_r+0x130>
 800aee6:	7863      	ldrb	r3, [r4, #1]
 800aee8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeea:	d134      	bne.n	800af56 <_svfiprintf_r+0x186>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	1d1a      	adds	r2, r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	9203      	str	r2, [sp, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfb8      	it	lt
 800aef8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aefc:	3402      	adds	r4, #2
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800afc8 <_svfiprintf_r+0x1f8>
 800af04:	7821      	ldrb	r1, [r4, #0]
 800af06:	2203      	movs	r2, #3
 800af08:	4650      	mov	r0, sl
 800af0a:	f7f5 f961 	bl	80001d0 <memchr>
 800af0e:	b138      	cbz	r0, 800af20 <_svfiprintf_r+0x150>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	eba0 000a 	sub.w	r0, r0, sl
 800af16:	2240      	movs	r2, #64	; 0x40
 800af18:	4082      	lsls	r2, r0
 800af1a:	4313      	orrs	r3, r2
 800af1c:	3401      	adds	r4, #1
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4825      	ldr	r0, [pc, #148]	; (800afbc <_svfiprintf_r+0x1ec>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af2a:	2206      	movs	r2, #6
 800af2c:	f7f5 f950 	bl	80001d0 <memchr>
 800af30:	2800      	cmp	r0, #0
 800af32:	d038      	beq.n	800afa6 <_svfiprintf_r+0x1d6>
 800af34:	4b22      	ldr	r3, [pc, #136]	; (800afc0 <_svfiprintf_r+0x1f0>)
 800af36:	bb1b      	cbnz	r3, 800af80 <_svfiprintf_r+0x1b0>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	3307      	adds	r3, #7
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	3308      	adds	r3, #8
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af46:	4433      	add	r3, r6
 800af48:	9309      	str	r3, [sp, #36]	; 0x24
 800af4a:	e768      	b.n	800ae1e <_svfiprintf_r+0x4e>
 800af4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af50:	460c      	mov	r4, r1
 800af52:	2001      	movs	r0, #1
 800af54:	e7a6      	b.n	800aea4 <_svfiprintf_r+0xd4>
 800af56:	2300      	movs	r3, #0
 800af58:	3401      	adds	r4, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	4619      	mov	r1, r3
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4620      	mov	r0, r4
 800af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af68:	3a30      	subs	r2, #48	; 0x30
 800af6a:	2a09      	cmp	r2, #9
 800af6c:	d903      	bls.n	800af76 <_svfiprintf_r+0x1a6>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c6      	beq.n	800af00 <_svfiprintf_r+0x130>
 800af72:	9105      	str	r1, [sp, #20]
 800af74:	e7c4      	b.n	800af00 <_svfiprintf_r+0x130>
 800af76:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7a:	4604      	mov	r4, r0
 800af7c:	2301      	movs	r3, #1
 800af7e:	e7f0      	b.n	800af62 <_svfiprintf_r+0x192>
 800af80:	ab03      	add	r3, sp, #12
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	462a      	mov	r2, r5
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <_svfiprintf_r+0x1f4>)
 800af88:	a904      	add	r1, sp, #16
 800af8a:	4638      	mov	r0, r7
 800af8c:	f7fd fcc2 	bl	8008914 <_printf_float>
 800af90:	1c42      	adds	r2, r0, #1
 800af92:	4606      	mov	r6, r0
 800af94:	d1d6      	bne.n	800af44 <_svfiprintf_r+0x174>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	065b      	lsls	r3, r3, #25
 800af9a:	f53f af2d 	bmi.w	800adf8 <_svfiprintf_r+0x28>
 800af9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afa0:	b01d      	add	sp, #116	; 0x74
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	ab03      	add	r3, sp, #12
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	462a      	mov	r2, r5
 800afac:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <_svfiprintf_r+0x1f4>)
 800afae:	a904      	add	r1, sp, #16
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7fd ff53 	bl	8008e5c <_printf_i>
 800afb6:	e7eb      	b.n	800af90 <_svfiprintf_r+0x1c0>
 800afb8:	0800d284 	.word	0x0800d284
 800afbc:	0800d28e 	.word	0x0800d28e
 800afc0:	08008915 	.word	0x08008915
 800afc4:	0800ad1d 	.word	0x0800ad1d
 800afc8:	0800d28a 	.word	0x0800d28a

0800afcc <__sfputc_r>:
 800afcc:	6893      	ldr	r3, [r2, #8]
 800afce:	3b01      	subs	r3, #1
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	b410      	push	{r4}
 800afd4:	6093      	str	r3, [r2, #8]
 800afd6:	da08      	bge.n	800afea <__sfputc_r+0x1e>
 800afd8:	6994      	ldr	r4, [r2, #24]
 800afda:	42a3      	cmp	r3, r4
 800afdc:	db01      	blt.n	800afe2 <__sfputc_r+0x16>
 800afde:	290a      	cmp	r1, #10
 800afe0:	d103      	bne.n	800afea <__sfputc_r+0x1e>
 800afe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afe6:	f7fe b9dc 	b.w	80093a2 <__swbuf_r>
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	1c58      	adds	r0, r3, #1
 800afee:	6010      	str	r0, [r2, #0]
 800aff0:	7019      	strb	r1, [r3, #0]
 800aff2:	4608      	mov	r0, r1
 800aff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <__sfputs_r>:
 800affa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affc:	4606      	mov	r6, r0
 800affe:	460f      	mov	r7, r1
 800b000:	4614      	mov	r4, r2
 800b002:	18d5      	adds	r5, r2, r3
 800b004:	42ac      	cmp	r4, r5
 800b006:	d101      	bne.n	800b00c <__sfputs_r+0x12>
 800b008:	2000      	movs	r0, #0
 800b00a:	e007      	b.n	800b01c <__sfputs_r+0x22>
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	463a      	mov	r2, r7
 800b012:	4630      	mov	r0, r6
 800b014:	f7ff ffda 	bl	800afcc <__sfputc_r>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d1f3      	bne.n	800b004 <__sfputs_r+0xa>
 800b01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b020 <_vfiprintf_r>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	460d      	mov	r5, r1
 800b026:	b09d      	sub	sp, #116	; 0x74
 800b028:	4614      	mov	r4, r2
 800b02a:	4698      	mov	r8, r3
 800b02c:	4606      	mov	r6, r0
 800b02e:	b118      	cbz	r0, 800b038 <_vfiprintf_r+0x18>
 800b030:	6a03      	ldr	r3, [r0, #32]
 800b032:	b90b      	cbnz	r3, 800b038 <_vfiprintf_r+0x18>
 800b034:	f7fe f8ae 	bl	8009194 <__sinit>
 800b038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b03a:	07d9      	lsls	r1, r3, #31
 800b03c:	d405      	bmi.n	800b04a <_vfiprintf_r+0x2a>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	059a      	lsls	r2, r3, #22
 800b042:	d402      	bmi.n	800b04a <_vfiprintf_r+0x2a>
 800b044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b046:	f7fe fb43 	bl	80096d0 <__retarget_lock_acquire_recursive>
 800b04a:	89ab      	ldrh	r3, [r5, #12]
 800b04c:	071b      	lsls	r3, r3, #28
 800b04e:	d501      	bpl.n	800b054 <_vfiprintf_r+0x34>
 800b050:	692b      	ldr	r3, [r5, #16]
 800b052:	b99b      	cbnz	r3, 800b07c <_vfiprintf_r+0x5c>
 800b054:	4629      	mov	r1, r5
 800b056:	4630      	mov	r0, r6
 800b058:	f7fe f9e0 	bl	800941c <__swsetup_r>
 800b05c:	b170      	cbz	r0, 800b07c <_vfiprintf_r+0x5c>
 800b05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b060:	07dc      	lsls	r4, r3, #31
 800b062:	d504      	bpl.n	800b06e <_vfiprintf_r+0x4e>
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	b01d      	add	sp, #116	; 0x74
 800b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	0598      	lsls	r0, r3, #22
 800b072:	d4f7      	bmi.n	800b064 <_vfiprintf_r+0x44>
 800b074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b076:	f7fe fb2c 	bl	80096d2 <__retarget_lock_release_recursive>
 800b07a:	e7f3      	b.n	800b064 <_vfiprintf_r+0x44>
 800b07c:	2300      	movs	r3, #0
 800b07e:	9309      	str	r3, [sp, #36]	; 0x24
 800b080:	2320      	movs	r3, #32
 800b082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b086:	f8cd 800c 	str.w	r8, [sp, #12]
 800b08a:	2330      	movs	r3, #48	; 0x30
 800b08c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b240 <_vfiprintf_r+0x220>
 800b090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b094:	f04f 0901 	mov.w	r9, #1
 800b098:	4623      	mov	r3, r4
 800b09a:	469a      	mov	sl, r3
 800b09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a0:	b10a      	cbz	r2, 800b0a6 <_vfiprintf_r+0x86>
 800b0a2:	2a25      	cmp	r2, #37	; 0x25
 800b0a4:	d1f9      	bne.n	800b09a <_vfiprintf_r+0x7a>
 800b0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0aa:	d00b      	beq.n	800b0c4 <_vfiprintf_r+0xa4>
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7ff ffa1 	bl	800affa <__sfputs_r>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	f000 80a9 	beq.w	800b210 <_vfiprintf_r+0x1f0>
 800b0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c0:	445a      	add	r2, fp
 800b0c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80a1 	beq.w	800b210 <_vfiprintf_r+0x1f0>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0d8:	f10a 0a01 	add.w	sl, sl, #1
 800b0dc:	9304      	str	r3, [sp, #16]
 800b0de:	9307      	str	r3, [sp, #28]
 800b0e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0e6:	4654      	mov	r4, sl
 800b0e8:	2205      	movs	r2, #5
 800b0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ee:	4854      	ldr	r0, [pc, #336]	; (800b240 <_vfiprintf_r+0x220>)
 800b0f0:	f7f5 f86e 	bl	80001d0 <memchr>
 800b0f4:	9a04      	ldr	r2, [sp, #16]
 800b0f6:	b9d8      	cbnz	r0, 800b130 <_vfiprintf_r+0x110>
 800b0f8:	06d1      	lsls	r1, r2, #27
 800b0fa:	bf44      	itt	mi
 800b0fc:	2320      	movmi	r3, #32
 800b0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b102:	0713      	lsls	r3, r2, #28
 800b104:	bf44      	itt	mi
 800b106:	232b      	movmi	r3, #43	; 0x2b
 800b108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b2a      	cmp	r3, #42	; 0x2a
 800b112:	d015      	beq.n	800b140 <_vfiprintf_r+0x120>
 800b114:	9a07      	ldr	r2, [sp, #28]
 800b116:	4654      	mov	r4, sl
 800b118:	2000      	movs	r0, #0
 800b11a:	f04f 0c0a 	mov.w	ip, #10
 800b11e:	4621      	mov	r1, r4
 800b120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b124:	3b30      	subs	r3, #48	; 0x30
 800b126:	2b09      	cmp	r3, #9
 800b128:	d94d      	bls.n	800b1c6 <_vfiprintf_r+0x1a6>
 800b12a:	b1b0      	cbz	r0, 800b15a <_vfiprintf_r+0x13a>
 800b12c:	9207      	str	r2, [sp, #28]
 800b12e:	e014      	b.n	800b15a <_vfiprintf_r+0x13a>
 800b130:	eba0 0308 	sub.w	r3, r0, r8
 800b134:	fa09 f303 	lsl.w	r3, r9, r3
 800b138:	4313      	orrs	r3, r2
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	46a2      	mov	sl, r4
 800b13e:	e7d2      	b.n	800b0e6 <_vfiprintf_r+0xc6>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	1d19      	adds	r1, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	9103      	str	r1, [sp, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bfbb      	ittet	lt
 800b14c:	425b      	neglt	r3, r3
 800b14e:	f042 0202 	orrlt.w	r2, r2, #2
 800b152:	9307      	strge	r3, [sp, #28]
 800b154:	9307      	strlt	r3, [sp, #28]
 800b156:	bfb8      	it	lt
 800b158:	9204      	strlt	r2, [sp, #16]
 800b15a:	7823      	ldrb	r3, [r4, #0]
 800b15c:	2b2e      	cmp	r3, #46	; 0x2e
 800b15e:	d10c      	bne.n	800b17a <_vfiprintf_r+0x15a>
 800b160:	7863      	ldrb	r3, [r4, #1]
 800b162:	2b2a      	cmp	r3, #42	; 0x2a
 800b164:	d134      	bne.n	800b1d0 <_vfiprintf_r+0x1b0>
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	1d1a      	adds	r2, r3, #4
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	9203      	str	r2, [sp, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	bfb8      	it	lt
 800b172:	f04f 33ff 	movlt.w	r3, #4294967295
 800b176:	3402      	adds	r4, #2
 800b178:	9305      	str	r3, [sp, #20]
 800b17a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b250 <_vfiprintf_r+0x230>
 800b17e:	7821      	ldrb	r1, [r4, #0]
 800b180:	2203      	movs	r2, #3
 800b182:	4650      	mov	r0, sl
 800b184:	f7f5 f824 	bl	80001d0 <memchr>
 800b188:	b138      	cbz	r0, 800b19a <_vfiprintf_r+0x17a>
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	eba0 000a 	sub.w	r0, r0, sl
 800b190:	2240      	movs	r2, #64	; 0x40
 800b192:	4082      	lsls	r2, r0
 800b194:	4313      	orrs	r3, r2
 800b196:	3401      	adds	r4, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19e:	4829      	ldr	r0, [pc, #164]	; (800b244 <_vfiprintf_r+0x224>)
 800b1a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1a4:	2206      	movs	r2, #6
 800b1a6:	f7f5 f813 	bl	80001d0 <memchr>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d03f      	beq.n	800b22e <_vfiprintf_r+0x20e>
 800b1ae:	4b26      	ldr	r3, [pc, #152]	; (800b248 <_vfiprintf_r+0x228>)
 800b1b0:	bb1b      	cbnz	r3, 800b1fa <_vfiprintf_r+0x1da>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	3307      	adds	r3, #7
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c0:	443b      	add	r3, r7
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	e768      	b.n	800b098 <_vfiprintf_r+0x78>
 800b1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	e7a6      	b.n	800b11e <_vfiprintf_r+0xfe>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f04f 0c0a 	mov.w	ip, #10
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e2:	3a30      	subs	r2, #48	; 0x30
 800b1e4:	2a09      	cmp	r2, #9
 800b1e6:	d903      	bls.n	800b1f0 <_vfiprintf_r+0x1d0>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0c6      	beq.n	800b17a <_vfiprintf_r+0x15a>
 800b1ec:	9105      	str	r1, [sp, #20]
 800b1ee:	e7c4      	b.n	800b17a <_vfiprintf_r+0x15a>
 800b1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e7f0      	b.n	800b1dc <_vfiprintf_r+0x1bc>
 800b1fa:	ab03      	add	r3, sp, #12
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	462a      	mov	r2, r5
 800b200:	4b12      	ldr	r3, [pc, #72]	; (800b24c <_vfiprintf_r+0x22c>)
 800b202:	a904      	add	r1, sp, #16
 800b204:	4630      	mov	r0, r6
 800b206:	f7fd fb85 	bl	8008914 <_printf_float>
 800b20a:	4607      	mov	r7, r0
 800b20c:	1c78      	adds	r0, r7, #1
 800b20e:	d1d6      	bne.n	800b1be <_vfiprintf_r+0x19e>
 800b210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b212:	07d9      	lsls	r1, r3, #31
 800b214:	d405      	bmi.n	800b222 <_vfiprintf_r+0x202>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	059a      	lsls	r2, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_vfiprintf_r+0x202>
 800b21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b21e:	f7fe fa58 	bl	80096d2 <__retarget_lock_release_recursive>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	065b      	lsls	r3, r3, #25
 800b226:	f53f af1d 	bmi.w	800b064 <_vfiprintf_r+0x44>
 800b22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b22c:	e71c      	b.n	800b068 <_vfiprintf_r+0x48>
 800b22e:	ab03      	add	r3, sp, #12
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	462a      	mov	r2, r5
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_vfiprintf_r+0x22c>)
 800b236:	a904      	add	r1, sp, #16
 800b238:	4630      	mov	r0, r6
 800b23a:	f7fd fe0f 	bl	8008e5c <_printf_i>
 800b23e:	e7e4      	b.n	800b20a <_vfiprintf_r+0x1ea>
 800b240:	0800d284 	.word	0x0800d284
 800b244:	0800d28e 	.word	0x0800d28e
 800b248:	08008915 	.word	0x08008915
 800b24c:	0800affb 	.word	0x0800affb
 800b250:	0800d28a 	.word	0x0800d28a

0800b254 <__sflush_r>:
 800b254:	898a      	ldrh	r2, [r1, #12]
 800b256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25a:	4605      	mov	r5, r0
 800b25c:	0710      	lsls	r0, r2, #28
 800b25e:	460c      	mov	r4, r1
 800b260:	d458      	bmi.n	800b314 <__sflush_r+0xc0>
 800b262:	684b      	ldr	r3, [r1, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	dc05      	bgt.n	800b274 <__sflush_r+0x20>
 800b268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dc02      	bgt.n	800b274 <__sflush_r+0x20>
 800b26e:	2000      	movs	r0, #0
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b276:	2e00      	cmp	r6, #0
 800b278:	d0f9      	beq.n	800b26e <__sflush_r+0x1a>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b280:	682f      	ldr	r7, [r5, #0]
 800b282:	6a21      	ldr	r1, [r4, #32]
 800b284:	602b      	str	r3, [r5, #0]
 800b286:	d032      	beq.n	800b2ee <__sflush_r+0x9a>
 800b288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	075a      	lsls	r2, r3, #29
 800b28e:	d505      	bpl.n	800b29c <__sflush_r+0x48>
 800b290:	6863      	ldr	r3, [r4, #4]
 800b292:	1ac0      	subs	r0, r0, r3
 800b294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b296:	b10b      	cbz	r3, 800b29c <__sflush_r+0x48>
 800b298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b29a:	1ac0      	subs	r0, r0, r3
 800b29c:	2300      	movs	r3, #0
 800b29e:	4602      	mov	r2, r0
 800b2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2a2:	6a21      	ldr	r1, [r4, #32]
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b0      	blx	r6
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	d106      	bne.n	800b2bc <__sflush_r+0x68>
 800b2ae:	6829      	ldr	r1, [r5, #0]
 800b2b0:	291d      	cmp	r1, #29
 800b2b2:	d82b      	bhi.n	800b30c <__sflush_r+0xb8>
 800b2b4:	4a29      	ldr	r2, [pc, #164]	; (800b35c <__sflush_r+0x108>)
 800b2b6:	410a      	asrs	r2, r1
 800b2b8:	07d6      	lsls	r6, r2, #31
 800b2ba:	d427      	bmi.n	800b30c <__sflush_r+0xb8>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	6062      	str	r2, [r4, #4]
 800b2c0:	04d9      	lsls	r1, r3, #19
 800b2c2:	6922      	ldr	r2, [r4, #16]
 800b2c4:	6022      	str	r2, [r4, #0]
 800b2c6:	d504      	bpl.n	800b2d2 <__sflush_r+0x7e>
 800b2c8:	1c42      	adds	r2, r0, #1
 800b2ca:	d101      	bne.n	800b2d0 <__sflush_r+0x7c>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b903      	cbnz	r3, 800b2d2 <__sflush_r+0x7e>
 800b2d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b2d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2d4:	602f      	str	r7, [r5, #0]
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d0c9      	beq.n	800b26e <__sflush_r+0x1a>
 800b2da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	d002      	beq.n	800b2e8 <__sflush_r+0x94>
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f7ff f89e 	bl	800a424 <_free_r>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b2ec:	e7c0      	b.n	800b270 <__sflush_r+0x1c>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b0      	blx	r6
 800b2f4:	1c41      	adds	r1, r0, #1
 800b2f6:	d1c8      	bne.n	800b28a <__sflush_r+0x36>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0c5      	beq.n	800b28a <__sflush_r+0x36>
 800b2fe:	2b1d      	cmp	r3, #29
 800b300:	d001      	beq.n	800b306 <__sflush_r+0xb2>
 800b302:	2b16      	cmp	r3, #22
 800b304:	d101      	bne.n	800b30a <__sflush_r+0xb6>
 800b306:	602f      	str	r7, [r5, #0]
 800b308:	e7b1      	b.n	800b26e <__sflush_r+0x1a>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	e7ad      	b.n	800b270 <__sflush_r+0x1c>
 800b314:	690f      	ldr	r7, [r1, #16]
 800b316:	2f00      	cmp	r7, #0
 800b318:	d0a9      	beq.n	800b26e <__sflush_r+0x1a>
 800b31a:	0793      	lsls	r3, r2, #30
 800b31c:	680e      	ldr	r6, [r1, #0]
 800b31e:	bf08      	it	eq
 800b320:	694b      	ldreq	r3, [r1, #20]
 800b322:	600f      	str	r7, [r1, #0]
 800b324:	bf18      	it	ne
 800b326:	2300      	movne	r3, #0
 800b328:	eba6 0807 	sub.w	r8, r6, r7
 800b32c:	608b      	str	r3, [r1, #8]
 800b32e:	f1b8 0f00 	cmp.w	r8, #0
 800b332:	dd9c      	ble.n	800b26e <__sflush_r+0x1a>
 800b334:	6a21      	ldr	r1, [r4, #32]
 800b336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b338:	4643      	mov	r3, r8
 800b33a:	463a      	mov	r2, r7
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b0      	blx	r6
 800b340:	2800      	cmp	r0, #0
 800b342:	dc06      	bgt.n	800b352 <__sflush_r+0xfe>
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	e78e      	b.n	800b270 <__sflush_r+0x1c>
 800b352:	4407      	add	r7, r0
 800b354:	eba8 0800 	sub.w	r8, r8, r0
 800b358:	e7e9      	b.n	800b32e <__sflush_r+0xda>
 800b35a:	bf00      	nop
 800b35c:	dfbffffe 	.word	0xdfbffffe

0800b360 <_fflush_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	690b      	ldr	r3, [r1, #16]
 800b364:	4605      	mov	r5, r0
 800b366:	460c      	mov	r4, r1
 800b368:	b913      	cbnz	r3, 800b370 <_fflush_r+0x10>
 800b36a:	2500      	movs	r5, #0
 800b36c:	4628      	mov	r0, r5
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	b118      	cbz	r0, 800b37a <_fflush_r+0x1a>
 800b372:	6a03      	ldr	r3, [r0, #32]
 800b374:	b90b      	cbnz	r3, 800b37a <_fflush_r+0x1a>
 800b376:	f7fd ff0d 	bl	8009194 <__sinit>
 800b37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0f3      	beq.n	800b36a <_fflush_r+0xa>
 800b382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b384:	07d0      	lsls	r0, r2, #31
 800b386:	d404      	bmi.n	800b392 <_fflush_r+0x32>
 800b388:	0599      	lsls	r1, r3, #22
 800b38a:	d402      	bmi.n	800b392 <_fflush_r+0x32>
 800b38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38e:	f7fe f99f 	bl	80096d0 <__retarget_lock_acquire_recursive>
 800b392:	4628      	mov	r0, r5
 800b394:	4621      	mov	r1, r4
 800b396:	f7ff ff5d 	bl	800b254 <__sflush_r>
 800b39a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b39c:	07da      	lsls	r2, r3, #31
 800b39e:	4605      	mov	r5, r0
 800b3a0:	d4e4      	bmi.n	800b36c <_fflush_r+0xc>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	059b      	lsls	r3, r3, #22
 800b3a6:	d4e1      	bmi.n	800b36c <_fflush_r+0xc>
 800b3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3aa:	f7fe f992 	bl	80096d2 <__retarget_lock_release_recursive>
 800b3ae:	e7dd      	b.n	800b36c <_fflush_r+0xc>

0800b3b0 <fiprintf>:
 800b3b0:	b40e      	push	{r1, r2, r3}
 800b3b2:	b503      	push	{r0, r1, lr}
 800b3b4:	4601      	mov	r1, r0
 800b3b6:	ab03      	add	r3, sp, #12
 800b3b8:	4805      	ldr	r0, [pc, #20]	; (800b3d0 <fiprintf+0x20>)
 800b3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3be:	6800      	ldr	r0, [r0, #0]
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	f7ff fe2d 	bl	800b020 <_vfiprintf_r>
 800b3c6:	b002      	add	sp, #8
 800b3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3cc:	b003      	add	sp, #12
 800b3ce:	4770      	bx	lr
 800b3d0:	20000140 	.word	0x20000140

0800b3d4 <__swhatbuf_r>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3dc:	2900      	cmp	r1, #0
 800b3de:	b096      	sub	sp, #88	; 0x58
 800b3e0:	4615      	mov	r5, r2
 800b3e2:	461e      	mov	r6, r3
 800b3e4:	da0d      	bge.n	800b402 <__swhatbuf_r+0x2e>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b3ec:	f04f 0100 	mov.w	r1, #0
 800b3f0:	bf0c      	ite	eq
 800b3f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b3f6:	2340      	movne	r3, #64	; 0x40
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	6031      	str	r1, [r6, #0]
 800b3fc:	602b      	str	r3, [r5, #0]
 800b3fe:	b016      	add	sp, #88	; 0x58
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	466a      	mov	r2, sp
 800b404:	f000 f862 	bl	800b4cc <_fstat_r>
 800b408:	2800      	cmp	r0, #0
 800b40a:	dbec      	blt.n	800b3e6 <__swhatbuf_r+0x12>
 800b40c:	9901      	ldr	r1, [sp, #4]
 800b40e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b412:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b416:	4259      	negs	r1, r3
 800b418:	4159      	adcs	r1, r3
 800b41a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b41e:	e7eb      	b.n	800b3f8 <__swhatbuf_r+0x24>

0800b420 <__smakebuf_r>:
 800b420:	898b      	ldrh	r3, [r1, #12]
 800b422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b424:	079d      	lsls	r5, r3, #30
 800b426:	4606      	mov	r6, r0
 800b428:	460c      	mov	r4, r1
 800b42a:	d507      	bpl.n	800b43c <__smakebuf_r+0x1c>
 800b42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	6123      	str	r3, [r4, #16]
 800b434:	2301      	movs	r3, #1
 800b436:	6163      	str	r3, [r4, #20]
 800b438:	b002      	add	sp, #8
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	ab01      	add	r3, sp, #4
 800b43e:	466a      	mov	r2, sp
 800b440:	f7ff ffc8 	bl	800b3d4 <__swhatbuf_r>
 800b444:	9900      	ldr	r1, [sp, #0]
 800b446:	4605      	mov	r5, r0
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff f85f 	bl	800a50c <_malloc_r>
 800b44e:	b948      	cbnz	r0, 800b464 <__smakebuf_r+0x44>
 800b450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b454:	059a      	lsls	r2, r3, #22
 800b456:	d4ef      	bmi.n	800b438 <__smakebuf_r+0x18>
 800b458:	f023 0303 	bic.w	r3, r3, #3
 800b45c:	f043 0302 	orr.w	r3, r3, #2
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	e7e3      	b.n	800b42c <__smakebuf_r+0xc>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	6020      	str	r0, [r4, #0]
 800b468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46c:	81a3      	strh	r3, [r4, #12]
 800b46e:	9b00      	ldr	r3, [sp, #0]
 800b470:	6163      	str	r3, [r4, #20]
 800b472:	9b01      	ldr	r3, [sp, #4]
 800b474:	6120      	str	r0, [r4, #16]
 800b476:	b15b      	cbz	r3, 800b490 <__smakebuf_r+0x70>
 800b478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b47c:	4630      	mov	r0, r6
 800b47e:	f000 f837 	bl	800b4f0 <_isatty_r>
 800b482:	b128      	cbz	r0, 800b490 <__smakebuf_r+0x70>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	f023 0303 	bic.w	r3, r3, #3
 800b48a:	f043 0301 	orr.w	r3, r3, #1
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	431d      	orrs	r5, r3
 800b494:	81a5      	strh	r5, [r4, #12]
 800b496:	e7cf      	b.n	800b438 <__smakebuf_r+0x18>

0800b498 <memmove>:
 800b498:	4288      	cmp	r0, r1
 800b49a:	b510      	push	{r4, lr}
 800b49c:	eb01 0402 	add.w	r4, r1, r2
 800b4a0:	d902      	bls.n	800b4a8 <memmove+0x10>
 800b4a2:	4284      	cmp	r4, r0
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	d807      	bhi.n	800b4b8 <memmove+0x20>
 800b4a8:	1e43      	subs	r3, r0, #1
 800b4aa:	42a1      	cmp	r1, r4
 800b4ac:	d008      	beq.n	800b4c0 <memmove+0x28>
 800b4ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4b6:	e7f8      	b.n	800b4aa <memmove+0x12>
 800b4b8:	4402      	add	r2, r0
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	428a      	cmp	r2, r1
 800b4be:	d100      	bne.n	800b4c2 <memmove+0x2a>
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ca:	e7f7      	b.n	800b4bc <memmove+0x24>

0800b4cc <_fstat_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	; (800b4ec <_fstat_r+0x20>)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7fd f93e 	bl	800875a <_fstat>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_fstat_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_fstat_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200010a4 	.word	0x200010a4

0800b4f0 <_isatty_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d06      	ldr	r5, [pc, #24]	; (800b50c <_isatty_r+0x1c>)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	f7fd f93b 	bl	8008776 <_isatty>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_isatty_r+0x1a>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_isatty_r+0x1a>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	200010a4 	.word	0x200010a4

0800b510 <_sbrk_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d06      	ldr	r5, [pc, #24]	; (800b52c <_sbrk_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f7f8 fc36 	bl	8003d8c <_sbrk>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_sbrk_r+0x1a>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_sbrk_r+0x1a>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200010a4 	.word	0x200010a4

0800b530 <abort>:
 800b530:	b508      	push	{r3, lr}
 800b532:	2006      	movs	r0, #6
 800b534:	f000 f890 	bl	800b658 <raise>
 800b538:	2001      	movs	r0, #1
 800b53a:	f001 f81f 	bl	800c57c <_exit>

0800b53e <_calloc_r>:
 800b53e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b540:	fba1 2402 	umull	r2, r4, r1, r2
 800b544:	b94c      	cbnz	r4, 800b55a <_calloc_r+0x1c>
 800b546:	4611      	mov	r1, r2
 800b548:	9201      	str	r2, [sp, #4]
 800b54a:	f7fe ffdf 	bl	800a50c <_malloc_r>
 800b54e:	9a01      	ldr	r2, [sp, #4]
 800b550:	4605      	mov	r5, r0
 800b552:	b930      	cbnz	r0, 800b562 <_calloc_r+0x24>
 800b554:	4628      	mov	r0, r5
 800b556:	b003      	add	sp, #12
 800b558:	bd30      	pop	{r4, r5, pc}
 800b55a:	220c      	movs	r2, #12
 800b55c:	6002      	str	r2, [r0, #0]
 800b55e:	2500      	movs	r5, #0
 800b560:	e7f8      	b.n	800b554 <_calloc_r+0x16>
 800b562:	4621      	mov	r1, r4
 800b564:	f7fd ffb2 	bl	80094cc <memset>
 800b568:	e7f4      	b.n	800b554 <_calloc_r+0x16>

0800b56a <__ascii_mbtowc>:
 800b56a:	b082      	sub	sp, #8
 800b56c:	b901      	cbnz	r1, 800b570 <__ascii_mbtowc+0x6>
 800b56e:	a901      	add	r1, sp, #4
 800b570:	b142      	cbz	r2, 800b584 <__ascii_mbtowc+0x1a>
 800b572:	b14b      	cbz	r3, 800b588 <__ascii_mbtowc+0x1e>
 800b574:	7813      	ldrb	r3, [r2, #0]
 800b576:	600b      	str	r3, [r1, #0]
 800b578:	7812      	ldrb	r2, [r2, #0]
 800b57a:	1e10      	subs	r0, r2, #0
 800b57c:	bf18      	it	ne
 800b57e:	2001      	movne	r0, #1
 800b580:	b002      	add	sp, #8
 800b582:	4770      	bx	lr
 800b584:	4610      	mov	r0, r2
 800b586:	e7fb      	b.n	800b580 <__ascii_mbtowc+0x16>
 800b588:	f06f 0001 	mvn.w	r0, #1
 800b58c:	e7f8      	b.n	800b580 <__ascii_mbtowc+0x16>

0800b58e <_realloc_r>:
 800b58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b592:	4680      	mov	r8, r0
 800b594:	4614      	mov	r4, r2
 800b596:	460e      	mov	r6, r1
 800b598:	b921      	cbnz	r1, 800b5a4 <_realloc_r+0x16>
 800b59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	4611      	mov	r1, r2
 800b5a0:	f7fe bfb4 	b.w	800a50c <_malloc_r>
 800b5a4:	b92a      	cbnz	r2, 800b5b2 <_realloc_r+0x24>
 800b5a6:	f7fe ff3d 	bl	800a424 <_free_r>
 800b5aa:	4625      	mov	r5, r4
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b2:	f000 f86d 	bl	800b690 <_malloc_usable_size_r>
 800b5b6:	4284      	cmp	r4, r0
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	d802      	bhi.n	800b5c2 <_realloc_r+0x34>
 800b5bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5c0:	d812      	bhi.n	800b5e8 <_realloc_r+0x5a>
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4640      	mov	r0, r8
 800b5c6:	f7fe ffa1 	bl	800a50c <_malloc_r>
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d0ed      	beq.n	800b5ac <_realloc_r+0x1e>
 800b5d0:	42bc      	cmp	r4, r7
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	bf28      	it	cs
 800b5d8:	463a      	movcs	r2, r7
 800b5da:	f7fe f87b 	bl	80096d4 <memcpy>
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	f7fe ff1f 	bl	800a424 <_free_r>
 800b5e6:	e7e1      	b.n	800b5ac <_realloc_r+0x1e>
 800b5e8:	4635      	mov	r5, r6
 800b5ea:	e7df      	b.n	800b5ac <_realloc_r+0x1e>

0800b5ec <__ascii_wctomb>:
 800b5ec:	b149      	cbz	r1, 800b602 <__ascii_wctomb+0x16>
 800b5ee:	2aff      	cmp	r2, #255	; 0xff
 800b5f0:	bf85      	ittet	hi
 800b5f2:	238a      	movhi	r3, #138	; 0x8a
 800b5f4:	6003      	strhi	r3, [r0, #0]
 800b5f6:	700a      	strbls	r2, [r1, #0]
 800b5f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5fc:	bf98      	it	ls
 800b5fe:	2001      	movls	r0, #1
 800b600:	4770      	bx	lr
 800b602:	4608      	mov	r0, r1
 800b604:	4770      	bx	lr

0800b606 <_raise_r>:
 800b606:	291f      	cmp	r1, #31
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4604      	mov	r4, r0
 800b60c:	460d      	mov	r5, r1
 800b60e:	d904      	bls.n	800b61a <_raise_r+0x14>
 800b610:	2316      	movs	r3, #22
 800b612:	6003      	str	r3, [r0, #0]
 800b614:	f04f 30ff 	mov.w	r0, #4294967295
 800b618:	bd38      	pop	{r3, r4, r5, pc}
 800b61a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b61c:	b112      	cbz	r2, 800b624 <_raise_r+0x1e>
 800b61e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b622:	b94b      	cbnz	r3, 800b638 <_raise_r+0x32>
 800b624:	4620      	mov	r0, r4
 800b626:	f000 f831 	bl	800b68c <_getpid_r>
 800b62a:	462a      	mov	r2, r5
 800b62c:	4601      	mov	r1, r0
 800b62e:	4620      	mov	r0, r4
 800b630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b634:	f000 b818 	b.w	800b668 <_kill_r>
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d00a      	beq.n	800b652 <_raise_r+0x4c>
 800b63c:	1c59      	adds	r1, r3, #1
 800b63e:	d103      	bne.n	800b648 <_raise_r+0x42>
 800b640:	2316      	movs	r3, #22
 800b642:	6003      	str	r3, [r0, #0]
 800b644:	2001      	movs	r0, #1
 800b646:	e7e7      	b.n	800b618 <_raise_r+0x12>
 800b648:	2400      	movs	r4, #0
 800b64a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b64e:	4628      	mov	r0, r5
 800b650:	4798      	blx	r3
 800b652:	2000      	movs	r0, #0
 800b654:	e7e0      	b.n	800b618 <_raise_r+0x12>
	...

0800b658 <raise>:
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <raise+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f7ff bfd2 	b.w	800b606 <_raise_r>
 800b662:	bf00      	nop
 800b664:	20000140 	.word	0x20000140

0800b668 <_kill_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4d07      	ldr	r5, [pc, #28]	; (800b688 <_kill_r+0x20>)
 800b66c:	2300      	movs	r3, #0
 800b66e:	4604      	mov	r4, r0
 800b670:	4608      	mov	r0, r1
 800b672:	4611      	mov	r1, r2
 800b674:	602b      	str	r3, [r5, #0]
 800b676:	f000 ff79 	bl	800c56c <_kill>
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	d102      	bne.n	800b684 <_kill_r+0x1c>
 800b67e:	682b      	ldr	r3, [r5, #0]
 800b680:	b103      	cbz	r3, 800b684 <_kill_r+0x1c>
 800b682:	6023      	str	r3, [r4, #0]
 800b684:	bd38      	pop	{r3, r4, r5, pc}
 800b686:	bf00      	nop
 800b688:	200010a4 	.word	0x200010a4

0800b68c <_getpid_r>:
 800b68c:	f7fd b842 	b.w	8008714 <_getpid>

0800b690 <_malloc_usable_size_r>:
 800b690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b694:	1f18      	subs	r0, r3, #4
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfbc      	itt	lt
 800b69a:	580b      	ldrlt	r3, [r1, r0]
 800b69c:	18c0      	addlt	r0, r0, r3
 800b69e:	4770      	bx	lr

0800b6a0 <pow>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	ed2d 8b02 	vpush	{d8}
 800b6a6:	eeb0 8a40 	vmov.f32	s16, s0
 800b6aa:	eef0 8a60 	vmov.f32	s17, s1
 800b6ae:	ec55 4b11 	vmov	r4, r5, d1
 800b6b2:	f000 f979 	bl	800b9a8 <__ieee754_pow>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	ec57 6b10 	vmov	r6, r7, d0
 800b6c2:	f7f5 fa33 	bl	8000b2c <__aeabi_dcmpun>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d13b      	bne.n	800b742 <pow+0xa2>
 800b6ca:	ec51 0b18 	vmov	r0, r1, d8
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f7f5 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6d6:	b1b8      	cbz	r0, 800b708 <pow+0x68>
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f5 f9f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d146      	bne.n	800b776 <pow+0xd6>
 800b6e8:	ec45 4b10 	vmov	d0, r4, r5
 800b6ec:	f000 f874 	bl	800b7d8 <finite>
 800b6f0:	b338      	cbz	r0, 800b742 <pow+0xa2>
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	f7f5 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800b6fe:	b300      	cbz	r0, 800b742 <pow+0xa2>
 800b700:	f7fd ffbc 	bl	800967c <__errno>
 800b704:	2322      	movs	r3, #34	; 0x22
 800b706:	e01b      	b.n	800b740 <pow+0xa0>
 800b708:	ec47 6b10 	vmov	d0, r6, r7
 800b70c:	f000 f864 	bl	800b7d8 <finite>
 800b710:	b9e0      	cbnz	r0, 800b74c <pow+0xac>
 800b712:	eeb0 0a48 	vmov.f32	s0, s16
 800b716:	eef0 0a68 	vmov.f32	s1, s17
 800b71a:	f000 f85d 	bl	800b7d8 <finite>
 800b71e:	b1a8      	cbz	r0, 800b74c <pow+0xac>
 800b720:	ec45 4b10 	vmov	d0, r4, r5
 800b724:	f000 f858 	bl	800b7d8 <finite>
 800b728:	b180      	cbz	r0, 800b74c <pow+0xac>
 800b72a:	4632      	mov	r2, r6
 800b72c:	463b      	mov	r3, r7
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	f7f5 f9fb 	bl	8000b2c <__aeabi_dcmpun>
 800b736:	2800      	cmp	r0, #0
 800b738:	d0e2      	beq.n	800b700 <pow+0x60>
 800b73a:	f7fd ff9f 	bl	800967c <__errno>
 800b73e:	2321      	movs	r3, #33	; 0x21
 800b740:	6003      	str	r3, [r0, #0]
 800b742:	ecbd 8b02 	vpop	{d8}
 800b746:	ec47 6b10 	vmov	d0, r6, r7
 800b74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f5 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d0f2      	beq.n	800b742 <pow+0xa2>
 800b75c:	eeb0 0a48 	vmov.f32	s0, s16
 800b760:	eef0 0a68 	vmov.f32	s1, s17
 800b764:	f000 f838 	bl	800b7d8 <finite>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d0ea      	beq.n	800b742 <pow+0xa2>
 800b76c:	ec45 4b10 	vmov	d0, r4, r5
 800b770:	f000 f832 	bl	800b7d8 <finite>
 800b774:	e7c3      	b.n	800b6fe <pow+0x5e>
 800b776:	4f01      	ldr	r7, [pc, #4]	; (800b77c <pow+0xdc>)
 800b778:	2600      	movs	r6, #0
 800b77a:	e7e2      	b.n	800b742 <pow+0xa2>
 800b77c:	3ff00000 	.word	0x3ff00000

0800b780 <sqrt>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	ed2d 8b02 	vpush	{d8}
 800b786:	ec55 4b10 	vmov	r4, r5, d0
 800b78a:	f000 f831 	bl	800b7f0 <__ieee754_sqrt>
 800b78e:	4622      	mov	r2, r4
 800b790:	462b      	mov	r3, r5
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	eeb0 8a40 	vmov.f32	s16, s0
 800b79a:	eef0 8a60 	vmov.f32	s17, s1
 800b79e:	f7f5 f9c5 	bl	8000b2c <__aeabi_dcmpun>
 800b7a2:	b990      	cbnz	r0, 800b7ca <sqrt+0x4a>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	f7f5 f996 	bl	8000adc <__aeabi_dcmplt>
 800b7b0:	b158      	cbz	r0, 800b7ca <sqrt+0x4a>
 800b7b2:	f7fd ff63 	bl	800967c <__errno>
 800b7b6:	2321      	movs	r3, #33	; 0x21
 800b7b8:	6003      	str	r3, [r0, #0]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f7f5 f843 	bl	800084c <__aeabi_ddiv>
 800b7c6:	ec41 0b18 	vmov	d8, r0, r1
 800b7ca:	eeb0 0a48 	vmov.f32	s0, s16
 800b7ce:	eef0 0a68 	vmov.f32	s1, s17
 800b7d2:	ecbd 8b02 	vpop	{d8}
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}

0800b7d8 <finite>:
 800b7d8:	b082      	sub	sp, #8
 800b7da:	ed8d 0b00 	vstr	d0, [sp]
 800b7de:	9801      	ldr	r0, [sp, #4]
 800b7e0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b7e4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b7e8:	0fc0      	lsrs	r0, r0, #31
 800b7ea:	b002      	add	sp, #8
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <__ieee754_sqrt>:
 800b7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	ec55 4b10 	vmov	r4, r5, d0
 800b7f8:	4e67      	ldr	r6, [pc, #412]	; (800b998 <__ieee754_sqrt+0x1a8>)
 800b7fa:	43ae      	bics	r6, r5
 800b7fc:	ee10 0a10 	vmov	r0, s0
 800b800:	ee10 2a10 	vmov	r2, s0
 800b804:	4629      	mov	r1, r5
 800b806:	462b      	mov	r3, r5
 800b808:	d10d      	bne.n	800b826 <__ieee754_sqrt+0x36>
 800b80a:	f7f4 fef5 	bl	80005f8 <__aeabi_dmul>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fd39 	bl	800028c <__adddf3>
 800b81a:	4604      	mov	r4, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	ec45 4b10 	vmov	d0, r4, r5
 800b822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b826:	2d00      	cmp	r5, #0
 800b828:	dc0b      	bgt.n	800b842 <__ieee754_sqrt+0x52>
 800b82a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b82e:	4326      	orrs	r6, r4
 800b830:	d0f5      	beq.n	800b81e <__ieee754_sqrt+0x2e>
 800b832:	b135      	cbz	r5, 800b842 <__ieee754_sqrt+0x52>
 800b834:	f7f4 fd28 	bl	8000288 <__aeabi_dsub>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	f7f5 f806 	bl	800084c <__aeabi_ddiv>
 800b840:	e7eb      	b.n	800b81a <__ieee754_sqrt+0x2a>
 800b842:	1509      	asrs	r1, r1, #20
 800b844:	f000 808d 	beq.w	800b962 <__ieee754_sqrt+0x172>
 800b848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b84c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b854:	07c9      	lsls	r1, r1, #31
 800b856:	bf5c      	itt	pl
 800b858:	005b      	lslpl	r3, r3, #1
 800b85a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b85e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b862:	bf58      	it	pl
 800b864:	0052      	lslpl	r2, r2, #1
 800b866:	2500      	movs	r5, #0
 800b868:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b86c:	1076      	asrs	r6, r6, #1
 800b86e:	0052      	lsls	r2, r2, #1
 800b870:	f04f 0e16 	mov.w	lr, #22
 800b874:	46ac      	mov	ip, r5
 800b876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b87a:	eb0c 0001 	add.w	r0, ip, r1
 800b87e:	4298      	cmp	r0, r3
 800b880:	bfde      	ittt	le
 800b882:	1a1b      	suble	r3, r3, r0
 800b884:	eb00 0c01 	addle.w	ip, r0, r1
 800b888:	186d      	addle	r5, r5, r1
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	f1be 0e01 	subs.w	lr, lr, #1
 800b890:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b894:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b898:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b89c:	d1ed      	bne.n	800b87a <__ieee754_sqrt+0x8a>
 800b89e:	4674      	mov	r4, lr
 800b8a0:	2720      	movs	r7, #32
 800b8a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b8a6:	4563      	cmp	r3, ip
 800b8a8:	eb01 000e 	add.w	r0, r1, lr
 800b8ac:	dc02      	bgt.n	800b8b4 <__ieee754_sqrt+0xc4>
 800b8ae:	d113      	bne.n	800b8d8 <__ieee754_sqrt+0xe8>
 800b8b0:	4290      	cmp	r0, r2
 800b8b2:	d811      	bhi.n	800b8d8 <__ieee754_sqrt+0xe8>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	eb00 0e01 	add.w	lr, r0, r1
 800b8ba:	da57      	bge.n	800b96c <__ieee754_sqrt+0x17c>
 800b8bc:	f1be 0f00 	cmp.w	lr, #0
 800b8c0:	db54      	blt.n	800b96c <__ieee754_sqrt+0x17c>
 800b8c2:	f10c 0801 	add.w	r8, ip, #1
 800b8c6:	eba3 030c 	sub.w	r3, r3, ip
 800b8ca:	4290      	cmp	r0, r2
 800b8cc:	bf88      	it	hi
 800b8ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8d2:	1a12      	subs	r2, r2, r0
 800b8d4:	440c      	add	r4, r1
 800b8d6:	46c4      	mov	ip, r8
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	3f01      	subs	r7, #1
 800b8dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b8e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b8e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b8e8:	d1dd      	bne.n	800b8a6 <__ieee754_sqrt+0xb6>
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d01b      	beq.n	800b926 <__ieee754_sqrt+0x136>
 800b8ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b99c <__ieee754_sqrt+0x1ac>
 800b8f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b9a0 <__ieee754_sqrt+0x1b0>
 800b8f6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8fa:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8fe:	f7f4 fcc3 	bl	8000288 <__aeabi_dsub>
 800b902:	e9da 8900 	ldrd	r8, r9, [sl]
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4640      	mov	r0, r8
 800b90c:	4649      	mov	r1, r9
 800b90e:	f7f5 f8ef 	bl	8000af0 <__aeabi_dcmple>
 800b912:	b140      	cbz	r0, 800b926 <__ieee754_sqrt+0x136>
 800b914:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b918:	e9da 0100 	ldrd	r0, r1, [sl]
 800b91c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b920:	d126      	bne.n	800b970 <__ieee754_sqrt+0x180>
 800b922:	3501      	adds	r5, #1
 800b924:	463c      	mov	r4, r7
 800b926:	106a      	asrs	r2, r5, #1
 800b928:	0863      	lsrs	r3, r4, #1
 800b92a:	07e9      	lsls	r1, r5, #31
 800b92c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b930:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b934:	bf48      	it	mi
 800b936:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b93a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b93e:	461c      	mov	r4, r3
 800b940:	e76d      	b.n	800b81e <__ieee754_sqrt+0x2e>
 800b942:	0ad3      	lsrs	r3, r2, #11
 800b944:	3815      	subs	r0, #21
 800b946:	0552      	lsls	r2, r2, #21
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d0fa      	beq.n	800b942 <__ieee754_sqrt+0x152>
 800b94c:	02dc      	lsls	r4, r3, #11
 800b94e:	d50a      	bpl.n	800b966 <__ieee754_sqrt+0x176>
 800b950:	f1c1 0420 	rsb	r4, r1, #32
 800b954:	fa22 f404 	lsr.w	r4, r2, r4
 800b958:	1e4d      	subs	r5, r1, #1
 800b95a:	408a      	lsls	r2, r1
 800b95c:	4323      	orrs	r3, r4
 800b95e:	1b41      	subs	r1, r0, r5
 800b960:	e772      	b.n	800b848 <__ieee754_sqrt+0x58>
 800b962:	4608      	mov	r0, r1
 800b964:	e7f0      	b.n	800b948 <__ieee754_sqrt+0x158>
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	3101      	adds	r1, #1
 800b96a:	e7ef      	b.n	800b94c <__ieee754_sqrt+0x15c>
 800b96c:	46e0      	mov	r8, ip
 800b96e:	e7aa      	b.n	800b8c6 <__ieee754_sqrt+0xd6>
 800b970:	f7f4 fc8c 	bl	800028c <__adddf3>
 800b974:	e9da 8900 	ldrd	r8, r9, [sl]
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	f7f5 f8ac 	bl	8000adc <__aeabi_dcmplt>
 800b984:	b120      	cbz	r0, 800b990 <__ieee754_sqrt+0x1a0>
 800b986:	1ca0      	adds	r0, r4, #2
 800b988:	bf08      	it	eq
 800b98a:	3501      	addeq	r5, #1
 800b98c:	3402      	adds	r4, #2
 800b98e:	e7ca      	b.n	800b926 <__ieee754_sqrt+0x136>
 800b990:	3401      	adds	r4, #1
 800b992:	f024 0401 	bic.w	r4, r4, #1
 800b996:	e7c6      	b.n	800b926 <__ieee754_sqrt+0x136>
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	200002b0 	.word	0x200002b0
 800b9a0:	200002b8 	.word	0x200002b8
 800b9a4:	00000000 	.word	0x00000000

0800b9a8 <__ieee754_pow>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	ed2d 8b06 	vpush	{d8-d10}
 800b9b0:	b089      	sub	sp, #36	; 0x24
 800b9b2:	ed8d 1b00 	vstr	d1, [sp]
 800b9b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b9ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b9be:	ea58 0102 	orrs.w	r1, r8, r2
 800b9c2:	ec57 6b10 	vmov	r6, r7, d0
 800b9c6:	d115      	bne.n	800b9f4 <__ieee754_pow+0x4c>
 800b9c8:	19b3      	adds	r3, r6, r6
 800b9ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b9ce:	4152      	adcs	r2, r2
 800b9d0:	4299      	cmp	r1, r3
 800b9d2:	4b89      	ldr	r3, [pc, #548]	; (800bbf8 <__ieee754_pow+0x250>)
 800b9d4:	4193      	sbcs	r3, r2
 800b9d6:	f080 84d1 	bcs.w	800c37c <__ieee754_pow+0x9d4>
 800b9da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9de:	4630      	mov	r0, r6
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	f7f4 fc53 	bl	800028c <__adddf3>
 800b9e6:	ec41 0b10 	vmov	d0, r0, r1
 800b9ea:	b009      	add	sp, #36	; 0x24
 800b9ec:	ecbd 8b06 	vpop	{d8-d10}
 800b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f4:	4b81      	ldr	r3, [pc, #516]	; (800bbfc <__ieee754_pow+0x254>)
 800b9f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b9fa:	429c      	cmp	r4, r3
 800b9fc:	ee10 aa10 	vmov	sl, s0
 800ba00:	463d      	mov	r5, r7
 800ba02:	dc06      	bgt.n	800ba12 <__ieee754_pow+0x6a>
 800ba04:	d101      	bne.n	800ba0a <__ieee754_pow+0x62>
 800ba06:	2e00      	cmp	r6, #0
 800ba08:	d1e7      	bne.n	800b9da <__ieee754_pow+0x32>
 800ba0a:	4598      	cmp	r8, r3
 800ba0c:	dc01      	bgt.n	800ba12 <__ieee754_pow+0x6a>
 800ba0e:	d10f      	bne.n	800ba30 <__ieee754_pow+0x88>
 800ba10:	b172      	cbz	r2, 800ba30 <__ieee754_pow+0x88>
 800ba12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ba16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ba1a:	ea55 050a 	orrs.w	r5, r5, sl
 800ba1e:	d1dc      	bne.n	800b9da <__ieee754_pow+0x32>
 800ba20:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba24:	18db      	adds	r3, r3, r3
 800ba26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ba2a:	4152      	adcs	r2, r2
 800ba2c:	429d      	cmp	r5, r3
 800ba2e:	e7d0      	b.n	800b9d2 <__ieee754_pow+0x2a>
 800ba30:	2d00      	cmp	r5, #0
 800ba32:	da3b      	bge.n	800baac <__ieee754_pow+0x104>
 800ba34:	4b72      	ldr	r3, [pc, #456]	; (800bc00 <__ieee754_pow+0x258>)
 800ba36:	4598      	cmp	r8, r3
 800ba38:	dc51      	bgt.n	800bade <__ieee754_pow+0x136>
 800ba3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ba3e:	4598      	cmp	r8, r3
 800ba40:	f340 84ab 	ble.w	800c39a <__ieee754_pow+0x9f2>
 800ba44:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba4c:	2b14      	cmp	r3, #20
 800ba4e:	dd0f      	ble.n	800ba70 <__ieee754_pow+0xc8>
 800ba50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba54:	fa22 f103 	lsr.w	r1, r2, r3
 800ba58:	fa01 f303 	lsl.w	r3, r1, r3
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	f040 849c 	bne.w	800c39a <__ieee754_pow+0x9f2>
 800ba62:	f001 0101 	and.w	r1, r1, #1
 800ba66:	f1c1 0302 	rsb	r3, r1, #2
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	b182      	cbz	r2, 800ba90 <__ieee754_pow+0xe8>
 800ba6e:	e05f      	b.n	800bb30 <__ieee754_pow+0x188>
 800ba70:	2a00      	cmp	r2, #0
 800ba72:	d15b      	bne.n	800bb2c <__ieee754_pow+0x184>
 800ba74:	f1c3 0314 	rsb	r3, r3, #20
 800ba78:	fa48 f103 	asr.w	r1, r8, r3
 800ba7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba80:	4543      	cmp	r3, r8
 800ba82:	f040 8487 	bne.w	800c394 <__ieee754_pow+0x9ec>
 800ba86:	f001 0101 	and.w	r1, r1, #1
 800ba8a:	f1c1 0302 	rsb	r3, r1, #2
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	4b5c      	ldr	r3, [pc, #368]	; (800bc04 <__ieee754_pow+0x25c>)
 800ba92:	4598      	cmp	r8, r3
 800ba94:	d132      	bne.n	800bafc <__ieee754_pow+0x154>
 800ba96:	f1b9 0f00 	cmp.w	r9, #0
 800ba9a:	f280 8477 	bge.w	800c38c <__ieee754_pow+0x9e4>
 800ba9e:	4959      	ldr	r1, [pc, #356]	; (800bc04 <__ieee754_pow+0x25c>)
 800baa0:	4632      	mov	r2, r6
 800baa2:	463b      	mov	r3, r7
 800baa4:	2000      	movs	r0, #0
 800baa6:	f7f4 fed1 	bl	800084c <__aeabi_ddiv>
 800baaa:	e79c      	b.n	800b9e6 <__ieee754_pow+0x3e>
 800baac:	2300      	movs	r3, #0
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	d13d      	bne.n	800bb30 <__ieee754_pow+0x188>
 800bab4:	4b51      	ldr	r3, [pc, #324]	; (800bbfc <__ieee754_pow+0x254>)
 800bab6:	4598      	cmp	r8, r3
 800bab8:	d1ea      	bne.n	800ba90 <__ieee754_pow+0xe8>
 800baba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800babe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bac2:	ea53 030a 	orrs.w	r3, r3, sl
 800bac6:	f000 8459 	beq.w	800c37c <__ieee754_pow+0x9d4>
 800baca:	4b4f      	ldr	r3, [pc, #316]	; (800bc08 <__ieee754_pow+0x260>)
 800bacc:	429c      	cmp	r4, r3
 800bace:	dd08      	ble.n	800bae2 <__ieee754_pow+0x13a>
 800bad0:	f1b9 0f00 	cmp.w	r9, #0
 800bad4:	f2c0 8456 	blt.w	800c384 <__ieee754_pow+0x9dc>
 800bad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800badc:	e783      	b.n	800b9e6 <__ieee754_pow+0x3e>
 800bade:	2302      	movs	r3, #2
 800bae0:	e7e5      	b.n	800baae <__ieee754_pow+0x106>
 800bae2:	f1b9 0f00 	cmp.w	r9, #0
 800bae6:	f04f 0000 	mov.w	r0, #0
 800baea:	f04f 0100 	mov.w	r1, #0
 800baee:	f6bf af7a 	bge.w	800b9e6 <__ieee754_pow+0x3e>
 800baf2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800baf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bafa:	e774      	b.n	800b9e6 <__ieee754_pow+0x3e>
 800bafc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bb00:	d106      	bne.n	800bb10 <__ieee754_pow+0x168>
 800bb02:	4632      	mov	r2, r6
 800bb04:	463b      	mov	r3, r7
 800bb06:	4630      	mov	r0, r6
 800bb08:	4639      	mov	r1, r7
 800bb0a:	f7f4 fd75 	bl	80005f8 <__aeabi_dmul>
 800bb0e:	e76a      	b.n	800b9e6 <__ieee754_pow+0x3e>
 800bb10:	4b3e      	ldr	r3, [pc, #248]	; (800bc0c <__ieee754_pow+0x264>)
 800bb12:	4599      	cmp	r9, r3
 800bb14:	d10c      	bne.n	800bb30 <__ieee754_pow+0x188>
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	db0a      	blt.n	800bb30 <__ieee754_pow+0x188>
 800bb1a:	ec47 6b10 	vmov	d0, r6, r7
 800bb1e:	b009      	add	sp, #36	; 0x24
 800bb20:	ecbd 8b06 	vpop	{d8-d10}
 800bb24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	f7ff be62 	b.w	800b7f0 <__ieee754_sqrt>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9304      	str	r3, [sp, #16]
 800bb30:	ec47 6b10 	vmov	d0, r6, r7
 800bb34:	f000 fc62 	bl	800c3fc <fabs>
 800bb38:	ec51 0b10 	vmov	r0, r1, d0
 800bb3c:	f1ba 0f00 	cmp.w	sl, #0
 800bb40:	d129      	bne.n	800bb96 <__ieee754_pow+0x1ee>
 800bb42:	b124      	cbz	r4, 800bb4e <__ieee754_pow+0x1a6>
 800bb44:	4b2f      	ldr	r3, [pc, #188]	; (800bc04 <__ieee754_pow+0x25c>)
 800bb46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d123      	bne.n	800bb96 <__ieee754_pow+0x1ee>
 800bb4e:	f1b9 0f00 	cmp.w	r9, #0
 800bb52:	da05      	bge.n	800bb60 <__ieee754_pow+0x1b8>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	2000      	movs	r0, #0
 800bb5a:	492a      	ldr	r1, [pc, #168]	; (800bc04 <__ieee754_pow+0x25c>)
 800bb5c:	f7f4 fe76 	bl	800084c <__aeabi_ddiv>
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	f6bf af40 	bge.w	800b9e6 <__ieee754_pow+0x3e>
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb70:	431c      	orrs	r4, r3
 800bb72:	d108      	bne.n	800bb86 <__ieee754_pow+0x1de>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4610      	mov	r0, r2
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	f7f4 fb84 	bl	8000288 <__aeabi_dsub>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	e78f      	b.n	800baa6 <__ieee754_pow+0xfe>
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	f47f af2c 	bne.w	800b9e6 <__ieee754_pow+0x3e>
 800bb8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb92:	4619      	mov	r1, r3
 800bb94:	e727      	b.n	800b9e6 <__ieee754_pow+0x3e>
 800bb96:	0feb      	lsrs	r3, r5, #31
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	9306      	str	r3, [sp, #24]
 800bb9c:	9a06      	ldr	r2, [sp, #24]
 800bb9e:	9b04      	ldr	r3, [sp, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	d102      	bne.n	800bbaa <__ieee754_pow+0x202>
 800bba4:	4632      	mov	r2, r6
 800bba6:	463b      	mov	r3, r7
 800bba8:	e7e6      	b.n	800bb78 <__ieee754_pow+0x1d0>
 800bbaa:	4b19      	ldr	r3, [pc, #100]	; (800bc10 <__ieee754_pow+0x268>)
 800bbac:	4598      	cmp	r8, r3
 800bbae:	f340 80fb 	ble.w	800bda8 <__ieee754_pow+0x400>
 800bbb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bbb6:	4598      	cmp	r8, r3
 800bbb8:	4b13      	ldr	r3, [pc, #76]	; (800bc08 <__ieee754_pow+0x260>)
 800bbba:	dd0c      	ble.n	800bbd6 <__ieee754_pow+0x22e>
 800bbbc:	429c      	cmp	r4, r3
 800bbbe:	dc0f      	bgt.n	800bbe0 <__ieee754_pow+0x238>
 800bbc0:	f1b9 0f00 	cmp.w	r9, #0
 800bbc4:	da0f      	bge.n	800bbe6 <__ieee754_pow+0x23e>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	b009      	add	sp, #36	; 0x24
 800bbca:	ecbd 8b06 	vpop	{d8-d10}
 800bbce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd2:	f000 bcc2 	b.w	800c55a <__math_oflow>
 800bbd6:	429c      	cmp	r4, r3
 800bbd8:	dbf2      	blt.n	800bbc0 <__ieee754_pow+0x218>
 800bbda:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <__ieee754_pow+0x25c>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	dd19      	ble.n	800bc14 <__ieee754_pow+0x26c>
 800bbe0:	f1b9 0f00 	cmp.w	r9, #0
 800bbe4:	dcef      	bgt.n	800bbc6 <__ieee754_pow+0x21e>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	b009      	add	sp, #36	; 0x24
 800bbea:	ecbd 8b06 	vpop	{d8-d10}
 800bbee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf2:	f000 bca9 	b.w	800c548 <__math_uflow>
 800bbf6:	bf00      	nop
 800bbf8:	fff00000 	.word	0xfff00000
 800bbfc:	7ff00000 	.word	0x7ff00000
 800bc00:	433fffff 	.word	0x433fffff
 800bc04:	3ff00000 	.word	0x3ff00000
 800bc08:	3fefffff 	.word	0x3fefffff
 800bc0c:	3fe00000 	.word	0x3fe00000
 800bc10:	41e00000 	.word	0x41e00000
 800bc14:	4b60      	ldr	r3, [pc, #384]	; (800bd98 <__ieee754_pow+0x3f0>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	f7f4 fb36 	bl	8000288 <__aeabi_dsub>
 800bc1c:	a354      	add	r3, pc, #336	; (adr r3, 800bd70 <__ieee754_pow+0x3c8>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	f7f4 fce7 	bl	80005f8 <__aeabi_dmul>
 800bc2a:	a353      	add	r3, pc, #332	; (adr r3, 800bd78 <__ieee754_pow+0x3d0>)
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	4606      	mov	r6, r0
 800bc32:	460f      	mov	r7, r1
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	4b57      	ldr	r3, [pc, #348]	; (800bd9c <__ieee754_pow+0x3f4>)
 800bc3e:	4682      	mov	sl, r0
 800bc40:	468b      	mov	fp, r1
 800bc42:	2200      	movs	r2, #0
 800bc44:	4620      	mov	r0, r4
 800bc46:	4629      	mov	r1, r5
 800bc48:	f7f4 fcd6 	bl	80005f8 <__aeabi_dmul>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	a14b      	add	r1, pc, #300	; (adr r1, 800bd80 <__ieee754_pow+0x3d8>)
 800bc52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc56:	f7f4 fb17 	bl	8000288 <__aeabi_dsub>
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	2000      	movs	r0, #0
 800bc68:	494d      	ldr	r1, [pc, #308]	; (800bda0 <__ieee754_pow+0x3f8>)
 800bc6a:	f7f4 fb0d 	bl	8000288 <__aeabi_dsub>
 800bc6e:	4622      	mov	r2, r4
 800bc70:	4680      	mov	r8, r0
 800bc72:	4689      	mov	r9, r1
 800bc74:	462b      	mov	r3, r5
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fcbd 	bl	80005f8 <__aeabi_dmul>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fcb7 	bl	80005f8 <__aeabi_dmul>
 800bc8a:	a33f      	add	r3, pc, #252	; (adr r3, 800bd88 <__ieee754_pow+0x3e0>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4650      	mov	r0, sl
 800bc9a:	4659      	mov	r1, fp
 800bc9c:	f7f4 faf4 	bl	8000288 <__aeabi_dsub>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4680      	mov	r8, r0
 800bca6:	4689      	mov	r9, r1
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 faee 	bl	800028c <__adddf3>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	463b      	mov	r3, r7
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	460d      	mov	r5, r1
 800bcba:	f7f4 fae5 	bl	8000288 <__aeabi_dsub>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f4 fadf 	bl	8000288 <__aeabi_dsub>
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	9a06      	ldr	r2, [sp, #24]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	4682      	mov	sl, r0
 800bcd4:	468b      	mov	fp, r1
 800bcd6:	f040 81e7 	bne.w	800c0a8 <__ieee754_pow+0x700>
 800bcda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bd90 <__ieee754_pow+0x3e8>
 800bcde:	eeb0 8a47 	vmov.f32	s16, s14
 800bce2:	eef0 8a67 	vmov.f32	s17, s15
 800bce6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcea:	2600      	movs	r6, #0
 800bcec:	4632      	mov	r2, r6
 800bcee:	463b      	mov	r3, r7
 800bcf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcf4:	f7f4 fac8 	bl	8000288 <__aeabi_dsub>
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	462b      	mov	r3, r5
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	4650      	mov	r0, sl
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	f7f4 fc74 	bl	80005f8 <__aeabi_dmul>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4640      	mov	r0, r8
 800bd16:	4649      	mov	r1, r9
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	463b      	mov	r3, r7
 800bd20:	4680      	mov	r8, r0
 800bd22:	4689      	mov	r9, r1
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7f4 fc66 	bl	80005f8 <__aeabi_dmul>
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460d      	mov	r5, r1
 800bd32:	4602      	mov	r2, r0
 800bd34:	4649      	mov	r1, r9
 800bd36:	4640      	mov	r0, r8
 800bd38:	f7f4 faa8 	bl	800028c <__adddf3>
 800bd3c:	4b19      	ldr	r3, [pc, #100]	; (800bda4 <__ieee754_pow+0x3fc>)
 800bd3e:	4299      	cmp	r1, r3
 800bd40:	ec45 4b19 	vmov	d9, r4, r5
 800bd44:	4606      	mov	r6, r0
 800bd46:	460f      	mov	r7, r1
 800bd48:	468b      	mov	fp, r1
 800bd4a:	f340 82f0 	ble.w	800c32e <__ieee754_pow+0x986>
 800bd4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd56:	4303      	orrs	r3, r0
 800bd58:	f000 81e4 	beq.w	800c124 <__ieee754_pow+0x77c>
 800bd5c:	ec51 0b18 	vmov	r0, r1, d8
 800bd60:	2200      	movs	r2, #0
 800bd62:	2300      	movs	r3, #0
 800bd64:	f7f4 feba 	bl	8000adc <__aeabi_dcmplt>
 800bd68:	3800      	subs	r0, #0
 800bd6a:	bf18      	it	ne
 800bd6c:	2001      	movne	r0, #1
 800bd6e:	e72b      	b.n	800bbc8 <__ieee754_pow+0x220>
 800bd70:	60000000 	.word	0x60000000
 800bd74:	3ff71547 	.word	0x3ff71547
 800bd78:	f85ddf44 	.word	0xf85ddf44
 800bd7c:	3e54ae0b 	.word	0x3e54ae0b
 800bd80:	55555555 	.word	0x55555555
 800bd84:	3fd55555 	.word	0x3fd55555
 800bd88:	652b82fe 	.word	0x652b82fe
 800bd8c:	3ff71547 	.word	0x3ff71547
 800bd90:	00000000 	.word	0x00000000
 800bd94:	bff00000 	.word	0xbff00000
 800bd98:	3ff00000 	.word	0x3ff00000
 800bd9c:	3fd00000 	.word	0x3fd00000
 800bda0:	3fe00000 	.word	0x3fe00000
 800bda4:	408fffff 	.word	0x408fffff
 800bda8:	4bd5      	ldr	r3, [pc, #852]	; (800c100 <__ieee754_pow+0x758>)
 800bdaa:	402b      	ands	r3, r5
 800bdac:	2200      	movs	r2, #0
 800bdae:	b92b      	cbnz	r3, 800bdbc <__ieee754_pow+0x414>
 800bdb0:	4bd4      	ldr	r3, [pc, #848]	; (800c104 <__ieee754_pow+0x75c>)
 800bdb2:	f7f4 fc21 	bl	80005f8 <__aeabi_dmul>
 800bdb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bdba:	460c      	mov	r4, r1
 800bdbc:	1523      	asrs	r3, r4, #20
 800bdbe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdc2:	4413      	add	r3, r2
 800bdc4:	9305      	str	r3, [sp, #20]
 800bdc6:	4bd0      	ldr	r3, [pc, #832]	; (800c108 <__ieee754_pow+0x760>)
 800bdc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bdcc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bdd0:	429c      	cmp	r4, r3
 800bdd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdd6:	dd08      	ble.n	800bdea <__ieee754_pow+0x442>
 800bdd8:	4bcc      	ldr	r3, [pc, #816]	; (800c10c <__ieee754_pow+0x764>)
 800bdda:	429c      	cmp	r4, r3
 800bddc:	f340 8162 	ble.w	800c0a4 <__ieee754_pow+0x6fc>
 800bde0:	9b05      	ldr	r3, [sp, #20]
 800bde2:	3301      	adds	r3, #1
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bdea:	2400      	movs	r4, #0
 800bdec:	00e3      	lsls	r3, r4, #3
 800bdee:	9307      	str	r3, [sp, #28]
 800bdf0:	4bc7      	ldr	r3, [pc, #796]	; (800c110 <__ieee754_pow+0x768>)
 800bdf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdf6:	ed93 7b00 	vldr	d7, [r3]
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	ec53 2b17 	vmov	r2, r3, d7
 800be00:	eeb0 9a47 	vmov.f32	s18, s14
 800be04:	eef0 9a67 	vmov.f32	s19, s15
 800be08:	4682      	mov	sl, r0
 800be0a:	f7f4 fa3d 	bl	8000288 <__aeabi_dsub>
 800be0e:	4652      	mov	r2, sl
 800be10:	4606      	mov	r6, r0
 800be12:	460f      	mov	r7, r1
 800be14:	462b      	mov	r3, r5
 800be16:	ec51 0b19 	vmov	r0, r1, d9
 800be1a:	f7f4 fa37 	bl	800028c <__adddf3>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	2000      	movs	r0, #0
 800be24:	49bb      	ldr	r1, [pc, #748]	; (800c114 <__ieee754_pow+0x76c>)
 800be26:	f7f4 fd11 	bl	800084c <__aeabi_ddiv>
 800be2a:	ec41 0b1a 	vmov	d10, r0, r1
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	4630      	mov	r0, r6
 800be34:	4639      	mov	r1, r7
 800be36:	f7f4 fbdf 	bl	80005f8 <__aeabi_dmul>
 800be3a:	2300      	movs	r3, #0
 800be3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be40:	9302      	str	r3, [sp, #8]
 800be42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be46:	46ab      	mov	fp, r5
 800be48:	106d      	asrs	r5, r5, #1
 800be4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be52:	ec41 0b18 	vmov	d8, r0, r1
 800be56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be5a:	2200      	movs	r2, #0
 800be5c:	4640      	mov	r0, r8
 800be5e:	4649      	mov	r1, r9
 800be60:	4614      	mov	r4, r2
 800be62:	461d      	mov	r5, r3
 800be64:	f7f4 fbc8 	bl	80005f8 <__aeabi_dmul>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4630      	mov	r0, r6
 800be6e:	4639      	mov	r1, r7
 800be70:	f7f4 fa0a 	bl	8000288 <__aeabi_dsub>
 800be74:	ec53 2b19 	vmov	r2, r3, d9
 800be78:	4606      	mov	r6, r0
 800be7a:	460f      	mov	r7, r1
 800be7c:	4620      	mov	r0, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	f7f4 fa02 	bl	8000288 <__aeabi_dsub>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	f7f4 f9fc 	bl	8000288 <__aeabi_dsub>
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	f7f4 fbb0 	bl	80005f8 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 f9f2 	bl	8000288 <__aeabi_dsub>
 800bea4:	ec53 2b1a 	vmov	r2, r3, d10
 800bea8:	f7f4 fba6 	bl	80005f8 <__aeabi_dmul>
 800beac:	ec53 2b18 	vmov	r2, r3, d8
 800beb0:	ec41 0b19 	vmov	d9, r0, r1
 800beb4:	ec51 0b18 	vmov	r0, r1, d8
 800beb8:	f7f4 fb9e 	bl	80005f8 <__aeabi_dmul>
 800bebc:	a37c      	add	r3, pc, #496	; (adr r3, 800c0b0 <__ieee754_pow+0x708>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	4604      	mov	r4, r0
 800bec4:	460d      	mov	r5, r1
 800bec6:	f7f4 fb97 	bl	80005f8 <__aeabi_dmul>
 800beca:	a37b      	add	r3, pc, #492	; (adr r3, 800c0b8 <__ieee754_pow+0x710>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 f9dc 	bl	800028c <__adddf3>
 800bed4:	4622      	mov	r2, r4
 800bed6:	462b      	mov	r3, r5
 800bed8:	f7f4 fb8e 	bl	80005f8 <__aeabi_dmul>
 800bedc:	a378      	add	r3, pc, #480	; (adr r3, 800c0c0 <__ieee754_pow+0x718>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f9d3 	bl	800028c <__adddf3>
 800bee6:	4622      	mov	r2, r4
 800bee8:	462b      	mov	r3, r5
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	a376      	add	r3, pc, #472	; (adr r3, 800c0c8 <__ieee754_pow+0x720>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7f4 f9ca 	bl	800028c <__adddf3>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	a373      	add	r3, pc, #460	; (adr r3, 800c0d0 <__ieee754_pow+0x728>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f9c1 	bl	800028c <__adddf3>
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	f7f4 fb73 	bl	80005f8 <__aeabi_dmul>
 800bf12:	a371      	add	r3, pc, #452	; (adr r3, 800c0d8 <__ieee754_pow+0x730>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f9b8 	bl	800028c <__adddf3>
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4606      	mov	r6, r0
 800bf20:	460f      	mov	r7, r1
 800bf22:	462b      	mov	r3, r5
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4630      	mov	r0, r6
 800bf32:	4639      	mov	r1, r7
 800bf34:	f7f4 fb60 	bl	80005f8 <__aeabi_dmul>
 800bf38:	4642      	mov	r2, r8
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	464b      	mov	r3, r9
 800bf40:	ec51 0b18 	vmov	r0, r1, d8
 800bf44:	f7f4 f9a2 	bl	800028c <__adddf3>
 800bf48:	ec53 2b19 	vmov	r2, r3, d9
 800bf4c:	f7f4 fb54 	bl	80005f8 <__aeabi_dmul>
 800bf50:	4622      	mov	r2, r4
 800bf52:	462b      	mov	r3, r5
 800bf54:	f7f4 f99a 	bl	800028c <__adddf3>
 800bf58:	4642      	mov	r2, r8
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	468b      	mov	fp, r1
 800bf5e:	464b      	mov	r3, r9
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 fb48 	bl	80005f8 <__aeabi_dmul>
 800bf68:	4b6b      	ldr	r3, [pc, #428]	; (800c118 <__ieee754_pow+0x770>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	4606      	mov	r6, r0
 800bf6e:	460f      	mov	r7, r1
 800bf70:	f7f4 f98c 	bl	800028c <__adddf3>
 800bf74:	4652      	mov	r2, sl
 800bf76:	465b      	mov	r3, fp
 800bf78:	f7f4 f988 	bl	800028c <__adddf3>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	460d      	mov	r5, r1
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4640      	mov	r0, r8
 800bf88:	4649      	mov	r1, r9
 800bf8a:	f7f4 fb35 	bl	80005f8 <__aeabi_dmul>
 800bf8e:	4b62      	ldr	r3, [pc, #392]	; (800c118 <__ieee754_pow+0x770>)
 800bf90:	4680      	mov	r8, r0
 800bf92:	4689      	mov	r9, r1
 800bf94:	2200      	movs	r2, #0
 800bf96:	4620      	mov	r0, r4
 800bf98:	4629      	mov	r1, r5
 800bf9a:	f7f4 f975 	bl	8000288 <__aeabi_dsub>
 800bf9e:	4632      	mov	r2, r6
 800bfa0:	463b      	mov	r3, r7
 800bfa2:	f7f4 f971 	bl	8000288 <__aeabi_dsub>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4650      	mov	r0, sl
 800bfac:	4659      	mov	r1, fp
 800bfae:	f7f4 f96b 	bl	8000288 <__aeabi_dsub>
 800bfb2:	ec53 2b18 	vmov	r2, r3, d8
 800bfb6:	f7f4 fb1f 	bl	80005f8 <__aeabi_dmul>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	ec51 0b19 	vmov	r0, r1, d9
 800bfc6:	f7f4 fb17 	bl	80005f8 <__aeabi_dmul>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4630      	mov	r0, r6
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	f7f4 f95b 	bl	800028c <__adddf3>
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4640      	mov	r0, r8
 800bfe0:	4649      	mov	r1, r9
 800bfe2:	f7f4 f953 	bl	800028c <__adddf3>
 800bfe6:	a33e      	add	r3, pc, #248	; (adr r3, 800c0e0 <__ieee754_pow+0x738>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	2000      	movs	r0, #0
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
 800bff2:	f7f4 fb01 	bl	80005f8 <__aeabi_dmul>
 800bff6:	4642      	mov	r2, r8
 800bff8:	ec41 0b18 	vmov	d8, r0, r1
 800bffc:	464b      	mov	r3, r9
 800bffe:	4620      	mov	r0, r4
 800c000:	4629      	mov	r1, r5
 800c002:	f7f4 f941 	bl	8000288 <__aeabi_dsub>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	4630      	mov	r0, r6
 800c00c:	4639      	mov	r1, r7
 800c00e:	f7f4 f93b 	bl	8000288 <__aeabi_dsub>
 800c012:	a335      	add	r3, pc, #212	; (adr r3, 800c0e8 <__ieee754_pow+0x740>)
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	f7f4 faee 	bl	80005f8 <__aeabi_dmul>
 800c01c:	a334      	add	r3, pc, #208	; (adr r3, 800c0f0 <__ieee754_pow+0x748>)
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	4606      	mov	r6, r0
 800c024:	460f      	mov	r7, r1
 800c026:	4620      	mov	r0, r4
 800c028:	4629      	mov	r1, r5
 800c02a:	f7f4 fae5 	bl	80005f8 <__aeabi_dmul>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	4630      	mov	r0, r6
 800c034:	4639      	mov	r1, r7
 800c036:	f7f4 f929 	bl	800028c <__adddf3>
 800c03a:	9a07      	ldr	r2, [sp, #28]
 800c03c:	4b37      	ldr	r3, [pc, #220]	; (800c11c <__ieee754_pow+0x774>)
 800c03e:	4413      	add	r3, r2
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f922 	bl	800028c <__adddf3>
 800c048:	4682      	mov	sl, r0
 800c04a:	9805      	ldr	r0, [sp, #20]
 800c04c:	468b      	mov	fp, r1
 800c04e:	f7f4 fa69 	bl	8000524 <__aeabi_i2d>
 800c052:	9a07      	ldr	r2, [sp, #28]
 800c054:	4b32      	ldr	r3, [pc, #200]	; (800c120 <__ieee754_pow+0x778>)
 800c056:	4413      	add	r3, r2
 800c058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c05c:	4606      	mov	r6, r0
 800c05e:	460f      	mov	r7, r1
 800c060:	4652      	mov	r2, sl
 800c062:	465b      	mov	r3, fp
 800c064:	ec51 0b18 	vmov	r0, r1, d8
 800c068:	f7f4 f910 	bl	800028c <__adddf3>
 800c06c:	4642      	mov	r2, r8
 800c06e:	464b      	mov	r3, r9
 800c070:	f7f4 f90c 	bl	800028c <__adddf3>
 800c074:	4632      	mov	r2, r6
 800c076:	463b      	mov	r3, r7
 800c078:	f7f4 f908 	bl	800028c <__adddf3>
 800c07c:	2000      	movs	r0, #0
 800c07e:	4632      	mov	r2, r6
 800c080:	463b      	mov	r3, r7
 800c082:	4604      	mov	r4, r0
 800c084:	460d      	mov	r5, r1
 800c086:	f7f4 f8ff 	bl	8000288 <__aeabi_dsub>
 800c08a:	4642      	mov	r2, r8
 800c08c:	464b      	mov	r3, r9
 800c08e:	f7f4 f8fb 	bl	8000288 <__aeabi_dsub>
 800c092:	ec53 2b18 	vmov	r2, r3, d8
 800c096:	f7f4 f8f7 	bl	8000288 <__aeabi_dsub>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4650      	mov	r0, sl
 800c0a0:	4659      	mov	r1, fp
 800c0a2:	e610      	b.n	800bcc6 <__ieee754_pow+0x31e>
 800c0a4:	2401      	movs	r4, #1
 800c0a6:	e6a1      	b.n	800bdec <__ieee754_pow+0x444>
 800c0a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c0f8 <__ieee754_pow+0x750>
 800c0ac:	e617      	b.n	800bcde <__ieee754_pow+0x336>
 800c0ae:	bf00      	nop
 800c0b0:	4a454eef 	.word	0x4a454eef
 800c0b4:	3fca7e28 	.word	0x3fca7e28
 800c0b8:	93c9db65 	.word	0x93c9db65
 800c0bc:	3fcd864a 	.word	0x3fcd864a
 800c0c0:	a91d4101 	.word	0xa91d4101
 800c0c4:	3fd17460 	.word	0x3fd17460
 800c0c8:	518f264d 	.word	0x518f264d
 800c0cc:	3fd55555 	.word	0x3fd55555
 800c0d0:	db6fabff 	.word	0xdb6fabff
 800c0d4:	3fdb6db6 	.word	0x3fdb6db6
 800c0d8:	33333303 	.word	0x33333303
 800c0dc:	3fe33333 	.word	0x3fe33333
 800c0e0:	e0000000 	.word	0xe0000000
 800c0e4:	3feec709 	.word	0x3feec709
 800c0e8:	dc3a03fd 	.word	0xdc3a03fd
 800c0ec:	3feec709 	.word	0x3feec709
 800c0f0:	145b01f5 	.word	0x145b01f5
 800c0f4:	be3e2fe0 	.word	0xbe3e2fe0
 800c0f8:	00000000 	.word	0x00000000
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	7ff00000 	.word	0x7ff00000
 800c104:	43400000 	.word	0x43400000
 800c108:	0003988e 	.word	0x0003988e
 800c10c:	000bb679 	.word	0x000bb679
 800c110:	0800d3a0 	.word	0x0800d3a0
 800c114:	3ff00000 	.word	0x3ff00000
 800c118:	40080000 	.word	0x40080000
 800c11c:	0800d3c0 	.word	0x0800d3c0
 800c120:	0800d3b0 	.word	0x0800d3b0
 800c124:	a3b3      	add	r3, pc, #716	; (adr r3, 800c3f4 <__ieee754_pow+0xa4c>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 f8ad 	bl	800028c <__adddf3>
 800c132:	4622      	mov	r2, r4
 800c134:	ec41 0b1a 	vmov	d10, r0, r1
 800c138:	462b      	mov	r3, r5
 800c13a:	4630      	mov	r0, r6
 800c13c:	4639      	mov	r1, r7
 800c13e:	f7f4 f8a3 	bl	8000288 <__aeabi_dsub>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	ec51 0b1a 	vmov	r0, r1, d10
 800c14a:	f7f4 fce5 	bl	8000b18 <__aeabi_dcmpgt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f47f ae04 	bne.w	800bd5c <__ieee754_pow+0x3b4>
 800c154:	4aa2      	ldr	r2, [pc, #648]	; (800c3e0 <__ieee754_pow+0xa38>)
 800c156:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c15a:	4293      	cmp	r3, r2
 800c15c:	f340 8107 	ble.w	800c36e <__ieee754_pow+0x9c6>
 800c160:	151b      	asrs	r3, r3, #20
 800c162:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c166:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c16a:	fa4a fa03 	asr.w	sl, sl, r3
 800c16e:	44da      	add	sl, fp
 800c170:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c174:	489b      	ldr	r0, [pc, #620]	; (800c3e4 <__ieee754_pow+0xa3c>)
 800c176:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c17a:	4108      	asrs	r0, r1
 800c17c:	ea00 030a 	and.w	r3, r0, sl
 800c180:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c184:	f1c1 0114 	rsb	r1, r1, #20
 800c188:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c18c:	fa4a fa01 	asr.w	sl, sl, r1
 800c190:	f1bb 0f00 	cmp.w	fp, #0
 800c194:	f04f 0200 	mov.w	r2, #0
 800c198:	4620      	mov	r0, r4
 800c19a:	4629      	mov	r1, r5
 800c19c:	bfb8      	it	lt
 800c19e:	f1ca 0a00 	rsblt	sl, sl, #0
 800c1a2:	f7f4 f871 	bl	8000288 <__aeabi_dsub>
 800c1a6:	ec41 0b19 	vmov	d9, r0, r1
 800c1aa:	4642      	mov	r2, r8
 800c1ac:	464b      	mov	r3, r9
 800c1ae:	ec51 0b19 	vmov	r0, r1, d9
 800c1b2:	f7f4 f86b 	bl	800028c <__adddf3>
 800c1b6:	a37a      	add	r3, pc, #488	; (adr r3, 800c3a0 <__ieee754_pow+0x9f8>)
 800c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1bc:	2000      	movs	r0, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	f7f4 fa19 	bl	80005f8 <__aeabi_dmul>
 800c1c6:	ec53 2b19 	vmov	r2, r3, d9
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460f      	mov	r7, r1
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	f7f4 f859 	bl	8000288 <__aeabi_dsub>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4640      	mov	r0, r8
 800c1dc:	4649      	mov	r1, r9
 800c1de:	f7f4 f853 	bl	8000288 <__aeabi_dsub>
 800c1e2:	a371      	add	r3, pc, #452	; (adr r3, 800c3a8 <__ieee754_pow+0xa00>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	f7f4 fa06 	bl	80005f8 <__aeabi_dmul>
 800c1ec:	a370      	add	r3, pc, #448	; (adr r3, 800c3b0 <__ieee754_pow+0xa08>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	4680      	mov	r8, r0
 800c1f4:	4689      	mov	r9, r1
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 f9fd 	bl	80005f8 <__aeabi_dmul>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	4640      	mov	r0, r8
 800c204:	4649      	mov	r1, r9
 800c206:	f7f4 f841 	bl	800028c <__adddf3>
 800c20a:	4604      	mov	r4, r0
 800c20c:	460d      	mov	r5, r1
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	f7f4 f839 	bl	800028c <__adddf3>
 800c21a:	4632      	mov	r2, r6
 800c21c:	463b      	mov	r3, r7
 800c21e:	4680      	mov	r8, r0
 800c220:	4689      	mov	r9, r1
 800c222:	f7f4 f831 	bl	8000288 <__aeabi_dsub>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4620      	mov	r0, r4
 800c22c:	4629      	mov	r1, r5
 800c22e:	f7f4 f82b 	bl	8000288 <__aeabi_dsub>
 800c232:	4642      	mov	r2, r8
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	464b      	mov	r3, r9
 800c23a:	4640      	mov	r0, r8
 800c23c:	4649      	mov	r1, r9
 800c23e:	f7f4 f9db 	bl	80005f8 <__aeabi_dmul>
 800c242:	a35d      	add	r3, pc, #372	; (adr r3, 800c3b8 <__ieee754_pow+0xa10>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	4604      	mov	r4, r0
 800c24a:	460d      	mov	r5, r1
 800c24c:	f7f4 f9d4 	bl	80005f8 <__aeabi_dmul>
 800c250:	a35b      	add	r3, pc, #364	; (adr r3, 800c3c0 <__ieee754_pow+0xa18>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f4 f817 	bl	8000288 <__aeabi_dsub>
 800c25a:	4622      	mov	r2, r4
 800c25c:	462b      	mov	r3, r5
 800c25e:	f7f4 f9cb 	bl	80005f8 <__aeabi_dmul>
 800c262:	a359      	add	r3, pc, #356	; (adr r3, 800c3c8 <__ieee754_pow+0xa20>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f810 	bl	800028c <__adddf3>
 800c26c:	4622      	mov	r2, r4
 800c26e:	462b      	mov	r3, r5
 800c270:	f7f4 f9c2 	bl	80005f8 <__aeabi_dmul>
 800c274:	a356      	add	r3, pc, #344	; (adr r3, 800c3d0 <__ieee754_pow+0xa28>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 f805 	bl	8000288 <__aeabi_dsub>
 800c27e:	4622      	mov	r2, r4
 800c280:	462b      	mov	r3, r5
 800c282:	f7f4 f9b9 	bl	80005f8 <__aeabi_dmul>
 800c286:	a354      	add	r3, pc, #336	; (adr r3, 800c3d8 <__ieee754_pow+0xa30>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f3 fffe 	bl	800028c <__adddf3>
 800c290:	4622      	mov	r2, r4
 800c292:	462b      	mov	r3, r5
 800c294:	f7f4 f9b0 	bl	80005f8 <__aeabi_dmul>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4640      	mov	r0, r8
 800c29e:	4649      	mov	r1, r9
 800c2a0:	f7f3 fff2 	bl	8000288 <__aeabi_dsub>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	460d      	mov	r5, r1
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	f7f4 f9a2 	bl	80005f8 <__aeabi_dmul>
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	ec41 0b19 	vmov	d9, r0, r1
 800c2ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	f7f3 ffe1 	bl	8000288 <__aeabi_dsub>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	ec51 0b19 	vmov	r0, r1, d9
 800c2ce:	f7f4 fabd 	bl	800084c <__aeabi_ddiv>
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	463b      	mov	r3, r7
 800c2da:	4640      	mov	r0, r8
 800c2dc:	4649      	mov	r1, r9
 800c2de:	f7f4 f98b 	bl	80005f8 <__aeabi_dmul>
 800c2e2:	4632      	mov	r2, r6
 800c2e4:	463b      	mov	r3, r7
 800c2e6:	f7f3 ffd1 	bl	800028c <__adddf3>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f3 ffc9 	bl	8000288 <__aeabi_dsub>
 800c2f6:	4642      	mov	r2, r8
 800c2f8:	464b      	mov	r3, r9
 800c2fa:	f7f3 ffc5 	bl	8000288 <__aeabi_dsub>
 800c2fe:	460b      	mov	r3, r1
 800c300:	4602      	mov	r2, r0
 800c302:	4939      	ldr	r1, [pc, #228]	; (800c3e8 <__ieee754_pow+0xa40>)
 800c304:	2000      	movs	r0, #0
 800c306:	f7f3 ffbf 	bl	8000288 <__aeabi_dsub>
 800c30a:	ec41 0b10 	vmov	d0, r0, r1
 800c30e:	ee10 3a90 	vmov	r3, s1
 800c312:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c31a:	da2b      	bge.n	800c374 <__ieee754_pow+0x9cc>
 800c31c:	4650      	mov	r0, sl
 800c31e:	f000 f877 	bl	800c410 <scalbn>
 800c322:	ec51 0b10 	vmov	r0, r1, d0
 800c326:	ec53 2b18 	vmov	r2, r3, d8
 800c32a:	f7ff bbee 	b.w	800bb0a <__ieee754_pow+0x162>
 800c32e:	4b2f      	ldr	r3, [pc, #188]	; (800c3ec <__ieee754_pow+0xa44>)
 800c330:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c334:	429e      	cmp	r6, r3
 800c336:	f77f af0d 	ble.w	800c154 <__ieee754_pow+0x7ac>
 800c33a:	4b2d      	ldr	r3, [pc, #180]	; (800c3f0 <__ieee754_pow+0xa48>)
 800c33c:	440b      	add	r3, r1
 800c33e:	4303      	orrs	r3, r0
 800c340:	d009      	beq.n	800c356 <__ieee754_pow+0x9ae>
 800c342:	ec51 0b18 	vmov	r0, r1, d8
 800c346:	2200      	movs	r2, #0
 800c348:	2300      	movs	r3, #0
 800c34a:	f7f4 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800c34e:	3800      	subs	r0, #0
 800c350:	bf18      	it	ne
 800c352:	2001      	movne	r0, #1
 800c354:	e448      	b.n	800bbe8 <__ieee754_pow+0x240>
 800c356:	4622      	mov	r2, r4
 800c358:	462b      	mov	r3, r5
 800c35a:	f7f3 ff95 	bl	8000288 <__aeabi_dsub>
 800c35e:	4642      	mov	r2, r8
 800c360:	464b      	mov	r3, r9
 800c362:	f7f4 fbcf 	bl	8000b04 <__aeabi_dcmpge>
 800c366:	2800      	cmp	r0, #0
 800c368:	f43f aef4 	beq.w	800c154 <__ieee754_pow+0x7ac>
 800c36c:	e7e9      	b.n	800c342 <__ieee754_pow+0x99a>
 800c36e:	f04f 0a00 	mov.w	sl, #0
 800c372:	e71a      	b.n	800c1aa <__ieee754_pow+0x802>
 800c374:	ec51 0b10 	vmov	r0, r1, d0
 800c378:	4619      	mov	r1, r3
 800c37a:	e7d4      	b.n	800c326 <__ieee754_pow+0x97e>
 800c37c:	491a      	ldr	r1, [pc, #104]	; (800c3e8 <__ieee754_pow+0xa40>)
 800c37e:	2000      	movs	r0, #0
 800c380:	f7ff bb31 	b.w	800b9e6 <__ieee754_pow+0x3e>
 800c384:	2000      	movs	r0, #0
 800c386:	2100      	movs	r1, #0
 800c388:	f7ff bb2d 	b.w	800b9e6 <__ieee754_pow+0x3e>
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7ff bb29 	b.w	800b9e6 <__ieee754_pow+0x3e>
 800c394:	9204      	str	r2, [sp, #16]
 800c396:	f7ff bb7b 	b.w	800ba90 <__ieee754_pow+0xe8>
 800c39a:	2300      	movs	r3, #0
 800c39c:	f7ff bb65 	b.w	800ba6a <__ieee754_pow+0xc2>
 800c3a0:	00000000 	.word	0x00000000
 800c3a4:	3fe62e43 	.word	0x3fe62e43
 800c3a8:	fefa39ef 	.word	0xfefa39ef
 800c3ac:	3fe62e42 	.word	0x3fe62e42
 800c3b0:	0ca86c39 	.word	0x0ca86c39
 800c3b4:	be205c61 	.word	0xbe205c61
 800c3b8:	72bea4d0 	.word	0x72bea4d0
 800c3bc:	3e663769 	.word	0x3e663769
 800c3c0:	c5d26bf1 	.word	0xc5d26bf1
 800c3c4:	3ebbbd41 	.word	0x3ebbbd41
 800c3c8:	af25de2c 	.word	0xaf25de2c
 800c3cc:	3f11566a 	.word	0x3f11566a
 800c3d0:	16bebd93 	.word	0x16bebd93
 800c3d4:	3f66c16c 	.word	0x3f66c16c
 800c3d8:	5555553e 	.word	0x5555553e
 800c3dc:	3fc55555 	.word	0x3fc55555
 800c3e0:	3fe00000 	.word	0x3fe00000
 800c3e4:	fff00000 	.word	0xfff00000
 800c3e8:	3ff00000 	.word	0x3ff00000
 800c3ec:	4090cbff 	.word	0x4090cbff
 800c3f0:	3f6f3400 	.word	0x3f6f3400
 800c3f4:	652b82fe 	.word	0x652b82fe
 800c3f8:	3c971547 	.word	0x3c971547

0800c3fc <fabs>:
 800c3fc:	ec51 0b10 	vmov	r0, r1, d0
 800c400:	ee10 2a10 	vmov	r2, s0
 800c404:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c408:	ec43 2b10 	vmov	d0, r2, r3
 800c40c:	4770      	bx	lr
	...

0800c410 <scalbn>:
 800c410:	b570      	push	{r4, r5, r6, lr}
 800c412:	ec55 4b10 	vmov	r4, r5, d0
 800c416:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c41a:	4606      	mov	r6, r0
 800c41c:	462b      	mov	r3, r5
 800c41e:	b999      	cbnz	r1, 800c448 <scalbn+0x38>
 800c420:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c424:	4323      	orrs	r3, r4
 800c426:	d03f      	beq.n	800c4a8 <scalbn+0x98>
 800c428:	4b35      	ldr	r3, [pc, #212]	; (800c500 <scalbn+0xf0>)
 800c42a:	4629      	mov	r1, r5
 800c42c:	ee10 0a10 	vmov	r0, s0
 800c430:	2200      	movs	r2, #0
 800c432:	f7f4 f8e1 	bl	80005f8 <__aeabi_dmul>
 800c436:	4b33      	ldr	r3, [pc, #204]	; (800c504 <scalbn+0xf4>)
 800c438:	429e      	cmp	r6, r3
 800c43a:	4604      	mov	r4, r0
 800c43c:	460d      	mov	r5, r1
 800c43e:	da10      	bge.n	800c462 <scalbn+0x52>
 800c440:	a327      	add	r3, pc, #156	; (adr r3, 800c4e0 <scalbn+0xd0>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	e01f      	b.n	800c488 <scalbn+0x78>
 800c448:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c44c:	4291      	cmp	r1, r2
 800c44e:	d10c      	bne.n	800c46a <scalbn+0x5a>
 800c450:	ee10 2a10 	vmov	r2, s0
 800c454:	4620      	mov	r0, r4
 800c456:	4629      	mov	r1, r5
 800c458:	f7f3 ff18 	bl	800028c <__adddf3>
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	e022      	b.n	800c4a8 <scalbn+0x98>
 800c462:	460b      	mov	r3, r1
 800c464:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c468:	3936      	subs	r1, #54	; 0x36
 800c46a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c46e:	4296      	cmp	r6, r2
 800c470:	dd0d      	ble.n	800c48e <scalbn+0x7e>
 800c472:	2d00      	cmp	r5, #0
 800c474:	a11c      	add	r1, pc, #112	; (adr r1, 800c4e8 <scalbn+0xd8>)
 800c476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c47a:	da02      	bge.n	800c482 <scalbn+0x72>
 800c47c:	a11c      	add	r1, pc, #112	; (adr r1, 800c4f0 <scalbn+0xe0>)
 800c47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c482:	a319      	add	r3, pc, #100	; (adr r3, 800c4e8 <scalbn+0xd8>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f7f4 f8b6 	bl	80005f8 <__aeabi_dmul>
 800c48c:	e7e6      	b.n	800c45c <scalbn+0x4c>
 800c48e:	1872      	adds	r2, r6, r1
 800c490:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c494:	428a      	cmp	r2, r1
 800c496:	dcec      	bgt.n	800c472 <scalbn+0x62>
 800c498:	2a00      	cmp	r2, #0
 800c49a:	dd08      	ble.n	800c4ae <scalbn+0x9e>
 800c49c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4a8:	ec45 4b10 	vmov	d0, r4, r5
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c4b2:	da08      	bge.n	800c4c6 <scalbn+0xb6>
 800c4b4:	2d00      	cmp	r5, #0
 800c4b6:	a10a      	add	r1, pc, #40	; (adr r1, 800c4e0 <scalbn+0xd0>)
 800c4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4bc:	dac0      	bge.n	800c440 <scalbn+0x30>
 800c4be:	a10e      	add	r1, pc, #56	; (adr r1, 800c4f8 <scalbn+0xe8>)
 800c4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c4:	e7bc      	b.n	800c440 <scalbn+0x30>
 800c4c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4ca:	3236      	adds	r2, #54	; 0x36
 800c4cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4b0c      	ldr	r3, [pc, #48]	; (800c508 <scalbn+0xf8>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	e7d5      	b.n	800c488 <scalbn+0x78>
 800c4dc:	f3af 8000 	nop.w
 800c4e0:	c2f8f359 	.word	0xc2f8f359
 800c4e4:	01a56e1f 	.word	0x01a56e1f
 800c4e8:	8800759c 	.word	0x8800759c
 800c4ec:	7e37e43c 	.word	0x7e37e43c
 800c4f0:	8800759c 	.word	0x8800759c
 800c4f4:	fe37e43c 	.word	0xfe37e43c
 800c4f8:	c2f8f359 	.word	0xc2f8f359
 800c4fc:	81a56e1f 	.word	0x81a56e1f
 800c500:	43500000 	.word	0x43500000
 800c504:	ffff3cb0 	.word	0xffff3cb0
 800c508:	3c900000 	.word	0x3c900000

0800c50c <with_errno>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	4604      	mov	r4, r0
 800c510:	460d      	mov	r5, r1
 800c512:	4616      	mov	r6, r2
 800c514:	f7fd f8b2 	bl	800967c <__errno>
 800c518:	4629      	mov	r1, r5
 800c51a:	6006      	str	r6, [r0, #0]
 800c51c:	4620      	mov	r0, r4
 800c51e:	bd70      	pop	{r4, r5, r6, pc}

0800c520 <xflow>:
 800c520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c522:	4614      	mov	r4, r2
 800c524:	461d      	mov	r5, r3
 800c526:	b108      	cbz	r0, 800c52c <xflow+0xc>
 800c528:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c52c:	e9cd 2300 	strd	r2, r3, [sp]
 800c530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c534:	4620      	mov	r0, r4
 800c536:	4629      	mov	r1, r5
 800c538:	f7f4 f85e 	bl	80005f8 <__aeabi_dmul>
 800c53c:	2222      	movs	r2, #34	; 0x22
 800c53e:	b003      	add	sp, #12
 800c540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c544:	f7ff bfe2 	b.w	800c50c <with_errno>

0800c548 <__math_uflow>:
 800c548:	b508      	push	{r3, lr}
 800c54a:	2200      	movs	r2, #0
 800c54c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c550:	f7ff ffe6 	bl	800c520 <xflow>
 800c554:	ec41 0b10 	vmov	d0, r0, r1
 800c558:	bd08      	pop	{r3, pc}

0800c55a <__math_oflow>:
 800c55a:	b508      	push	{r3, lr}
 800c55c:	2200      	movs	r2, #0
 800c55e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c562:	f7ff ffdd 	bl	800c520 <xflow>
 800c566:	ec41 0b10 	vmov	d0, r0, r1
 800c56a:	bd08      	pop	{r3, pc}

0800c56c <_kill>:
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <_kill+0xc>)
 800c56e:	2258      	movs	r2, #88	; 0x58
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	4770      	bx	lr
 800c578:	200010a4 	.word	0x200010a4

0800c57c <_exit>:
 800c57c:	e7fe      	b.n	800c57c <_exit>
	...

0800c580 <_init>:
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	bf00      	nop
 800c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c586:	bc08      	pop	{r3}
 800c588:	469e      	mov	lr, r3
 800c58a:	4770      	bx	lr

0800c58c <_fini>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	bf00      	nop
 800c590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c592:	bc08      	pop	{r3}
 800c594:	469e      	mov	lr, r3
 800c596:	4770      	bx	lr
